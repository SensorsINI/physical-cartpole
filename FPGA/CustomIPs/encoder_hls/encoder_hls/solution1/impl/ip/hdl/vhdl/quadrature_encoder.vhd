-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity quadrature_encoder is
generic (
    C_S_AXI_ENCODER_AXI_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_ENCODER_AXI_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    A : IN STD_LOGIC;
    B : IN STD_LOGIC;
    s_axi_ENCODER_AXI_AWVALID : IN STD_LOGIC;
    s_axi_ENCODER_AXI_AWREADY : OUT STD_LOGIC;
    s_axi_ENCODER_AXI_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ENCODER_AXI_ADDR_WIDTH-1 downto 0);
    s_axi_ENCODER_AXI_WVALID : IN STD_LOGIC;
    s_axi_ENCODER_AXI_WREADY : OUT STD_LOGIC;
    s_axi_ENCODER_AXI_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_ENCODER_AXI_DATA_WIDTH-1 downto 0);
    s_axi_ENCODER_AXI_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_ENCODER_AXI_DATA_WIDTH/8-1 downto 0);
    s_axi_ENCODER_AXI_ARVALID : IN STD_LOGIC;
    s_axi_ENCODER_AXI_ARREADY : OUT STD_LOGIC;
    s_axi_ENCODER_AXI_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ENCODER_AXI_ADDR_WIDTH-1 downto 0);
    s_axi_ENCODER_AXI_RVALID : OUT STD_LOGIC;
    s_axi_ENCODER_AXI_RREADY : IN STD_LOGIC;
    s_axi_ENCODER_AXI_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_ENCODER_AXI_DATA_WIDTH-1 downto 0);
    s_axi_ENCODER_AXI_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_ENCODER_AXI_BVALID : OUT STD_LOGIC;
    s_axi_ENCODER_AXI_BREADY : IN STD_LOGIC;
    s_axi_ENCODER_AXI_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of quadrature_encoder is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "quadrature_encoder,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.806000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=113,HLS_SYN_LUT=193,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal reset : STD_LOGIC;
    signal count : STD_LOGIC_VECTOR (31 downto 0);
    signal count_ap_vld : STD_LOGIC;
    signal curr_count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal lastA : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal lastB : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal quad_encoding_table_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal quad_encoding_table_ce0 : STD_LOGIC;
    signal quad_encoding_table_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln41_fu_104_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln41_fu_137_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_fu_92_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_92_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_92_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_fu_125_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln41_fu_133_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln36_fu_125_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component quadrature_encodebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component quadrature_encoder_ENCODER_AXI_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        reset : OUT STD_LOGIC;
        count : IN STD_LOGIC_VECTOR (31 downto 0);
        count_ap_vld : IN STD_LOGIC );
    end component;



begin
    quad_encoding_table_U : component quadrature_encodebkb
    generic map (
        DataWidth => 2,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => quad_encoding_table_address0,
        ce0 => quad_encoding_table_ce0,
        q0 => quad_encoding_table_q0);

    quadrature_encoder_ENCODER_AXI_s_axi_U : component quadrature_encoder_ENCODER_AXI_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_ENCODER_AXI_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_ENCODER_AXI_DATA_WIDTH)
    port map (
        AWVALID => s_axi_ENCODER_AXI_AWVALID,
        AWREADY => s_axi_ENCODER_AXI_AWREADY,
        AWADDR => s_axi_ENCODER_AXI_AWADDR,
        WVALID => s_axi_ENCODER_AXI_WVALID,
        WREADY => s_axi_ENCODER_AXI_WREADY,
        WDATA => s_axi_ENCODER_AXI_WDATA,
        WSTRB => s_axi_ENCODER_AXI_WSTRB,
        ARVALID => s_axi_ENCODER_AXI_ARVALID,
        ARREADY => s_axi_ENCODER_AXI_ARREADY,
        ARADDR => s_axi_ENCODER_AXI_ARADDR,
        RVALID => s_axi_ENCODER_AXI_RVALID,
        RREADY => s_axi_ENCODER_AXI_RREADY,
        RDATA => s_axi_ENCODER_AXI_RDATA,
        RRESP => s_axi_ENCODER_AXI_RRESP,
        BVALID => s_axi_ENCODER_AXI_BVALID,
        BREADY => s_axi_ENCODER_AXI_BREADY,
        BRESP => s_axi_ENCODER_AXI_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        reset => reset,
        count => count,
        count_ap_vld => count_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                curr_count <= add_ln41_fu_137_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                lastA <= (0=>A, others=>'-');
                lastB <= (0=>B, others=>'-');
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln41_fu_137_p2 <= std_logic_vector(signed(sext_ln41_fu_133_p1) + signed(select_ln36_fu_125_p3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    count <= std_logic_vector(signed(sext_ln41_fu_133_p1) + signed(select_ln36_fu_125_p3));

    count_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            count_ap_vld <= ap_const_logic_1;
        else 
            count_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    quad_encoding_table_address0 <= zext_ln41_fu_104_p1(4 - 1 downto 0);

    quad_encoding_table_ce0_assign_proc : process(ap_CS_fsm_state1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            quad_encoding_table_ce0 <= ap_const_logic_1;
        else 
            quad_encoding_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln36_fu_125_p0 <= (0=>reset, others=>'-');
    select_ln36_fu_125_p3 <= 
        ap_const_lv32_0 when (select_ln36_fu_125_p0(0) = '1') else 
        curr_count;
        sext_ln41_fu_133_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(quad_encoding_table_q0),32));

    tmp_1_fu_92_p2 <= (0=>A, others=>'-');
    tmp_1_fu_92_p4 <= (0=>B, others=>'-');
    tmp_1_fu_92_p5 <= (((lastA & tmp_1_fu_92_p2) & lastB) & tmp_1_fu_92_p4);
    zext_ln41_fu_104_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_92_p5),64));
end behav;
