// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="motor_hls,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.693312,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=203,HLS_SYN_LUT=516,HLS_VERSION=2020_1}" *)

module motor_hls (
        ap_clk,
        ap_rst_n,
        pwm_out,
        direction_output_1,
        direction_output_2,
        s_axi_MOTOR_AXI_AWVALID,
        s_axi_MOTOR_AXI_AWREADY,
        s_axi_MOTOR_AXI_AWADDR,
        s_axi_MOTOR_AXI_WVALID,
        s_axi_MOTOR_AXI_WREADY,
        s_axi_MOTOR_AXI_WDATA,
        s_axi_MOTOR_AXI_WSTRB,
        s_axi_MOTOR_AXI_ARVALID,
        s_axi_MOTOR_AXI_ARREADY,
        s_axi_MOTOR_AXI_ARADDR,
        s_axi_MOTOR_AXI_RVALID,
        s_axi_MOTOR_AXI_RREADY,
        s_axi_MOTOR_AXI_RDATA,
        s_axi_MOTOR_AXI_RRESP,
        s_axi_MOTOR_AXI_BVALID,
        s_axi_MOTOR_AXI_BREADY,
        s_axi_MOTOR_AXI_BRESP
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;
parameter    C_S_AXI_MOTOR_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_MOTOR_AXI_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_MOTOR_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   pwm_out;
output   direction_output_1;
output   direction_output_2;
input   s_axi_MOTOR_AXI_AWVALID;
output   s_axi_MOTOR_AXI_AWREADY;
input  [C_S_AXI_MOTOR_AXI_ADDR_WIDTH - 1:0] s_axi_MOTOR_AXI_AWADDR;
input   s_axi_MOTOR_AXI_WVALID;
output   s_axi_MOTOR_AXI_WREADY;
input  [C_S_AXI_MOTOR_AXI_DATA_WIDTH - 1:0] s_axi_MOTOR_AXI_WDATA;
input  [C_S_AXI_MOTOR_AXI_WSTRB_WIDTH - 1:0] s_axi_MOTOR_AXI_WSTRB;
input   s_axi_MOTOR_AXI_ARVALID;
output   s_axi_MOTOR_AXI_ARREADY;
input  [C_S_AXI_MOTOR_AXI_ADDR_WIDTH - 1:0] s_axi_MOTOR_AXI_ARADDR;
output   s_axi_MOTOR_AXI_RVALID;
input   s_axi_MOTOR_AXI_RREADY;
output  [C_S_AXI_MOTOR_AXI_DATA_WIDTH - 1:0] s_axi_MOTOR_AXI_RDATA;
output  [1:0] s_axi_MOTOR_AXI_RRESP;
output   s_axi_MOTOR_AXI_BVALID;
input   s_axi_MOTOR_AXI_BREADY;
output  [1:0] s_axi_MOTOR_AXI_BRESP;

 reg    ap_rst_n_inv;
wire   [31:0] pwm_period_in_clock_cycles;
wire   [31:0] pwm_duty_cycle_in_clock_cycles;
reg   [31:0] counter;
wire   [30:0] select_ln26_fu_109_p3;
reg   [30:0] select_ln26_reg_202;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] duty_cycle_fu_133_p3;
reg   [31:0] duty_cycle_reg_208;
wire   [31:0] select_ln36_fu_188_p3;
wire    ap_CS_fsm_state2;
wire   [0:0] p_Result_s_fu_90_p3;
wire   [0:0] icmp_ln26_fu_99_p2;
wire   [30:0] trunc_ln26_fu_105_p1;
wire   [31:0] xs_V_1_fu_117_p2;
reg   [31:0] p_Result_1_fu_123_p4;
wire   [31:0] zext_ln26_fu_141_p1;
wire   [0:0] icmp_ln31_fu_144_p2;
wire   [31:0] duty_cycle_1_fu_149_p3;
wire   [30:0] add_ln36_fu_167_p2;
wire   [31:0] zext_ln36_fu_172_p1;
wire   [0:0] icmp_ln36_fu_176_p2;
wire   [31:0] add_ln36_1_fu_182_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 counter = 32'd0;
#0 ap_CS_fsm = 2'd1;
end

motor_hls_MOTOR_AXI_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_MOTOR_AXI_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_MOTOR_AXI_DATA_WIDTH ))
motor_hls_MOTOR_AXI_s_axi_U(
    .AWVALID(s_axi_MOTOR_AXI_AWVALID),
    .AWREADY(s_axi_MOTOR_AXI_AWREADY),
    .AWADDR(s_axi_MOTOR_AXI_AWADDR),
    .WVALID(s_axi_MOTOR_AXI_WVALID),
    .WREADY(s_axi_MOTOR_AXI_WREADY),
    .WDATA(s_axi_MOTOR_AXI_WDATA),
    .WSTRB(s_axi_MOTOR_AXI_WSTRB),
    .ARVALID(s_axi_MOTOR_AXI_ARVALID),
    .ARREADY(s_axi_MOTOR_AXI_ARREADY),
    .ARADDR(s_axi_MOTOR_AXI_ARADDR),
    .RVALID(s_axi_MOTOR_AXI_RVALID),
    .RREADY(s_axi_MOTOR_AXI_RREADY),
    .RDATA(s_axi_MOTOR_AXI_RDATA),
    .RRESP(s_axi_MOTOR_AXI_RRESP),
    .BVALID(s_axi_MOTOR_AXI_BVALID),
    .BREADY(s_axi_MOTOR_AXI_BREADY),
    .BRESP(s_axi_MOTOR_AXI_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .pwm_period_in_clock_cycles(pwm_period_in_clock_cycles),
    .pwm_duty_cycle_in_clock_cycles(pwm_duty_cycle_in_clock_cycles)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        counter <= select_ln36_fu_188_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        duty_cycle_reg_208 <= duty_cycle_fu_133_p3;
        select_ln26_reg_202 <= select_ln26_fu_109_p3;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln36_1_fu_182_p2 = (32'd1 + counter);

assign add_ln36_fu_167_p2 = ($signed(31'd2147483647) + $signed(select_ln26_reg_202));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign direction_output_1 = (($signed(pwm_duty_cycle_in_clock_cycles) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign direction_output_2 = pwm_duty_cycle_in_clock_cycles[32'd31];

assign duty_cycle_1_fu_149_p3 = ((icmp_ln31_fu_144_p2[0:0] === 1'b1) ? zext_ln26_fu_141_p1 : duty_cycle_reg_208);

assign duty_cycle_fu_133_p3 = ((p_Result_s_fu_90_p3[0:0] === 1'b1) ? p_Result_1_fu_123_p4 : pwm_duty_cycle_in_clock_cycles);

assign icmp_ln26_fu_99_p2 = (($signed(pwm_period_in_clock_cycles) < $signed(32'd1)) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_144_p2 = (($signed(duty_cycle_reg_208) > $signed(zext_ln26_fu_141_p1)) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_176_p2 = (($signed(counter) < $signed(zext_ln36_fu_172_p1)) ? 1'b1 : 1'b0);

always @ (*) begin
    p_Result_1_fu_123_p4 = xs_V_1_fu_117_p2;
    p_Result_1_fu_123_p4[32'd31] = |(1'd0);
end

assign p_Result_s_fu_90_p3 = pwm_duty_cycle_in_clock_cycles[32'd31];

assign pwm_out = (($signed(counter) < $signed(duty_cycle_1_fu_149_p3)) ? 1'b1 : 1'b0);

assign select_ln26_fu_109_p3 = ((icmp_ln26_fu_99_p2[0:0] === 1'b1) ? 31'd1 : trunc_ln26_fu_105_p1);

assign select_ln36_fu_188_p3 = ((icmp_ln36_fu_176_p2[0:0] === 1'b1) ? add_ln36_1_fu_182_p2 : 32'd0);

assign trunc_ln26_fu_105_p1 = pwm_period_in_clock_cycles[30:0];

assign xs_V_1_fu_117_p2 = (32'd0 - pwm_duty_cycle_in_clock_cycles);

assign zext_ln26_fu_141_p1 = select_ln26_reg_202;

assign zext_ln36_fu_172_p1 = add_ln36_fu_167_p2;

endmodule //motor_hls
