-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity motor_hls is
generic (
    C_S_AXI_MOTOR_AXI_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_MOTOR_AXI_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    pwm_out : OUT STD_LOGIC;
    direction_output_1 : OUT STD_LOGIC;
    direction_output_2 : OUT STD_LOGIC;
    s_axi_MOTOR_AXI_AWVALID : IN STD_LOGIC;
    s_axi_MOTOR_AXI_AWREADY : OUT STD_LOGIC;
    s_axi_MOTOR_AXI_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_MOTOR_AXI_ADDR_WIDTH-1 downto 0);
    s_axi_MOTOR_AXI_WVALID : IN STD_LOGIC;
    s_axi_MOTOR_AXI_WREADY : OUT STD_LOGIC;
    s_axi_MOTOR_AXI_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_MOTOR_AXI_DATA_WIDTH-1 downto 0);
    s_axi_MOTOR_AXI_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_MOTOR_AXI_DATA_WIDTH/8-1 downto 0);
    s_axi_MOTOR_AXI_ARVALID : IN STD_LOGIC;
    s_axi_MOTOR_AXI_ARREADY : OUT STD_LOGIC;
    s_axi_MOTOR_AXI_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_MOTOR_AXI_ADDR_WIDTH-1 downto 0);
    s_axi_MOTOR_AXI_RVALID : OUT STD_LOGIC;
    s_axi_MOTOR_AXI_RREADY : IN STD_LOGIC;
    s_axi_MOTOR_AXI_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_MOTOR_AXI_DATA_WIDTH-1 downto 0);
    s_axi_MOTOR_AXI_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_MOTOR_AXI_BVALID : OUT STD_LOGIC;
    s_axi_MOTOR_AXI_BREADY : IN STD_LOGIC;
    s_axi_MOTOR_AXI_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of motor_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "motor_hls,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.693312,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=203,HLS_SYN_LUT=516,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal pwm_period_in_clock_cycles : STD_LOGIC_VECTOR (31 downto 0);
    signal pwm_duty_cycle_in_clock_cycles : STD_LOGIC_VECTOR (31 downto 0);
    signal counter : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal select_ln26_fu_109_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln26_reg_202 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal duty_cycle_fu_133_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal duty_cycle_reg_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln36_fu_188_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_Result_s_fu_90_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_fu_99_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln26_fu_105_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal xs_V_1_fu_117_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_123_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln26_fu_141_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln31_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal duty_cycle_1_fu_149_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_fu_167_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln36_fu_172_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln36_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln36_1_fu_182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component motor_hls_MOTOR_AXI_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        pwm_period_in_clock_cycles : OUT STD_LOGIC_VECTOR (31 downto 0);
        pwm_duty_cycle_in_clock_cycles : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    motor_hls_MOTOR_AXI_s_axi_U : component motor_hls_MOTOR_AXI_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_MOTOR_AXI_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_MOTOR_AXI_DATA_WIDTH)
    port map (
        AWVALID => s_axi_MOTOR_AXI_AWVALID,
        AWREADY => s_axi_MOTOR_AXI_AWREADY,
        AWADDR => s_axi_MOTOR_AXI_AWADDR,
        WVALID => s_axi_MOTOR_AXI_WVALID,
        WREADY => s_axi_MOTOR_AXI_WREADY,
        WDATA => s_axi_MOTOR_AXI_WDATA,
        WSTRB => s_axi_MOTOR_AXI_WSTRB,
        ARVALID => s_axi_MOTOR_AXI_ARVALID,
        ARREADY => s_axi_MOTOR_AXI_ARREADY,
        ARADDR => s_axi_MOTOR_AXI_ARADDR,
        RVALID => s_axi_MOTOR_AXI_RVALID,
        RREADY => s_axi_MOTOR_AXI_RREADY,
        RDATA => s_axi_MOTOR_AXI_RDATA,
        RRESP => s_axi_MOTOR_AXI_RRESP,
        BVALID => s_axi_MOTOR_AXI_BVALID,
        BREADY => s_axi_MOTOR_AXI_BREADY,
        BRESP => s_axi_MOTOR_AXI_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        pwm_period_in_clock_cycles => pwm_period_in_clock_cycles,
        pwm_duty_cycle_in_clock_cycles => pwm_duty_cycle_in_clock_cycles);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                counter <= select_ln36_fu_188_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                duty_cycle_reg_208 <= duty_cycle_fu_133_p3;
                select_ln26_reg_202 <= select_ln26_fu_109_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln36_1_fu_182_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(counter));
    add_ln36_fu_167_p2 <= std_logic_vector(signed(ap_const_lv31_7FFFFFFF) + signed(select_ln26_reg_202));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    direction_output_1 <= '1' when (signed(pwm_duty_cycle_in_clock_cycles) > signed(ap_const_lv32_0)) else '0';
    direction_output_2 <= pwm_duty_cycle_in_clock_cycles(31);
    duty_cycle_1_fu_149_p3 <= 
        zext_ln26_fu_141_p1 when (icmp_ln31_fu_144_p2(0) = '1') else 
        duty_cycle_reg_208;
    duty_cycle_fu_133_p3 <= 
        p_Result_1_fu_123_p4 when (p_Result_s_fu_90_p3(0) = '1') else 
        pwm_duty_cycle_in_clock_cycles;
    icmp_ln26_fu_99_p2 <= "1" when (signed(pwm_period_in_clock_cycles) < signed(ap_const_lv32_1)) else "0";
    icmp_ln31_fu_144_p2 <= "1" when (signed(duty_cycle_reg_208) > signed(zext_ln26_fu_141_p1)) else "0";
    icmp_ln36_fu_176_p2 <= "1" when (signed(counter) < signed(zext_ln36_fu_172_p1)) else "0";
    
    p_Result_1_fu_123_p4_proc : process(xs_V_1_fu_117_p2)
    begin
        p_Result_1_fu_123_p4 <= xs_V_1_fu_117_p2;
        p_Result_1_fu_123_p4(31) <= ap_const_lv1_0(0);
    end process;

    p_Result_s_fu_90_p3 <= pwm_duty_cycle_in_clock_cycles(31 downto 31);
    pwm_out <= '1' when (signed(counter) < signed(duty_cycle_1_fu_149_p3)) else '0';
    select_ln26_fu_109_p3 <= 
        ap_const_lv31_1 when (icmp_ln26_fu_99_p2(0) = '1') else 
        trunc_ln26_fu_105_p1;
    select_ln36_fu_188_p3 <= 
        add_ln36_1_fu_182_p2 when (icmp_ln36_fu_176_p2(0) = '1') else 
        ap_const_lv32_0;
    trunc_ln26_fu_105_p1 <= pwm_period_in_clock_cycles(31 - 1 downto 0);
    xs_V_1_fu_117_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(pwm_duty_cycle_in_clock_cycles));
    zext_ln26_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_reg_202),32));
    zext_ln36_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_fu_167_p2),32));
end behav;
