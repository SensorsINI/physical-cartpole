
CartPole CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031e4  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08003314  08003314  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08003314  08003314  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08003314  08003314  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003314  08003314  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003314  08003314  00013314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003318  08003318  00013318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  0800331c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  2000002c  08003348  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08003348  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003ca6  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ea3  00000000  00000000  00023cfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000328  00000000  00000000  00024ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000270  00000000  00000000  00024ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a83d  00000000  00000000  00025138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003aec  00000000  00000000  0002f975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00036bff  00000000  00000000  00033461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0006a060  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d2c  00000000  00000000  0006a0b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000002c 	.word	0x2000002c
 800014c:	00000000 	.word	0x00000000
 8000150:	080032fc 	.word	0x080032fc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000030 	.word	0x20000030
 800016c:	080032fc 	.word	0x080032fc

08000170 <__aeabi_fmul>:
 8000170:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000174:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000178:	bf1e      	ittt	ne
 800017a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800017e:	ea92 0f0c 	teqne	r2, ip
 8000182:	ea93 0f0c 	teqne	r3, ip
 8000186:	d06f      	beq.n	8000268 <__aeabi_fmul+0xf8>
 8000188:	441a      	add	r2, r3
 800018a:	ea80 0c01 	eor.w	ip, r0, r1
 800018e:	0240      	lsls	r0, r0, #9
 8000190:	bf18      	it	ne
 8000192:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000196:	d01e      	beq.n	80001d6 <__aeabi_fmul+0x66>
 8000198:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800019c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a4:	fba0 3101 	umull	r3, r1, r0, r1
 80001a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001b0:	bf3e      	ittt	cc
 80001b2:	0049      	lslcc	r1, r1, #1
 80001b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001b8:	005b      	lslcc	r3, r3, #1
 80001ba:	ea40 0001 	orr.w	r0, r0, r1
 80001be:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001c2:	2afd      	cmp	r2, #253	; 0xfd
 80001c4:	d81d      	bhi.n	8000202 <__aeabi_fmul+0x92>
 80001c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ce:	bf08      	it	eq
 80001d0:	f020 0001 	biceq.w	r0, r0, #1
 80001d4:	4770      	bx	lr
 80001d6:	f090 0f00 	teq	r0, #0
 80001da:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001de:	bf08      	it	eq
 80001e0:	0249      	lsleq	r1, r1, #9
 80001e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ea:	3a7f      	subs	r2, #127	; 0x7f
 80001ec:	bfc2      	ittt	gt
 80001ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001f6:	4770      	bxgt	lr
 80001f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001fc:	f04f 0300 	mov.w	r3, #0
 8000200:	3a01      	subs	r2, #1
 8000202:	dc5d      	bgt.n	80002c0 <__aeabi_fmul+0x150>
 8000204:	f112 0f19 	cmn.w	r2, #25
 8000208:	bfdc      	itt	le
 800020a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800020e:	4770      	bxle	lr
 8000210:	f1c2 0200 	rsb	r2, r2, #0
 8000214:	0041      	lsls	r1, r0, #1
 8000216:	fa21 f102 	lsr.w	r1, r1, r2
 800021a:	f1c2 0220 	rsb	r2, r2, #32
 800021e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000222:	ea5f 0031 	movs.w	r0, r1, rrx
 8000226:	f140 0000 	adc.w	r0, r0, #0
 800022a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800022e:	bf08      	it	eq
 8000230:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000234:	4770      	bx	lr
 8000236:	f092 0f00 	teq	r2, #0
 800023a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800023e:	bf02      	ittt	eq
 8000240:	0040      	lsleq	r0, r0, #1
 8000242:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000246:	3a01      	subeq	r2, #1
 8000248:	d0f9      	beq.n	800023e <__aeabi_fmul+0xce>
 800024a:	ea40 000c 	orr.w	r0, r0, ip
 800024e:	f093 0f00 	teq	r3, #0
 8000252:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000256:	bf02      	ittt	eq
 8000258:	0049      	lsleq	r1, r1, #1
 800025a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800025e:	3b01      	subeq	r3, #1
 8000260:	d0f9      	beq.n	8000256 <__aeabi_fmul+0xe6>
 8000262:	ea41 010c 	orr.w	r1, r1, ip
 8000266:	e78f      	b.n	8000188 <__aeabi_fmul+0x18>
 8000268:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800026c:	ea92 0f0c 	teq	r2, ip
 8000270:	bf18      	it	ne
 8000272:	ea93 0f0c 	teqne	r3, ip
 8000276:	d00a      	beq.n	800028e <__aeabi_fmul+0x11e>
 8000278:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800027c:	bf18      	it	ne
 800027e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000282:	d1d8      	bne.n	8000236 <__aeabi_fmul+0xc6>
 8000284:	ea80 0001 	eor.w	r0, r0, r1
 8000288:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f090 0f00 	teq	r0, #0
 8000292:	bf17      	itett	ne
 8000294:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000298:	4608      	moveq	r0, r1
 800029a:	f091 0f00 	teqne	r1, #0
 800029e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002a2:	d014      	beq.n	80002ce <__aeabi_fmul+0x15e>
 80002a4:	ea92 0f0c 	teq	r2, ip
 80002a8:	d101      	bne.n	80002ae <__aeabi_fmul+0x13e>
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	d10f      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002ae:	ea93 0f0c 	teq	r3, ip
 80002b2:	d103      	bne.n	80002bc <__aeabi_fmul+0x14c>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	bf18      	it	ne
 80002b8:	4608      	movne	r0, r1
 80002ba:	d108      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002bc:	ea80 0001 	eor.w	r0, r0, r1
 80002c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002cc:	4770      	bx	lr
 80002ce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002d6:	4770      	bx	lr

080002d8 <__aeabi_drsub>:
 80002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002dc:	e002      	b.n	80002e4 <__adddf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_dsub>:
 80002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e4 <__adddf3>:
 80002e4:	b530      	push	{r4, r5, lr}
 80002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ee:	ea94 0f05 	teq	r4, r5
 80002f2:	bf08      	it	eq
 80002f4:	ea90 0f02 	teqeq	r0, r2
 80002f8:	bf1f      	itttt	ne
 80002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030a:	f000 80e2 	beq.w	80004d2 <__adddf3+0x1ee>
 800030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000316:	bfb8      	it	lt
 8000318:	426d      	neglt	r5, r5
 800031a:	dd0c      	ble.n	8000336 <__adddf3+0x52>
 800031c:	442c      	add	r4, r5
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	ea82 0000 	eor.w	r0, r2, r0
 800032a:	ea83 0101 	eor.w	r1, r3, r1
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	2d36      	cmp	r5, #54	; 0x36
 8000338:	bf88      	it	hi
 800033a:	bd30      	pophi	{r4, r5, pc}
 800033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x70>
 800034e:	4240      	negs	r0, r0
 8000350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000360:	d002      	beq.n	8000368 <__adddf3+0x84>
 8000362:	4252      	negs	r2, r2
 8000364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000368:	ea94 0f05 	teq	r4, r5
 800036c:	f000 80a7 	beq.w	80004be <__adddf3+0x1da>
 8000370:	f1a4 0401 	sub.w	r4, r4, #1
 8000374:	f1d5 0e20 	rsbs	lr, r5, #32
 8000378:	db0d      	blt.n	8000396 <__adddf3+0xb2>
 800037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037e:	fa22 f205 	lsr.w	r2, r2, r5
 8000382:	1880      	adds	r0, r0, r2
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	fa03 f20e 	lsl.w	r2, r3, lr
 800038c:	1880      	adds	r0, r0, r2
 800038e:	fa43 f305 	asr.w	r3, r3, r5
 8000392:	4159      	adcs	r1, r3
 8000394:	e00e      	b.n	80003b4 <__adddf3+0xd0>
 8000396:	f1a5 0520 	sub.w	r5, r5, #32
 800039a:	f10e 0e20 	add.w	lr, lr, #32
 800039e:	2a01      	cmp	r2, #1
 80003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a4:	bf28      	it	cs
 80003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003aa:	fa43 f305 	asr.w	r3, r3, r5
 80003ae:	18c0      	adds	r0, r0, r3
 80003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b8:	d507      	bpl.n	80003ca <__adddf3+0xe6>
 80003ba:	f04f 0e00 	mov.w	lr, #0
 80003be:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ce:	d31b      	bcc.n	8000408 <__adddf3+0x124>
 80003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d4:	d30c      	bcc.n	80003f0 <__adddf3+0x10c>
 80003d6:	0849      	lsrs	r1, r1, #1
 80003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e0:	f104 0401 	add.w	r4, r4, #1
 80003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003ec:	f080 809a 	bcs.w	8000524 <__adddf3+0x240>
 80003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f4:	bf08      	it	eq
 80003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fa:	f150 0000 	adcs.w	r0, r0, #0
 80003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000402:	ea41 0105 	orr.w	r1, r1, r5
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800040c:	4140      	adcs	r0, r0
 800040e:	eb41 0101 	adc.w	r1, r1, r1
 8000412:	3c01      	subs	r4, #1
 8000414:	bf28      	it	cs
 8000416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800041a:	d2e9      	bcs.n	80003f0 <__adddf3+0x10c>
 800041c:	f091 0f00 	teq	r1, #0
 8000420:	bf04      	itt	eq
 8000422:	4601      	moveq	r1, r0
 8000424:	2000      	moveq	r0, #0
 8000426:	fab1 f381 	clz	r3, r1
 800042a:	bf08      	it	eq
 800042c:	3320      	addeq	r3, #32
 800042e:	f1a3 030b 	sub.w	r3, r3, #11
 8000432:	f1b3 0220 	subs.w	r2, r3, #32
 8000436:	da0c      	bge.n	8000452 <__adddf3+0x16e>
 8000438:	320c      	adds	r2, #12
 800043a:	dd08      	ble.n	800044e <__adddf3+0x16a>
 800043c:	f102 0c14 	add.w	ip, r2, #20
 8000440:	f1c2 020c 	rsb	r2, r2, #12
 8000444:	fa01 f00c 	lsl.w	r0, r1, ip
 8000448:	fa21 f102 	lsr.w	r1, r1, r2
 800044c:	e00c      	b.n	8000468 <__adddf3+0x184>
 800044e:	f102 0214 	add.w	r2, r2, #20
 8000452:	bfd8      	it	le
 8000454:	f1c2 0c20 	rsble	ip, r2, #32
 8000458:	fa01 f102 	lsl.w	r1, r1, r2
 800045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000460:	bfdc      	itt	le
 8000462:	ea41 010c 	orrle.w	r1, r1, ip
 8000466:	4090      	lslle	r0, r2
 8000468:	1ae4      	subs	r4, r4, r3
 800046a:	bfa2      	ittt	ge
 800046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000470:	4329      	orrge	r1, r5
 8000472:	bd30      	popge	{r4, r5, pc}
 8000474:	ea6f 0404 	mvn.w	r4, r4
 8000478:	3c1f      	subs	r4, #31
 800047a:	da1c      	bge.n	80004b6 <__adddf3+0x1d2>
 800047c:	340c      	adds	r4, #12
 800047e:	dc0e      	bgt.n	800049e <__adddf3+0x1ba>
 8000480:	f104 0414 	add.w	r4, r4, #20
 8000484:	f1c4 0220 	rsb	r2, r4, #32
 8000488:	fa20 f004 	lsr.w	r0, r0, r4
 800048c:	fa01 f302 	lsl.w	r3, r1, r2
 8000490:	ea40 0003 	orr.w	r0, r0, r3
 8000494:	fa21 f304 	lsr.w	r3, r1, r4
 8000498:	ea45 0103 	orr.w	r1, r5, r3
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f1c4 040c 	rsb	r4, r4, #12
 80004a2:	f1c4 0220 	rsb	r2, r4, #32
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 f304 	lsl.w	r3, r1, r4
 80004ae:	ea40 0003 	orr.w	r0, r0, r3
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	f094 0f00 	teq	r4, #0
 80004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c6:	bf06      	itte	eq
 80004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004cc:	3401      	addeq	r4, #1
 80004ce:	3d01      	subne	r5, #1
 80004d0:	e74e      	b.n	8000370 <__adddf3+0x8c>
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf18      	it	ne
 80004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004dc:	d029      	beq.n	8000532 <__adddf3+0x24e>
 80004de:	ea94 0f05 	teq	r4, r5
 80004e2:	bf08      	it	eq
 80004e4:	ea90 0f02 	teqeq	r0, r2
 80004e8:	d005      	beq.n	80004f6 <__adddf3+0x212>
 80004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ee:	bf04      	itt	eq
 80004f0:	4619      	moveq	r1, r3
 80004f2:	4610      	moveq	r0, r2
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea91 0f03 	teq	r1, r3
 80004fa:	bf1e      	ittt	ne
 80004fc:	2100      	movne	r1, #0
 80004fe:	2000      	movne	r0, #0
 8000500:	bd30      	popne	{r4, r5, pc}
 8000502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000506:	d105      	bne.n	8000514 <__adddf3+0x230>
 8000508:	0040      	lsls	r0, r0, #1
 800050a:	4149      	adcs	r1, r1
 800050c:	bf28      	it	cs
 800050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000512:	bd30      	pop	{r4, r5, pc}
 8000514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000518:	bf3c      	itt	cc
 800051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051e:	bd30      	popcc	{r4, r5, pc}
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800052c:	f04f 0000 	mov.w	r0, #0
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000536:	bf1a      	itte	ne
 8000538:	4619      	movne	r1, r3
 800053a:	4610      	movne	r0, r2
 800053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000540:	bf1c      	itt	ne
 8000542:	460b      	movne	r3, r1
 8000544:	4602      	movne	r2, r0
 8000546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054a:	bf06      	itte	eq
 800054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000550:	ea91 0f03 	teqeq	r1, r3
 8000554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	bf00      	nop

0800055c <__aeabi_ui2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f04f 0500 	mov.w	r5, #0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e750      	b.n	800041c <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_i2d>:
 800057c:	f090 0f00 	teq	r0, #0
 8000580:	bf04      	itt	eq
 8000582:	2100      	moveq	r1, #0
 8000584:	4770      	bxeq	lr
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000594:	bf48      	it	mi
 8000596:	4240      	negmi	r0, r0
 8000598:	f04f 0100 	mov.w	r1, #0
 800059c:	e73e      	b.n	800041c <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_f2d>:
 80005a0:	0042      	lsls	r2, r0, #1
 80005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ae:	bf1f      	itttt	ne
 80005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005bc:	4770      	bxne	lr
 80005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005c2:	bf08      	it	eq
 80005c4:	4770      	bxeq	lr
 80005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ca:	bf04      	itt	eq
 80005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e71c      	b.n	800041c <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aed8 	beq.w	80003ca <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6bd      	b.n	80003ca <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__aeabi_dmul>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065e:	bf1d      	ittte	ne
 8000660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000664:	ea94 0f0c 	teqne	r4, ip
 8000668:	ea95 0f0c 	teqne	r5, ip
 800066c:	f000 f8de 	bleq	800082c <__aeabi_dmul+0x1dc>
 8000670:	442c      	add	r4, r5
 8000672:	ea81 0603 	eor.w	r6, r1, r3
 8000676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000682:	bf18      	it	ne
 8000684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000690:	d038      	beq.n	8000704 <__aeabi_dmul+0xb4>
 8000692:	fba0 ce02 	umull	ip, lr, r0, r2
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a6:	f04f 0600 	mov.w	r6, #0
 80006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ae:	f09c 0f00 	teq	ip, #0
 80006b2:	bf18      	it	ne
 80006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c4:	d204      	bcs.n	80006d0 <__aeabi_dmul+0x80>
 80006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ca:	416d      	adcs	r5, r5
 80006cc:	eb46 0606 	adc.w	r6, r6, r6
 80006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e8:	bf88      	it	hi
 80006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ee:	d81e      	bhi.n	800072e <__aeabi_dmul+0xde>
 80006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f4:	bf08      	it	eq
 80006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fa:	f150 0000 	adcs.w	r0, r0, #0
 80006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000708:	ea46 0101 	orr.w	r1, r6, r1
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000718:	bfc2      	ittt	gt
 800071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000722:	bd70      	popgt	{r4, r5, r6, pc}
 8000724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000728:	f04f 0e00 	mov.w	lr, #0
 800072c:	3c01      	subs	r4, #1
 800072e:	f300 80ab 	bgt.w	8000888 <__aeabi_dmul+0x238>
 8000732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000736:	bfde      	ittt	le
 8000738:	2000      	movle	r0, #0
 800073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd70      	pople	{r4, r5, r6, pc}
 8000740:	f1c4 0400 	rsb	r4, r4, #0
 8000744:	3c20      	subs	r4, #32
 8000746:	da35      	bge.n	80007b4 <__aeabi_dmul+0x164>
 8000748:	340c      	adds	r4, #12
 800074a:	dc1b      	bgt.n	8000784 <__aeabi_dmul+0x134>
 800074c:	f104 0414 	add.w	r4, r4, #20
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f305 	lsl.w	r3, r0, r5
 8000758:	fa20 f004 	lsr.w	r0, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	fa21 f604 	lsr.w	r6, r1, r4
 8000774:	eb42 0106 	adc.w	r1, r2, r6
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 040c 	rsb	r4, r4, #12
 8000788:	f1c4 0520 	rsb	r5, r4, #32
 800078c:	fa00 f304 	lsl.w	r3, r0, r4
 8000790:	fa20 f005 	lsr.w	r0, r0, r5
 8000794:	fa01 f204 	lsl.w	r2, r1, r4
 8000798:	ea40 0002 	orr.w	r0, r0, r2
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a4:	f141 0100 	adc.w	r1, r1, #0
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f1c4 0520 	rsb	r5, r4, #32
 80007b8:	fa00 f205 	lsl.w	r2, r0, r5
 80007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c0:	fa20 f304 	lsr.w	r3, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea43 0302 	orr.w	r3, r3, r2
 80007cc:	fa21 f004 	lsr.w	r0, r1, r4
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	fa21 f204 	lsr.w	r2, r1, r4
 80007d8:	ea20 0002 	bic.w	r0, r0, r2
 80007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f094 0f00 	teq	r4, #0
 80007f0:	d10f      	bne.n	8000812 <__aeabi_dmul+0x1c2>
 80007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f6:	0040      	lsls	r0, r0, #1
 80007f8:	eb41 0101 	adc.w	r1, r1, r1
 80007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3c01      	subeq	r4, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1a6>
 8000806:	ea41 0106 	orr.w	r1, r1, r6
 800080a:	f095 0f00 	teq	r5, #0
 800080e:	bf18      	it	ne
 8000810:	4770      	bxne	lr
 8000812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	eb43 0303 	adc.w	r3, r3, r3
 800081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000820:	bf08      	it	eq
 8000822:	3d01      	subeq	r5, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1c6>
 8000826:	ea43 0306 	orr.w	r3, r3, r6
 800082a:	4770      	bx	lr
 800082c:	ea94 0f0c 	teq	r4, ip
 8000830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000834:	bf18      	it	ne
 8000836:	ea95 0f0c 	teqne	r5, ip
 800083a:	d00c      	beq.n	8000856 <__aeabi_dmul+0x206>
 800083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000840:	bf18      	it	ne
 8000842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000846:	d1d1      	bne.n	80007ec <__aeabi_dmul+0x19c>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085a:	bf06      	itte	eq
 800085c:	4610      	moveq	r0, r2
 800085e:	4619      	moveq	r1, r3
 8000860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000864:	d019      	beq.n	800089a <__aeabi_dmul+0x24a>
 8000866:	ea94 0f0c 	teq	r4, ip
 800086a:	d102      	bne.n	8000872 <__aeabi_dmul+0x222>
 800086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000870:	d113      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000872:	ea95 0f0c 	teq	r5, ip
 8000876:	d105      	bne.n	8000884 <__aeabi_dmul+0x234>
 8000878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800087c:	bf1c      	itt	ne
 800087e:	4610      	movne	r0, r2
 8000880:	4619      	movne	r1, r3
 8000882:	d10a      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000884:	ea81 0103 	eor.w	r1, r1, r3
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008a2:	bd70      	pop	{r4, r5, r6, pc}

080008a4 <__aeabi_ddiv>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b2:	bf1d      	ittte	ne
 80008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b8:	ea94 0f0c 	teqne	r4, ip
 80008bc:	ea95 0f0c 	teqne	r5, ip
 80008c0:	f000 f8a7 	bleq	8000a12 <__aeabi_ddiv+0x16e>
 80008c4:	eba4 0405 	sub.w	r4, r4, r5
 80008c8:	ea81 0e03 	eor.w	lr, r1, r3
 80008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d4:	f000 8088 	beq.w	80009e8 <__aeabi_ddiv+0x144>
 80008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008fc:	429d      	cmp	r5, r3
 80008fe:	bf08      	it	eq
 8000900:	4296      	cmpeq	r6, r2
 8000902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800090a:	d202      	bcs.n	8000912 <__aeabi_ddiv+0x6e>
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	1ab6      	subs	r6, r6, r2
 8000914:	eb65 0503 	sbc.w	r5, r5, r3
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 000c 	orrcs.w	r0, r0, ip
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000980:	ea55 0e06 	orrs.w	lr, r5, r6
 8000984:	d018      	beq.n	80009b8 <__aeabi_ddiv+0x114>
 8000986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a2:	d1c0      	bne.n	8000926 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a8:	d10b      	bne.n	80009c2 <__aeabi_ddiv+0x11e>
 80009aa:	ea41 0100 	orr.w	r1, r1, r0
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b6:	e7b6      	b.n	8000926 <__aeabi_ddiv+0x82>
 80009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009bc:	bf04      	itt	eq
 80009be:	4301      	orreq	r1, r0
 80009c0:	2000      	moveq	r0, #0
 80009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c6:	bf88      	it	hi
 80009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009cc:	f63f aeaf 	bhi.w	800072e <__aeabi_dmul+0xde>
 80009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d4:	bf04      	itt	eq
 80009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009de:	f150 0000 	adcs.w	r0, r0, #0
 80009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f4:	bfc2      	ittt	gt
 80009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a04:	f04f 0e00 	mov.w	lr, #0
 8000a08:	3c01      	subs	r4, #1
 8000a0a:	e690      	b.n	800072e <__aeabi_dmul+0xde>
 8000a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a10:	e68d      	b.n	800072e <__aeabi_dmul+0xde>
 8000a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a16:	ea94 0f0c 	teq	r4, ip
 8000a1a:	bf08      	it	eq
 8000a1c:	ea95 0f0c 	teqeq	r5, ip
 8000a20:	f43f af3b 	beq.w	800089a <__aeabi_dmul+0x24a>
 8000a24:	ea94 0f0c 	teq	r4, ip
 8000a28:	d10a      	bne.n	8000a40 <__aeabi_ddiv+0x19c>
 8000a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2e:	f47f af34 	bne.w	800089a <__aeabi_dmul+0x24a>
 8000a32:	ea95 0f0c 	teq	r5, ip
 8000a36:	f47f af25 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e72c      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a40:	ea95 0f0c 	teq	r5, ip
 8000a44:	d106      	bne.n	8000a54 <__aeabi_ddiv+0x1b0>
 8000a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4a:	f43f aefd 	beq.w	8000848 <__aeabi_dmul+0x1f8>
 8000a4e:	4610      	mov	r0, r2
 8000a50:	4619      	mov	r1, r3
 8000a52:	e722      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5e:	f47f aec5 	bne.w	80007ec <__aeabi_dmul+0x19c>
 8000a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a66:	f47f af0d 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6e:	f47f aeeb 	bne.w	8000848 <__aeabi_dmul+0x1f8>
 8000a72:	e712      	b.n	800089a <__aeabi_dmul+0x24a>

08000a74 <__gedf2>:
 8000a74:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a78:	e006      	b.n	8000a88 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__ledf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	e002      	b.n	8000a88 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__cmpdf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	bf18      	it	ne
 8000a9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a9e:	d01b      	beq.n	8000ad8 <__cmpdf2+0x54>
 8000aa0:	b001      	add	sp, #4
 8000aa2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aa6:	bf0c      	ite	eq
 8000aa8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aac:	ea91 0f03 	teqne	r1, r3
 8000ab0:	bf02      	ittt	eq
 8000ab2:	ea90 0f02 	teqeq	r0, r2
 8000ab6:	2000      	moveq	r0, #0
 8000ab8:	4770      	bxeq	lr
 8000aba:	f110 0f00 	cmn.w	r0, #0
 8000abe:	ea91 0f03 	teq	r1, r3
 8000ac2:	bf58      	it	pl
 8000ac4:	4299      	cmppl	r1, r3
 8000ac6:	bf08      	it	eq
 8000ac8:	4290      	cmpeq	r0, r2
 8000aca:	bf2c      	ite	cs
 8000acc:	17d8      	asrcs	r0, r3, #31
 8000ace:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ad2:	f040 0001 	orr.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d102      	bne.n	8000ae8 <__cmpdf2+0x64>
 8000ae2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae6:	d107      	bne.n	8000af8 <__cmpdf2+0x74>
 8000ae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af0:	d1d6      	bne.n	8000aa0 <__cmpdf2+0x1c>
 8000af2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af6:	d0d3      	beq.n	8000aa0 <__cmpdf2+0x1c>
 8000af8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdrcmple>:
 8000b00:	4684      	mov	ip, r0
 8000b02:	4610      	mov	r0, r2
 8000b04:	4662      	mov	r2, ip
 8000b06:	468c      	mov	ip, r1
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4663      	mov	r3, ip
 8000b0c:	e000      	b.n	8000b10 <__aeabi_cdcmpeq>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_cdcmpeq>:
 8000b10:	b501      	push	{r0, lr}
 8000b12:	f7ff ffb7 	bl	8000a84 <__cmpdf2>
 8000b16:	2800      	cmp	r0, #0
 8000b18:	bf48      	it	mi
 8000b1a:	f110 0f00 	cmnmi.w	r0, #0
 8000b1e:	bd01      	pop	{r0, pc}

08000b20 <__aeabi_dcmpeq>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff fff4 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b28:	bf0c      	ite	eq
 8000b2a:	2001      	moveq	r0, #1
 8000b2c:	2000      	movne	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmplt>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffea 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b3c:	bf34      	ite	cc
 8000b3e:	2001      	movcc	r0, #1
 8000b40:	2000      	movcs	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmple>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffe0 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b50:	bf94      	ite	ls
 8000b52:	2001      	movls	r0, #1
 8000b54:	2000      	movhi	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpge>:
 8000b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b60:	f7ff ffce 	bl	8000b00 <__aeabi_cdrcmple>
 8000b64:	bf94      	ite	ls
 8000b66:	2001      	movls	r0, #1
 8000b68:	2000      	movhi	r0, #0
 8000b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6e:	bf00      	nop

08000b70 <__aeabi_dcmpgt>:
 8000b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b74:	f7ff ffc4 	bl	8000b00 <__aeabi_cdrcmple>
 8000b78:	bf34      	ite	cc
 8000b7a:	2001      	movcc	r0, #1
 8000b7c:	2000      	movcs	r0, #0
 8000b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b82:	bf00      	nop

08000b84 <__aeabi_d2iz>:
 8000b84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b8c:	d215      	bcs.n	8000bba <__aeabi_d2iz+0x36>
 8000b8e:	d511      	bpl.n	8000bb4 <__aeabi_d2iz+0x30>
 8000b90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b98:	d912      	bls.n	8000bc0 <__aeabi_d2iz+0x3c>
 8000b9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	bf18      	it	ne
 8000bb0:	4240      	negne	r0, r0
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d105      	bne.n	8000bcc <__aeabi_d2iz+0x48>
 8000bc0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	bf08      	it	eq
 8000bc6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bca:	4770      	bx	lr
 8000bcc:	f04f 0000 	mov.w	r0, #0
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_d2f>:
 8000bd4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bdc:	bf24      	itt	cs
 8000bde:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000be6:	d90d      	bls.n	8000c04 <__aeabi_d2f+0x30>
 8000be8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bfc:	bf08      	it	eq
 8000bfe:	f020 0001 	biceq.w	r0, r0, #1
 8000c02:	4770      	bx	lr
 8000c04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c08:	d121      	bne.n	8000c4e <__aeabi_d2f+0x7a>
 8000c0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c0e:	bfbc      	itt	lt
 8000c10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c14:	4770      	bxlt	lr
 8000c16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c1e:	f1c2 0218 	rsb	r2, r2, #24
 8000c22:	f1c2 0c20 	rsb	ip, r2, #32
 8000c26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c2e:	bf18      	it	ne
 8000c30:	f040 0001 	orrne.w	r0, r0, #1
 8000c34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c40:	ea40 000c 	orr.w	r0, r0, ip
 8000c44:	fa23 f302 	lsr.w	r3, r3, r2
 8000c48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c4c:	e7cc      	b.n	8000be8 <__aeabi_d2f+0x14>
 8000c4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c52:	d107      	bne.n	8000c64 <__aeabi_d2f+0x90>
 8000c54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c58:	bf1e      	ittt	ne
 8000c5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c62:	4770      	bxne	lr
 8000c64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop

08000c74 <__aeabi_frsub>:
 8000c74:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c78:	e002      	b.n	8000c80 <__addsf3>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_fsub>:
 8000c7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c80 <__addsf3>:
 8000c80:	0042      	lsls	r2, r0, #1
 8000c82:	bf1f      	itttt	ne
 8000c84:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c88:	ea92 0f03 	teqne	r2, r3
 8000c8c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c90:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c94:	d06a      	beq.n	8000d6c <__addsf3+0xec>
 8000c96:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c9a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c9e:	bfc1      	itttt	gt
 8000ca0:	18d2      	addgt	r2, r2, r3
 8000ca2:	4041      	eorgt	r1, r0
 8000ca4:	4048      	eorgt	r0, r1
 8000ca6:	4041      	eorgt	r1, r0
 8000ca8:	bfb8      	it	lt
 8000caa:	425b      	neglt	r3, r3
 8000cac:	2b19      	cmp	r3, #25
 8000cae:	bf88      	it	hi
 8000cb0:	4770      	bxhi	lr
 8000cb2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cb6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cbe:	bf18      	it	ne
 8000cc0:	4240      	negne	r0, r0
 8000cc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cc6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cce:	bf18      	it	ne
 8000cd0:	4249      	negne	r1, r1
 8000cd2:	ea92 0f03 	teq	r2, r3
 8000cd6:	d03f      	beq.n	8000d58 <__addsf3+0xd8>
 8000cd8:	f1a2 0201 	sub.w	r2, r2, #1
 8000cdc:	fa41 fc03 	asr.w	ip, r1, r3
 8000ce0:	eb10 000c 	adds.w	r0, r0, ip
 8000ce4:	f1c3 0320 	rsb	r3, r3, #32
 8000ce8:	fa01 f103 	lsl.w	r1, r1, r3
 8000cec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cf0:	d502      	bpl.n	8000cf8 <__addsf3+0x78>
 8000cf2:	4249      	negs	r1, r1
 8000cf4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cf8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cfc:	d313      	bcc.n	8000d26 <__addsf3+0xa6>
 8000cfe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d02:	d306      	bcc.n	8000d12 <__addsf3+0x92>
 8000d04:	0840      	lsrs	r0, r0, #1
 8000d06:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d0a:	f102 0201 	add.w	r2, r2, #1
 8000d0e:	2afe      	cmp	r2, #254	; 0xfe
 8000d10:	d251      	bcs.n	8000db6 <__addsf3+0x136>
 8000d12:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d1a:	bf08      	it	eq
 8000d1c:	f020 0001 	biceq.w	r0, r0, #1
 8000d20:	ea40 0003 	orr.w	r0, r0, r3
 8000d24:	4770      	bx	lr
 8000d26:	0049      	lsls	r1, r1, #1
 8000d28:	eb40 0000 	adc.w	r0, r0, r0
 8000d2c:	3a01      	subs	r2, #1
 8000d2e:	bf28      	it	cs
 8000d30:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d34:	d2ed      	bcs.n	8000d12 <__addsf3+0x92>
 8000d36:	fab0 fc80 	clz	ip, r0
 8000d3a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d3e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d42:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d46:	bfaa      	itet	ge
 8000d48:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d4c:	4252      	neglt	r2, r2
 8000d4e:	4318      	orrge	r0, r3
 8000d50:	bfbc      	itt	lt
 8000d52:	40d0      	lsrlt	r0, r2
 8000d54:	4318      	orrlt	r0, r3
 8000d56:	4770      	bx	lr
 8000d58:	f092 0f00 	teq	r2, #0
 8000d5c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d60:	bf06      	itte	eq
 8000d62:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d66:	3201      	addeq	r2, #1
 8000d68:	3b01      	subne	r3, #1
 8000d6a:	e7b5      	b.n	8000cd8 <__addsf3+0x58>
 8000d6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d74:	bf18      	it	ne
 8000d76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d7a:	d021      	beq.n	8000dc0 <__addsf3+0x140>
 8000d7c:	ea92 0f03 	teq	r2, r3
 8000d80:	d004      	beq.n	8000d8c <__addsf3+0x10c>
 8000d82:	f092 0f00 	teq	r2, #0
 8000d86:	bf08      	it	eq
 8000d88:	4608      	moveq	r0, r1
 8000d8a:	4770      	bx	lr
 8000d8c:	ea90 0f01 	teq	r0, r1
 8000d90:	bf1c      	itt	ne
 8000d92:	2000      	movne	r0, #0
 8000d94:	4770      	bxne	lr
 8000d96:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d9a:	d104      	bne.n	8000da6 <__addsf3+0x126>
 8000d9c:	0040      	lsls	r0, r0, #1
 8000d9e:	bf28      	it	cs
 8000da0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000da4:	4770      	bx	lr
 8000da6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000daa:	bf3c      	itt	cc
 8000dac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000db0:	4770      	bxcc	lr
 8000db2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000db6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbe:	4770      	bx	lr
 8000dc0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dc4:	bf16      	itet	ne
 8000dc6:	4608      	movne	r0, r1
 8000dc8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dcc:	4601      	movne	r1, r0
 8000dce:	0242      	lsls	r2, r0, #9
 8000dd0:	bf06      	itte	eq
 8000dd2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dd6:	ea90 0f01 	teqeq	r0, r1
 8000dda:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dde:	4770      	bx	lr

08000de0 <__aeabi_ui2f>:
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e004      	b.n	8000df0 <__aeabi_i2f+0x8>
 8000de6:	bf00      	nop

08000de8 <__aeabi_i2f>:
 8000de8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dec:	bf48      	it	mi
 8000dee:	4240      	negmi	r0, r0
 8000df0:	ea5f 0c00 	movs.w	ip, r0
 8000df4:	bf08      	it	eq
 8000df6:	4770      	bxeq	lr
 8000df8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dfc:	4601      	mov	r1, r0
 8000dfe:	f04f 0000 	mov.w	r0, #0
 8000e02:	e01c      	b.n	8000e3e <__aeabi_l2f+0x2a>

08000e04 <__aeabi_ul2f>:
 8000e04:	ea50 0201 	orrs.w	r2, r0, r1
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	e00a      	b.n	8000e28 <__aeabi_l2f+0x14>
 8000e12:	bf00      	nop

08000e14 <__aeabi_l2f>:
 8000e14:	ea50 0201 	orrs.w	r2, r0, r1
 8000e18:	bf08      	it	eq
 8000e1a:	4770      	bxeq	lr
 8000e1c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e20:	d502      	bpl.n	8000e28 <__aeabi_l2f+0x14>
 8000e22:	4240      	negs	r0, r0
 8000e24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e28:	ea5f 0c01 	movs.w	ip, r1
 8000e2c:	bf02      	ittt	eq
 8000e2e:	4684      	moveq	ip, r0
 8000e30:	4601      	moveq	r1, r0
 8000e32:	2000      	moveq	r0, #0
 8000e34:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e38:	bf08      	it	eq
 8000e3a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e3e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e42:	fabc f28c 	clz	r2, ip
 8000e46:	3a08      	subs	r2, #8
 8000e48:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e4c:	db10      	blt.n	8000e70 <__aeabi_l2f+0x5c>
 8000e4e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e52:	4463      	add	r3, ip
 8000e54:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e58:	f1c2 0220 	rsb	r2, r2, #32
 8000e5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e60:	fa20 f202 	lsr.w	r2, r0, r2
 8000e64:	eb43 0002 	adc.w	r0, r3, r2
 8000e68:	bf08      	it	eq
 8000e6a:	f020 0001 	biceq.w	r0, r0, #1
 8000e6e:	4770      	bx	lr
 8000e70:	f102 0220 	add.w	r2, r2, #32
 8000e74:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e78:	f1c2 0220 	rsb	r2, r2, #32
 8000e7c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e80:	fa21 f202 	lsr.w	r2, r1, r2
 8000e84:	eb43 0002 	adc.w	r0, r3, r2
 8000e88:	bf08      	it	eq
 8000e8a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e8e:	4770      	bx	lr

08000e90 <__gesf2>:
 8000e90:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000e94:	e006      	b.n	8000ea4 <__cmpsf2+0x4>
 8000e96:	bf00      	nop

08000e98 <__lesf2>:
 8000e98:	f04f 0c01 	mov.w	ip, #1
 8000e9c:	e002      	b.n	8000ea4 <__cmpsf2+0x4>
 8000e9e:	bf00      	nop

08000ea0 <__cmpsf2>:
 8000ea0:	f04f 0c01 	mov.w	ip, #1
 8000ea4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ea8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eb4:	bf18      	it	ne
 8000eb6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eba:	d011      	beq.n	8000ee0 <__cmpsf2+0x40>
 8000ebc:	b001      	add	sp, #4
 8000ebe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ec2:	bf18      	it	ne
 8000ec4:	ea90 0f01 	teqne	r0, r1
 8000ec8:	bf58      	it	pl
 8000eca:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ece:	bf88      	it	hi
 8000ed0:	17c8      	asrhi	r0, r1, #31
 8000ed2:	bf38      	it	cc
 8000ed4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ed8:	bf18      	it	ne
 8000eda:	f040 0001 	orrne.w	r0, r0, #1
 8000ede:	4770      	bx	lr
 8000ee0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ee4:	d102      	bne.n	8000eec <__cmpsf2+0x4c>
 8000ee6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eea:	d105      	bne.n	8000ef8 <__cmpsf2+0x58>
 8000eec:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef0:	d1e4      	bne.n	8000ebc <__cmpsf2+0x1c>
 8000ef2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ef6:	d0e1      	beq.n	8000ebc <__cmpsf2+0x1c>
 8000ef8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <__aeabi_cfrcmple>:
 8000f00:	4684      	mov	ip, r0
 8000f02:	4608      	mov	r0, r1
 8000f04:	4661      	mov	r1, ip
 8000f06:	e7ff      	b.n	8000f08 <__aeabi_cfcmpeq>

08000f08 <__aeabi_cfcmpeq>:
 8000f08:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f0a:	f7ff ffc9 	bl	8000ea0 <__cmpsf2>
 8000f0e:	2800      	cmp	r0, #0
 8000f10:	bf48      	it	mi
 8000f12:	f110 0f00 	cmnmi.w	r0, #0
 8000f16:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f18 <__aeabi_fcmpeq>:
 8000f18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f1c:	f7ff fff4 	bl	8000f08 <__aeabi_cfcmpeq>
 8000f20:	bf0c      	ite	eq
 8000f22:	2001      	moveq	r0, #1
 8000f24:	2000      	movne	r0, #0
 8000f26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2a:	bf00      	nop

08000f2c <__aeabi_fcmplt>:
 8000f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f30:	f7ff ffea 	bl	8000f08 <__aeabi_cfcmpeq>
 8000f34:	bf34      	ite	cc
 8000f36:	2001      	movcc	r0, #1
 8000f38:	2000      	movcs	r0, #0
 8000f3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f3e:	bf00      	nop

08000f40 <__aeabi_fcmple>:
 8000f40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f44:	f7ff ffe0 	bl	8000f08 <__aeabi_cfcmpeq>
 8000f48:	bf94      	ite	ls
 8000f4a:	2001      	movls	r0, #1
 8000f4c:	2000      	movhi	r0, #0
 8000f4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f52:	bf00      	nop

08000f54 <__aeabi_fcmpge>:
 8000f54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f58:	f7ff ffd2 	bl	8000f00 <__aeabi_cfrcmple>
 8000f5c:	bf94      	ite	ls
 8000f5e:	2001      	movls	r0, #1
 8000f60:	2000      	movhi	r0, #0
 8000f62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f66:	bf00      	nop

08000f68 <__aeabi_fcmpgt>:
 8000f68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f6c:	f7ff ffc8 	bl	8000f00 <__aeabi_cfrcmple>
 8000f70:	bf34      	ite	cc
 8000f72:	2001      	movcc	r0, #1
 8000f74:	2000      	movcs	r0, #0
 8000f76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7a:	bf00      	nop

08000f7c <__aeabi_f2iz>:
 8000f7c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f80:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f84:	d30f      	bcc.n	8000fa6 <__aeabi_f2iz+0x2a>
 8000f86:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f8a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f8e:	d90d      	bls.n	8000fac <__aeabi_f2iz+0x30>
 8000f90:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f98:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f9c:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa0:	bf18      	it	ne
 8000fa2:	4240      	negne	r0, r0
 8000fa4:	4770      	bx	lr
 8000fa6:	f04f 0000 	mov.w	r0, #0
 8000faa:	4770      	bx	lr
 8000fac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_f2iz+0x3a>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d105      	bne.n	8000fc2 <__aeabi_f2iz+0x46>
 8000fb6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fba:	bf08      	it	eq
 8000fbc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fc0:	4770      	bx	lr
 8000fc2:	f04f 0000 	mov.w	r0, #0
 8000fc6:	4770      	bx	lr

08000fc8 <__aeabi_f2uiz>:
 8000fc8:	0042      	lsls	r2, r0, #1
 8000fca:	d20e      	bcs.n	8000fea <__aeabi_f2uiz+0x22>
 8000fcc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fd0:	d30b      	bcc.n	8000fea <__aeabi_f2uiz+0x22>
 8000fd2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fd6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fda:	d409      	bmi.n	8000ff0 <__aeabi_f2uiz+0x28>
 8000fdc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fe0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fe4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fe8:	4770      	bx	lr
 8000fea:	f04f 0000 	mov.w	r0, #0
 8000fee:	4770      	bx	lr
 8000ff0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ff4:	d101      	bne.n	8000ffa <__aeabi_f2uiz+0x32>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	d102      	bne.n	8001000 <__aeabi_f2uiz+0x38>
 8000ffa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ffe:	4770      	bx	lr
 8001000:	f04f 0000 	mov.w	r0, #0
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <ANGLE_Init>:
#include "angle.h"

void ANGLE_Init(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
	// Initialise IO port.
 	RCC->APB2ENR	|= 1<<2;			// Enable PORTA clock 
 800100c:	4b4a      	ldr	r3, [pc, #296]	; (8001138 <ANGLE_Init+0x130>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	4a49      	ldr	r2, [pc, #292]	; (8001138 <ANGLE_Init+0x130>)
 8001012:	f043 0304 	orr.w	r3, r3, #4
 8001016:	6193      	str	r3, [r2, #24]
	GPIOA->CRL		&= 0xFFFF0FFF;		// PA3 anolog input 	 		 
 8001018:	4b48      	ldr	r3, [pc, #288]	; (800113c <ANGLE_Init+0x134>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a47      	ldr	r2, [pc, #284]	; (800113c <ANGLE_Init+0x134>)
 800101e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001022:	6013      	str	r3, [r2, #0]
	RCC->APB2ENR	|= 1<<9;			// ADC1 Clock enable	  
 8001024:	4b44      	ldr	r3, [pc, #272]	; (8001138 <ANGLE_Init+0x130>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	4a43      	ldr	r2, [pc, #268]	; (8001138 <ANGLE_Init+0x130>)
 800102a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800102e:	6193      	str	r3, [r2, #24]
	RCC->APB2RSTR	|= 1<<9;			// ADC1 reset
 8001030:	4b41      	ldr	r3, [pc, #260]	; (8001138 <ANGLE_Init+0x130>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	4a40      	ldr	r2, [pc, #256]	; (8001138 <ANGLE_Init+0x130>)
 8001036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800103a:	60d3      	str	r3, [r2, #12]
	RCC->APB2RSTR	&= ~(1<<9);			// Resetting end	    
 800103c:	4b3e      	ldr	r3, [pc, #248]	; (8001138 <ANGLE_Init+0x130>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	4a3d      	ldr	r2, [pc, #244]	; (8001138 <ANGLE_Init+0x130>)
 8001042:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001046:	60d3      	str	r3, [r2, #12]
	RCC->CFGR		&= ~(3<<14);		// Zero frequency factor clearing
 8001048:	4b3b      	ldr	r3, [pc, #236]	; (8001138 <ANGLE_Init+0x130>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	4a3a      	ldr	r2, [pc, #232]	; (8001138 <ANGLE_Init+0x130>)
 800104e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001052:	6053      	str	r3, [r2, #4]
	
	// SYSCLK/DIV2 = 12 MHz ADC clock set to 12 MHz, ADC maximum clock can not exceed 14M!
	// otherwise, the accuracy of ADC will be reduced.
	RCC->CFGR		|= 2<<14; 
 8001054:	4b38      	ldr	r3, [pc, #224]	; (8001138 <ANGLE_Init+0x130>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	4a37      	ldr	r2, [pc, #220]	; (8001138 <ANGLE_Init+0x130>)
 800105a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800105e:	6053      	str	r3, [r2, #4]

	ADC1->CR1		&=  0xF0FFFF;		// Zero working mode
 8001060:	4b37      	ldr	r3, [pc, #220]	; (8001140 <ANGLE_Init+0x138>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	4a36      	ldr	r2, [pc, #216]	; (8001140 <ANGLE_Init+0x138>)
 8001066:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800106a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800106e:	6053      	str	r3, [r2, #4]
	ADC1->CR1		|=  0<<16;			// Independent working mode
 8001070:	4b33      	ldr	r3, [pc, #204]	; (8001140 <ANGLE_Init+0x138>)
 8001072:	4a33      	ldr	r2, [pc, #204]	; (8001140 <ANGLE_Init+0x138>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	6053      	str	r3, [r2, #4]
	ADC1->CR1		&=~ (1<<8);			// Non scanning mode 
 8001078:	4b31      	ldr	r3, [pc, #196]	; (8001140 <ANGLE_Init+0x138>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	4a30      	ldr	r2, [pc, #192]	; (8001140 <ANGLE_Init+0x138>)
 800107e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001082:	6053      	str	r3, [r2, #4]
	ADC1->CR2		&=~ (1<<1);			// Single conversion mode
 8001084:	4b2e      	ldr	r3, [pc, #184]	; (8001140 <ANGLE_Init+0x138>)
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	4a2d      	ldr	r2, [pc, #180]	; (8001140 <ANGLE_Init+0x138>)
 800108a:	f023 0302 	bic.w	r3, r3, #2
 800108e:	6093      	str	r3, [r2, #8]
	ADC1->CR2		&=~ (7<<17);	   
 8001090:	4b2b      	ldr	r3, [pc, #172]	; (8001140 <ANGLE_Init+0x138>)
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	4a2a      	ldr	r2, [pc, #168]	; (8001140 <ANGLE_Init+0x138>)
 8001096:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 800109a:	6093      	str	r3, [r2, #8]
	ADC1->CR2		|=  7<<17;			// Software control conversion  
 800109c:	4b28      	ldr	r3, [pc, #160]	; (8001140 <ANGLE_Init+0x138>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	4a27      	ldr	r2, [pc, #156]	; (8001140 <ANGLE_Init+0x138>)
 80010a2:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 80010a6:	6093      	str	r3, [r2, #8]
	ADC1->CR2		|=  1<<20;			// Using external triggers (SWSTART)!!! Must be triggered by an event.
 80010a8:	4b25      	ldr	r3, [pc, #148]	; (8001140 <ANGLE_Init+0x138>)
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	4a24      	ldr	r2, [pc, #144]	; (8001140 <ANGLE_Init+0x138>)
 80010ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010b2:	6093      	str	r3, [r2, #8]
	ADC1->CR2		&=~ (1<<11);		// Right alignment	 
 80010b4:	4b22      	ldr	r3, [pc, #136]	; (8001140 <ANGLE_Init+0x138>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	4a21      	ldr	r2, [pc, #132]	; (8001140 <ANGLE_Init+0x138>)
 80010ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010be:	6093      	str	r3, [r2, #8]
	ADC1->SQR1		&=~ (0x0F<<20);
 80010c0:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <ANGLE_Init+0x138>)
 80010c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c4:	4a1e      	ldr	r2, [pc, #120]	; (8001140 <ANGLE_Init+0x138>)
 80010c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80010ca:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1		&=  0<<20;			// The 1 transformation is in the rule sequence, that is to transform only the rule sequence 1.	   
 80010cc:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <ANGLE_Init+0x138>)
 80010ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <ANGLE_Init+0x138>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	62da      	str	r2, [r3, #44]	; 0x2c

	// Set the sampling time of channel 3
	ADC1->SMPR2		&= 0xFFFF0FFF;		// Channel sampling time emptied  
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <ANGLE_Init+0x138>)
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	4a19      	ldr	r2, [pc, #100]	; (8001140 <ANGLE_Init+0x138>)
 80010dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80010e0:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2		|= 7<<9;			// Channel 239.5 cycle, increasing sampling time can improve accuracy.
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <ANGLE_Init+0x138>)
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	4a16      	ldr	r2, [pc, #88]	; (8001140 <ANGLE_Init+0x138>)
 80010e8:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 80010ec:	6113      	str	r3, [r2, #16]

	ADC1->CR2		|= 1<<0;			// Turn on AD converter
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <ANGLE_Init+0x138>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	4a13      	ldr	r2, [pc, #76]	; (8001140 <ANGLE_Init+0x138>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6093      	str	r3, [r2, #8]
	ADC1->CR2		|= 1<<3;        	// Enable reset calibration  
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <ANGLE_Init+0x138>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	4a10      	ldr	r2, [pc, #64]	; (8001140 <ANGLE_Init+0x138>)
 8001100:	f043 0308 	orr.w	r3, r3, #8
 8001104:	6093      	str	r3, [r2, #8]
	while(ADC1->CR2 & 1<<3);  			// Waiting for calibration to end 		
 8001106:	bf00      	nop
 8001108:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <ANGLE_Init+0x138>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f003 0308 	and.w	r3, r3, #8
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1f9      	bne.n	8001108 <ANGLE_Init+0x100>
	
  	// This bit is set up by software and cleared by hardware.
	// The bit will be cleared after the calibration register is initialized.	 
	ADC1->CR2 |= 1<<2;					// Open AD calibration   
 8001114:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <ANGLE_Init+0x138>)
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	4a09      	ldr	r2, [pc, #36]	; (8001140 <ANGLE_Init+0x138>)
 800111a:	f043 0304 	orr.w	r3, r3, #4
 800111e:	6093      	str	r3, [r2, #8]
	while (ADC1->CR2 & 1<<2);			// Waiting for calibration to end
 8001120:	bf00      	nop
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <ANGLE_Init+0x138>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f003 0304 	and.w	r3, r3, #4
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f9      	bne.n	8001122 <ANGLE_Init+0x11a>
}
 800112e:	bf00      	nop
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	40021000 	.word	0x40021000
 800113c:	40010800 	.word	0x40010800
 8001140:	40012400 	.word	0x40012400

08001144 <ANGLE_Read>:

unsigned short ANGLE_Read(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
	// Conversion Cycles = 239.5 cycles + 12.5 cycles = 252 cycles
	// Conversion Time = 252 cycles / 14MHz = 18us

	// Set conversion sequence		 
	ADC1->SQR3		&= 0xFFFFFFE0;		// Regular sequence 1 channel 3
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <ANGLE_Read+0x44>)
 800114a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114c:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <ANGLE_Read+0x44>)
 800114e:	f023 031f 	bic.w	r3, r3, #31
 8001152:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3		|= 3;		  			    
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <ANGLE_Read+0x44>)
 8001156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001158:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <ANGLE_Read+0x44>)
 800115a:	f043 0303 	orr.w	r3, r3, #3
 800115e:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->CR2		|= 1<<22;			// Start rule conversion channel 
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <ANGLE_Read+0x44>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	4a08      	ldr	r2, [pc, #32]	; (8001188 <ANGLE_Read+0x44>)
 8001166:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800116a:	6093      	str	r3, [r2, #8]
	while (!(ADC1->SR & 1<<1));			// Wait for conversion end
 800116c:	bf00      	nop
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <ANGLE_Read+0x44>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f9      	beq.n	800116e <ANGLE_Read+0x2a>
	return ADC1->DR;					// Return the ADC value
 800117a:	4b03      	ldr	r3, [pc, #12]	; (8001188 <ANGLE_Read+0x44>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	b29b      	uxth	r3, r3
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	40012400 	.word	0x40012400

0800118c <__enable_irq>:


#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
 8001190:	b662      	cpsie	i
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr

0800119a <__disable_irq>:
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
 800119e:	b672      	cpsid	i
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <CONTROL_Init>:
void 			cmd_GetPositionConfig(void);
void 			cmd_SetMotor(int motorCmd);
void			cmd_SetControlConfig(const unsigned char * config);

void CONTROL_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	controlEnabled		= false;
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <CONTROL_Init+0x64>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
    isCalibrated        = false;
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <CONTROL_Init+0x68>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
    ledPeriod           = 500/controlLoopPeriodMs;
 80011b8:	4b16      	ldr	r3, [pc, #88]	; (8001214 <CONTROL_Init+0x6c>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <CONTROL_Init+0x70>)
 80011ca:	801a      	strh	r2, [r3, #0]
	angleErrPrev		= 0;
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <CONTROL_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	801a      	strh	r2, [r3, #0]
	positionErrPrev		= 0;
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <CONTROL_Init+0x78>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	801a      	strh	r2, [r3, #0]
	positionPeriodCnt 	= position_ctrlPeriod - 1;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <CONTROL_Init+0x7c>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	3b01      	subs	r3, #1
 80011de:	b29a      	uxth	r2, r3
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <CONTROL_Init+0x80>)
 80011e2:	801a      	strh	r2, [r3, #0]
    positionCentre      = (short)ENCODER_Read(); // assume starting position is near center
 80011e4:	f001 f908 	bl	80023f8 <ENCODER_Read>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <CONTROL_Init+0x84>)
 80011ee:	601a      	str	r2, [r3, #0]
    positionLimitLeft   = positionCentre + 2400;
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <CONTROL_Init+0x84>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 80011f8:	4a0d      	ldr	r2, [pc, #52]	; (8001230 <CONTROL_Init+0x88>)
 80011fa:	6013      	str	r3, [r2, #0]
    positionLimitRight  = positionCentre - 2400; // guess defaults based on 7000-8000 counts at limits
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <CONTROL_Init+0x84>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f5a3 6316 	sub.w	r3, r3, #2400	; 0x960
 8001204:	4a0b      	ldr	r2, [pc, #44]	; (8001234 <CONTROL_Init+0x8c>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000358 	.word	0x20000358
 8001210:	20000023 	.word	0x20000023
 8001214:	20000020 	.word	0x20000020
 8001218:	20000356 	.word	0x20000356
 800121c:	200002c4 	.word	0x200002c4
 8001220:	200002cc 	.word	0x200002cc
 8001224:	20000010 	.word	0x20000010
 8001228:	20000354 	.word	0x20000354
 800122c:	2000035c 	.word	0x2000035c
 8001230:	200002d0 	.word	0x200002d0
 8001234:	200002c8 	.word	0x200002c8

08001238 <CONTROL_ToggleState>:

void CONTROL_ToggleState(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	cmd_ControlMode(!controlEnabled);
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <CONTROL_ToggleState+0x2c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	bf14      	ite	ne
 8001246:	2301      	movne	r3, #1
 8001248:	2300      	moveq	r3, #0
 800124a:	b2db      	uxtb	r3, r3
 800124c:	f083 0301 	eor.w	r3, r3, #1
 8001250:	b2db      	uxtb	r3, r3
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	b2db      	uxtb	r3, r3
 8001258:	4618      	mov	r0, r3
 800125a:	f000 fdf7 	bl	8001e4c <cmd_ControlMode>
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000358 	.word	0x20000358

08001268 <wrapLocal>:

const int ADC_RANGE = 4096;

int wrapLocal(int angle) {
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
    if (angle >= ADC_RANGE/2)
 8001270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001274:	0fda      	lsrs	r2, r3, #31
 8001276:	4413      	add	r3, r2
 8001278:	105b      	asrs	r3, r3, #1
 800127a:	461a      	mov	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4293      	cmp	r3, r2
 8001280:	db04      	blt.n	800128c <wrapLocal+0x24>
		return angle - ADC_RANGE;
 8001282:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	1a9b      	subs	r3, r3, r2
 800128a:	e00f      	b.n	80012ac <wrapLocal+0x44>
	if (angle <= -ADC_RANGE/2)
 800128c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001290:	425b      	negs	r3, r3
 8001292:	0fda      	lsrs	r2, r3, #31
 8001294:	4413      	add	r3, r2
 8001296:	105b      	asrs	r3, r3, #1
 8001298:	461a      	mov	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4293      	cmp	r3, r2
 800129e:	dc04      	bgt.n	80012aa <wrapLocal+0x42>
		return angle + ADC_RANGE;
 80012a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4413      	add	r3, r2
 80012a8:	e000      	b.n	80012ac <wrapLocal+0x44>
	else
		return angle;
 80012aa:	687b      	ldr	r3, [r7, #4]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
	...

080012b8 <CONTROL_Loop>:
    	return current + ADC_RANGE * (((2 * diff) / ADC_RANGE - 1) / 2);
}

// Called from Timer interrupt every CONTROL_LOOP_PERIOD_MS ms
void CONTROL_Loop(void)
{
 80012b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012bc:	b08c      	sub	sp, #48	; 0x30
 80012be:	af00      	add	r7, sp, #0
	int 					angle, angleErr;
	short 					positionRaw, position, positionErr, positionD;
	float 					angleErrDiff;
	float 					positionErrDiff;
	int   					command;
	int angle_mean = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61bb      	str	r3, [r7, #24]

	timeMeasured = TIMER1_getSystemTime_Us();
 80012c4:	f001 fe2c 	bl	8002f20 <TIMER1_getSystemTime_Us>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4a2f      	ldr	r2, [pc, #188]	; (8001388 <CONTROL_Loop+0xd0>)
 80012cc:	6013      	str	r3, [r2, #0]
	if (angle_averageLen > 2)
		angle_mean = (short)((angle_sum - angle_min - angle_max) / (angle_averageLen-2));
	else
		angle_mean = angle_sum / angle_averageLen;*/

	angle_mean = AdvanceMedianFilter(angleSamples, angle_averageLen);
 80012ce:	4b2f      	ldr	r3, [pc, #188]	; (800138c <CONTROL_Loop+0xd4>)
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	4619      	mov	r1, r3
 80012d4:	482e      	ldr	r0, [pc, #184]	; (8001390 <CONTROL_Loop+0xd8>)
 80012d6:	f001 faca 	bl	800286e <AdvanceMedianFilter>
 80012da:	61b8      	str	r0, [r7, #24]
	// Detect invalid steps
	#define MAX_ADC_STEP 60
	#define MAX_INVALID_STEPS 0
	#define PASSTHRU_MARGIN 200

	int invalid_step = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]

	if(angle_averageLen > 1) {
 80012e0:	4b2a      	ldr	r3, [pc, #168]	; (800138c <CONTROL_Loop+0xd4>)
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d93d      	bls.n	8001364 <CONTROL_Loop+0xac>
		for (int i = 0; i < angle_averageLen; i++) {
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	e034      	b.n	8001358 <CONTROL_Loop+0xa0>
			// start at oldest value (since angleSampIndex is not yet overwritten)
			int curr = angleSamples[(angleSampIndex + i) % angle_averageLen];
 80012ee:	4b29      	ldr	r3, [pc, #164]	; (8001394 <CONTROL_Loop+0xdc>)
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	4413      	add	r3, r2
 80012f8:	4a24      	ldr	r2, [pc, #144]	; (800138c <CONTROL_Loop+0xd4>)
 80012fa:	8812      	ldrh	r2, [r2, #0]
 80012fc:	fb93 f1f2 	sdiv	r1, r3, r2
 8001300:	fb02 f201 	mul.w	r2, r2, r1
 8001304:	1a9b      	subs	r3, r3, r2
 8001306:	4a22      	ldr	r2, [pc, #136]	; (8001390 <CONTROL_Loop+0xd8>)
 8001308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130c:	617b      	str	r3, [r7, #20]
			int prev = angleSamples[(angleSampIndex + i + angle_averageLen - 1) % angle_averageLen];
 800130e:	4b21      	ldr	r3, [pc, #132]	; (8001394 <CONTROL_Loop+0xdc>)
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	4413      	add	r3, r2
 8001318:	4a1c      	ldr	r2, [pc, #112]	; (800138c <CONTROL_Loop+0xd4>)
 800131a:	8812      	ldrh	r2, [r2, #0]
 800131c:	4413      	add	r3, r2
 800131e:	3b01      	subs	r3, #1
 8001320:	4a1a      	ldr	r2, [pc, #104]	; (800138c <CONTROL_Loop+0xd4>)
 8001322:	8812      	ldrh	r2, [r2, #0]
 8001324:	fb93 f1f2 	sdiv	r1, r3, r2
 8001328:	fb02 f201 	mul.w	r2, r2, r1
 800132c:	1a9b      	subs	r3, r3, r2
 800132e:	4a18      	ldr	r2, [pc, #96]	; (8001390 <CONTROL_Loop+0xd8>)
 8001330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001334:	613b      	str	r3, [r7, #16]
			//int dt = angleSamplesTimestamp[] - angleSamplesTimestamp

			// previous value for oldest value not existing
			if(i != 0 && abs(curr-prev) > MAX_ADC_STEP)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d00a      	beq.n	8001352 <CONTROL_Loop+0x9a>
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	bfb8      	it	lt
 8001346:	425b      	neglt	r3, r3
 8001348:	2b3c      	cmp	r3, #60	; 0x3c
 800134a:	dd02      	ble.n	8001352 <CONTROL_Loop+0x9a>
				invalid_step++;
 800134c:	6a3b      	ldr	r3, [r7, #32]
 800134e:	3301      	adds	r3, #1
 8001350:	623b      	str	r3, [r7, #32]
		for (int i = 0; i < angle_averageLen; i++) {
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3301      	adds	r3, #1
 8001356:	61fb      	str	r3, [r7, #28]
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <CONTROL_Loop+0xd4>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	4293      	cmp	r3, r2
 8001362:	dbc4      	blt.n	80012ee <CONTROL_Loop+0x36>
		}
	}

	// Anomaly Detection: discard buffer if too many invalid steps (allow 2 for 1 outlier/popcorn noise)
	if (abs(wrapLocal(prevAngle)) > PASSTHRU_MARGIN || invalid_step <= MAX_INVALID_STEPS) {
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <CONTROL_Loop+0xe0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff7d 	bl	8001268 <wrapLocal>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	bfb8      	it	lt
 8001374:	425b      	neglt	r3, r3
 8001376:	2bc8      	cmp	r3, #200	; 0xc8
 8001378:	dc02      	bgt.n	8001380 <CONTROL_Loop+0xc8>
 800137a:	6a3b      	ldr	r3, [r7, #32]
 800137c:	2b00      	cmp	r3, #0
 800137e:	dc0f      	bgt.n	80013a0 <CONTROL_Loop+0xe8>
		//angleD = wrapLocal(diff) / (1 + frozen);

		//ppprevAngle = pprevAngle;
		//pprevAngle = prevAngle;
		//prevAngle = angle;
		frozen = 0;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <CONTROL_Loop+0xe4>)
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
 8001386:	e011      	b.n	80013ac <CONTROL_Loop+0xf4>
 8001388:	2000006c 	.word	0x2000006c
 800138c:	20000002 	.word	0x20000002
 8001390:	200002d4 	.word	0x200002d4
 8001394:	20000068 	.word	0x20000068
 8001398:	200000c4 	.word	0x200000c4
 800139c:	200000c8 	.word	0x200000c8
	}
	else {
		//angle = prevAngle;
		frozen ++;
 80013a0:	4b9f      	ldr	r3, [pc, #636]	; (8001620 <CONTROL_Loop+0x368>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	3301      	adds	r3, #1
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b9d      	ldr	r3, [pc, #628]	; (8001620 <CONTROL_Loop+0x368>)
 80013aa:	701a      	strb	r2, [r3, #0]
	}


	angle = angle_mean;
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	60fb      	str	r3, [r7, #12]
	angleD = wrapLocal(angle - prevAngle);
 80013b0:	4b9c      	ldr	r3, [pc, #624]	; (8001624 <CONTROL_Loop+0x36c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff55 	bl	8001268 <wrapLocal>
 80013be:	4603      	mov	r3, r0
 80013c0:	4a99      	ldr	r2, [pc, #612]	; (8001628 <CONTROL_Loop+0x370>)
 80013c2:	6013      	str	r3, [r2, #0]
	prevAngle = angle;
 80013c4:	4a97      	ldr	r2, [pc, #604]	; (8001624 <CONTROL_Loop+0x36c>)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6013      	str	r3, [r2, #0]


	positionRaw = positionCentre + encoderDirection * ((short)ENCODER_Read() - positionCentre);
 80013ca:	f001 f815 	bl	80023f8 <ENCODER_Read>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b96      	ldr	r3, [pc, #600]	; (800162c <CONTROL_Loop+0x374>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	b29b      	uxth	r3, r3
 80013da:	4a95      	ldr	r2, [pc, #596]	; (8001630 <CONTROL_Loop+0x378>)
 80013dc:	6812      	ldr	r2, [r2, #0]
 80013de:	b292      	uxth	r2, r2
 80013e0:	fb02 f303 	mul.w	r3, r2, r3
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b91      	ldr	r3, [pc, #580]	; (800162c <CONTROL_Loop+0x374>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	4413      	add	r3, r2
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	817b      	strh	r3, [r7, #10]
    position    = (positionRaw - positionCentre);
 80013f2:	897a      	ldrh	r2, [r7, #10]
 80013f4:	4b8d      	ldr	r3, [pc, #564]	; (800162c <CONTROL_Loop+0x374>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	85fb      	strh	r3, [r7, #46]	; 0x2e


	// Position PD control
	if (++positionPeriodCnt >= position_ctrlPeriod) {
 8001400:	4b8c      	ldr	r3, [pc, #560]	; (8001634 <CONTROL_Loop+0x37c>)
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	3301      	adds	r3, #1
 8001406:	b29a      	uxth	r2, r3
 8001408:	4b8a      	ldr	r3, [pc, #552]	; (8001634 <CONTROL_Loop+0x37c>)
 800140a:	801a      	strh	r2, [r3, #0]
 800140c:	4b89      	ldr	r3, [pc, #548]	; (8001634 <CONTROL_Loop+0x37c>)
 800140e:	881a      	ldrh	r2, [r3, #0]
 8001410:	4b89      	ldr	r3, [pc, #548]	; (8001638 <CONTROL_Loop+0x380>)
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	429a      	cmp	r2, r3
 8001416:	d371      	bcc.n	80014fc <CONTROL_Loop+0x244>
		positionPeriodCnt = 0;
 8001418:	4b86      	ldr	r3, [pc, #536]	; (8001634 <CONTROL_Loop+0x37c>)
 800141a:	2200      	movs	r2, #0
 800141c:	801a      	strh	r2, [r3, #0]

		// IIR Filter for Position
		if(position_smoothing < 1.0)
 800141e:	4b87      	ldr	r3, [pc, #540]	; (800163c <CONTROL_Loop+0x384>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fd80 	bl	8000f2c <__aeabi_fcmplt>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d03a      	beq.n	80014a8 <CONTROL_Loop+0x1f0>
			position = (position_smoothing*position) + (1.0 - position_smoothing)*positionPrev;
 8001432:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fcd6 	bl	8000de8 <__aeabi_i2f>
 800143c:	4602      	mov	r2, r0
 800143e:	4b7f      	ldr	r3, [pc, #508]	; (800163c <CONTROL_Loop+0x384>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4619      	mov	r1, r3
 8001444:	4610      	mov	r0, r2
 8001446:	f7fe fe93 	bl	8000170 <__aeabi_fmul>
 800144a:	4603      	mov	r3, r0
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f8a7 	bl	80005a0 <__aeabi_f2d>
 8001452:	4604      	mov	r4, r0
 8001454:	460d      	mov	r5, r1
 8001456:	4b79      	ldr	r3, [pc, #484]	; (800163c <CONTROL_Loop+0x384>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff f8a0 	bl	80005a0 <__aeabi_f2d>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	f04f 0000 	mov.w	r0, #0
 8001468:	4975      	ldr	r1, [pc, #468]	; (8001640 <CONTROL_Loop+0x388>)
 800146a:	f7fe ff39 	bl	80002e0 <__aeabi_dsub>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4690      	mov	r8, r2
 8001474:	4699      	mov	r9, r3
 8001476:	4b73      	ldr	r3, [pc, #460]	; (8001644 <CONTROL_Loop+0x38c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f87e 	bl	800057c <__aeabi_i2d>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4640      	mov	r0, r8
 8001486:	4649      	mov	r1, r9
 8001488:	f7ff f8e2 	bl	8000650 <__aeabi_dmul>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4620      	mov	r0, r4
 8001492:	4629      	mov	r1, r5
 8001494:	f7fe ff26 	bl	80002e4 <__adddf3>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f7ff fb70 	bl	8000b84 <__aeabi_d2iz>
 80014a4:	4603      	mov	r3, r0
 80014a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		positionD = position - positionPrev;
 80014a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80014aa:	4b66      	ldr	r3, [pc, #408]	; (8001644 <CONTROL_Loop+0x38c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	813b      	strh	r3, [r7, #8]
		positionPrev	= position;
 80014b6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80014ba:	4a62      	ldr	r2, [pc, #392]	; (8001644 <CONTROL_Loop+0x38c>)
 80014bc:	6013      	str	r3, [r2, #0]

		// Position PID control
		positionErr = position - position_setPoint;
 80014be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80014c0:	4b61      	ldr	r3, [pc, #388]	; (8001648 <CONTROL_Loop+0x390>)
 80014c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
		positionErrDiff = positionD;
 80014ce:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fc88 	bl	8000de8 <__aeabi_i2f>
 80014d8:	4603      	mov	r3, r0
 80014da:	62bb      	str	r3, [r7, #40]	; 0x28
		position_I += positionErr;
 80014dc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fc81 	bl	8000de8 <__aeabi_i2f>
 80014e6:	4602      	mov	r2, r0
 80014e8:	4b58      	ldr	r3, [pc, #352]	; (800164c <CONTROL_Loop+0x394>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	4610      	mov	r0, r2
 80014f0:	f7ff fbc6 	bl	8000c80 <__addsf3>
 80014f4:	4603      	mov	r3, r0
 80014f6:	461a      	mov	r2, r3
 80014f8:	4b54      	ldr	r3, [pc, #336]	; (800164c <CONTROL_Loop+0x394>)
 80014fa:	601a      	str	r2, [r3, #0]
	}

	// Microcontroller Control Routine
	if (controlEnabled)	{
 80014fc:	4b54      	ldr	r3, [pc, #336]	; (8001650 <CONTROL_Loop+0x398>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 811c 	beq.w	8001740 <CONTROL_Loop+0x488>
		// Angle PID control
        angleErr = angle - angle_setPoint;
 8001508:	4b52      	ldr	r3, [pc, #328]	; (8001654 <CONTROL_Loop+0x39c>)
 800150a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150e:	461a      	mov	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	1a9b      	subs	r3, r3, r2
 8001514:	607b      	str	r3, [r7, #4]
        angleErrDiff = angleD;
 8001516:	4b44      	ldr	r3, [pc, #272]	; (8001628 <CONTROL_Loop+0x370>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fc64 	bl	8000de8 <__aeabi_i2f>
 8001520:	4603      	mov	r3, r0
 8001522:	603b      	str	r3, [r7, #0]
        angle_I += angleErr;
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff fc5f 	bl	8000de8 <__aeabi_i2f>
 800152a:	4602      	mov	r2, r0
 800152c:	4b4a      	ldr	r3, [pc, #296]	; (8001658 <CONTROL_Loop+0x3a0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4619      	mov	r1, r3
 8001532:	4610      	mov	r0, r2
 8001534:	f7ff fba4 	bl	8000c80 <__addsf3>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	4b46      	ldr	r3, [pc, #280]	; (8001658 <CONTROL_Loop+0x3a0>)
 800153e:	601a      	str	r2, [r3, #0]
		angleCmd	 = (angle_KP*angleErr + angle_KI*angleI + angle_KD*angleErrDiff);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff fc51 	bl	8000de8 <__aeabi_i2f>
 8001546:	4602      	mov	r2, r0
 8001548:	4b44      	ldr	r3, [pc, #272]	; (800165c <CONTROL_Loop+0x3a4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4619      	mov	r1, r3
 800154e:	4610      	mov	r0, r2
 8001550:	f7fe fe0e 	bl	8000170 <__aeabi_fmul>
 8001554:	4603      	mov	r3, r0
 8001556:	461c      	mov	r4, r3
 8001558:	4b41      	ldr	r3, [pc, #260]	; (8001660 <CONTROL_Loop+0x3a8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fc43 	bl	8000de8 <__aeabi_i2f>
 8001562:	4602      	mov	r2, r0
 8001564:	4b3f      	ldr	r3, [pc, #252]	; (8001664 <CONTROL_Loop+0x3ac>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	4610      	mov	r0, r2
 800156c:	f7fe fe00 	bl	8000170 <__aeabi_fmul>
 8001570:	4603      	mov	r3, r0
 8001572:	4619      	mov	r1, r3
 8001574:	4620      	mov	r0, r4
 8001576:	f7ff fb83 	bl	8000c80 <__addsf3>
 800157a:	4603      	mov	r3, r0
 800157c:	461c      	mov	r4, r3
 800157e:	4b3a      	ldr	r3, [pc, #232]	; (8001668 <CONTROL_Loop+0x3b0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6839      	ldr	r1, [r7, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe fdf3 	bl	8000170 <__aeabi_fmul>
 800158a:	4603      	mov	r3, r0
 800158c:	4619      	mov	r1, r3
 800158e:	4620      	mov	r0, r4
 8001590:	f7ff fb76 	bl	8000c80 <__addsf3>
 8001594:	4603      	mov	r3, r0
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fcf0 	bl	8000f7c <__aeabi_f2iz>
 800159c:	4603      	mov	r3, r0
 800159e:	4a33      	ldr	r2, [pc, #204]	; (800166c <CONTROL_Loop+0x3b4>)
 80015a0:	6013      	str	r3, [r2, #0]

		positionCmd = (position_KP*positionErr + position_KI*position_I + position_KD*positionErrDiff);
 80015a2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fc1e 	bl	8000de8 <__aeabi_i2f>
 80015ac:	4602      	mov	r2, r0
 80015ae:	4b30      	ldr	r3, [pc, #192]	; (8001670 <CONTROL_Loop+0x3b8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4619      	mov	r1, r3
 80015b4:	4610      	mov	r0, r2
 80015b6:	f7fe fddb 	bl	8000170 <__aeabi_fmul>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461c      	mov	r4, r3
 80015be:	4b2d      	ldr	r3, [pc, #180]	; (8001674 <CONTROL_Loop+0x3bc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a22      	ldr	r2, [pc, #136]	; (800164c <CONTROL_Loop+0x394>)
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe fdd1 	bl	8000170 <__aeabi_fmul>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4619      	mov	r1, r3
 80015d2:	4620      	mov	r0, r4
 80015d4:	f7ff fb54 	bl	8000c80 <__addsf3>
 80015d8:	4603      	mov	r3, r0
 80015da:	461c      	mov	r4, r3
 80015dc:	4b26      	ldr	r3, [pc, #152]	; (8001678 <CONTROL_Loop+0x3c0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe fdc4 	bl	8000170 <__aeabi_fmul>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4619      	mov	r1, r3
 80015ec:	4620      	mov	r0, r4
 80015ee:	f7ff fb47 	bl	8000c80 <__addsf3>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fcc1 	bl	8000f7c <__aeabi_f2iz>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4a1f      	ldr	r2, [pc, #124]	; (800167c <CONTROL_Loop+0x3c4>)
 80015fe:	6013      	str	r3, [r2, #0]

		// Limit the motor speed
		command = - angleCmd - positionCmd;
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <CONTROL_Loop+0x3b4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	425a      	negs	r2, r3
 8001606:	4b1d      	ldr	r3, [pc, #116]	; (800167c <CONTROL_Loop+0x3c4>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
		if      (command >  CONTROL_MOTOR_MAX_SPEED) command =  CONTROL_MOTOR_MAX_SPEED;
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	f641 22b7 	movw	r2, #6839	; 0x1ab7
 8001614:	4293      	cmp	r3, r2
 8001616:	dd33      	ble.n	8001680 <CONTROL_Loop+0x3c8>
 8001618:	f641 23b7 	movw	r3, #6839	; 0x1ab7
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
 800161e:	e035      	b.n	800168c <CONTROL_Loop+0x3d4>
 8001620:	200000c8 	.word	0x200000c8
 8001624:	200000c4 	.word	0x200000c4
 8001628:	200000cc 	.word	0x200000cc
 800162c:	2000035c 	.word	0x2000035c
 8001630:	20000024 	.word	0x20000024
 8001634:	20000354 	.word	0x20000354
 8001638:	20000010 	.word	0x20000010
 800163c:	20000014 	.word	0x20000014
 8001640:	3ff00000 	.word	0x3ff00000
 8001644:	200000d0 	.word	0x200000d0
 8001648:	20000050 	.word	0x20000050
 800164c:	20000080 	.word	0x20000080
 8001650:	20000358 	.word	0x20000358
 8001654:	20000000 	.word	0x20000000
 8001658:	2000007c 	.word	0x2000007c
 800165c:	20000008 	.word	0x20000008
 8001660:	200000d4 	.word	0x200000d4
 8001664:	2000004c 	.word	0x2000004c
 8001668:	2000000c 	.word	0x2000000c
 800166c:	200000d8 	.word	0x200000d8
 8001670:	20000018 	.word	0x20000018
 8001674:	20000054 	.word	0x20000054
 8001678:	2000001c 	.word	0x2000001c
 800167c:	200000dc 	.word	0x200000dc
		else if (command < -CONTROL_MOTOR_MAX_SPEED) command = -CONTROL_MOTOR_MAX_SPEED;
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	4a74      	ldr	r2, [pc, #464]	; (8001854 <CONTROL_Loop+0x59c>)
 8001684:	4293      	cmp	r3, r2
 8001686:	da01      	bge.n	800168c <CONTROL_Loop+0x3d4>
 8001688:	4b72      	ldr	r3, [pc, #456]	; (8001854 <CONTROL_Loop+0x59c>)
 800168a:	627b      	str	r3, [r7, #36]	; 0x24

        // Disable motor if falls hard on either limit
        if ((command < 0) && (positionRaw < (positionLimitLeft + 20))) {
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	2b00      	cmp	r3, #0
 8001690:	da0f      	bge.n	80016b2 <CONTROL_Loop+0x3fa>
 8001692:	4b71      	ldr	r3, [pc, #452]	; (8001858 <CONTROL_Loop+0x5a0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f103 0213 	add.w	r2, r3, #19
 800169a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800169e:	429a      	cmp	r2, r3
 80016a0:	db07      	blt.n	80016b2 <CONTROL_Loop+0x3fa>
            command = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
            stopCnt++;
 80016a6:	4b6d      	ldr	r3, [pc, #436]	; (800185c <CONTROL_Loop+0x5a4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	4a6b      	ldr	r2, [pc, #428]	; (800185c <CONTROL_Loop+0x5a4>)
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	e015      	b.n	80016de <CONTROL_Loop+0x426>
        } else if ((command > 0) && (positionRaw > (positionLimitRight - 20))) {
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	dd0f      	ble.n	80016d8 <CONTROL_Loop+0x420>
 80016b8:	4b69      	ldr	r3, [pc, #420]	; (8001860 <CONTROL_Loop+0x5a8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f1a3 0213 	sub.w	r2, r3, #19
 80016c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	dc07      	bgt.n	80016d8 <CONTROL_Loop+0x420>
            command = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
            stopCnt++;
 80016cc:	4b63      	ldr	r3, [pc, #396]	; (800185c <CONTROL_Loop+0x5a4>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	3301      	adds	r3, #1
 80016d2:	4a62      	ldr	r2, [pc, #392]	; (800185c <CONTROL_Loop+0x5a4>)
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	e002      	b.n	80016de <CONTROL_Loop+0x426>
        } else {
            stopCnt = 0;
 80016d8:	4b60      	ldr	r3, [pc, #384]	; (800185c <CONTROL_Loop+0x5a4>)
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
        }

        // Quit control if pendulum has continously been at the end for 500 ms
        if (stopCnt == 500/controlLoopPeriodMs) {
 80016de:	4b61      	ldr	r3, [pc, #388]	; (8001864 <CONTROL_Loop+0x5ac>)
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b5b      	ldr	r3, [pc, #364]	; (800185c <CONTROL_Loop+0x5a4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d109      	bne.n	800170a <CONTROL_Loop+0x452>
            cmd_ControlMode(false);
 80016f6:	2000      	movs	r0, #0
 80016f8:	f000 fba8 	bl	8001e4c <cmd_ControlMode>
            MOTOR_SetSpeed(0);
 80016fc:	2000      	movs	r0, #0
 80016fe:	f001 f9af 	bl	8002a60 <MOTOR_SetSpeed>
            stopCnt = 0;
 8001702:	4b56      	ldr	r3, [pc, #344]	; (800185c <CONTROL_Loop+0x5a4>)
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	e029      	b.n	800175e <CONTROL_Loop+0x4a6>
        } else {
        	if(controlLatencyUs > 0) {
 800170a:	4b57      	ldr	r3, [pc, #348]	; (8001868 <CONTROL_Loop+0x5b0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	dd10      	ble.n	8001734 <CONTROL_Loop+0x47c>
        		controlLatencyTimestampUs = TIMER1_getSystemTime_Us() + controlLatencyUs;
 8001712:	f001 fc05 	bl	8002f20 <TIMER1_getSystemTime_Us>
 8001716:	4603      	mov	r3, r0
 8001718:	4a53      	ldr	r2, [pc, #332]	; (8001868 <CONTROL_Loop+0x5b0>)
 800171a:	6812      	ldr	r2, [r2, #0]
 800171c:	4413      	add	r3, r2
 800171e:	461a      	mov	r2, r3
 8001720:	4b52      	ldr	r3, [pc, #328]	; (800186c <CONTROL_Loop+0x5b4>)
 8001722:	601a      	str	r2, [r3, #0]
        		controlCommand = -command;
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	425b      	negs	r3, r3
 8001728:	4a51      	ldr	r2, [pc, #324]	; (8001870 <CONTROL_Loop+0x5b8>)
 800172a:	6013      	str	r3, [r2, #0]
        		controlLatencyEnable = true;
 800172c:	4b51      	ldr	r3, [pc, #324]	; (8001874 <CONTROL_Loop+0x5bc>)
 800172e:	2201      	movs	r2, #1
 8001730:	701a      	strb	r2, [r3, #0]
 8001732:	e014      	b.n	800175e <CONTROL_Loop+0x4a6>
        	}
        	else
        		MOTOR_SetSpeed(-command);
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	425b      	negs	r3, r3
 8001738:	4618      	mov	r0, r3
 800173a:	f001 f991 	bl	8002a60 <MOTOR_SetSpeed>
 800173e:	e00e      	b.n	800175e <CONTROL_Loop+0x4a6>
        }
	}
	else
	{
		if(controlSync) {
 8001740:	4b4d      	ldr	r3, [pc, #308]	; (8001878 <CONTROL_Loop+0x5c0>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <CONTROL_Loop+0x49c>
            MOTOR_SetSpeed(controlCommand);
 8001748:	4b49      	ldr	r3, [pc, #292]	; (8001870 <CONTROL_Loop+0x5b8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f001 f987 	bl	8002a60 <MOTOR_SetSpeed>
 8001752:	e004      	b.n	800175e <CONTROL_Loop+0x4a6>
		} else {
			command = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
	        stopCnt = 0;
 8001758:	4b40      	ldr	r3, [pc, #256]	; (800185c <CONTROL_Loop+0x5a4>)
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
		}
	}

	// Send latest state to the PC
    if (streamEnable)
 800175e:	4b47      	ldr	r3, [pc, #284]	; (800187c <CONTROL_Loop+0x5c4>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d04e      	beq.n	8001804 <CONTROL_Loop+0x54c>
    {
    	if(timeReceived > 0 && timeSent > 0 && newReceived) {
 8001766:	4b46      	ldr	r3, [pc, #280]	; (8001880 <CONTROL_Loop+0x5c8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00e      	beq.n	800178c <CONTROL_Loop+0x4d4>
 800176e:	4b45      	ldr	r3, [pc, #276]	; (8001884 <CONTROL_Loop+0x5cc>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00a      	beq.n	800178c <CONTROL_Loop+0x4d4>
 8001776:	4b44      	ldr	r3, [pc, #272]	; (8001888 <CONTROL_Loop+0x5d0>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d006      	beq.n	800178c <CONTROL_Loop+0x4d4>
        	latency = timeReceived - timeSent;
 800177e:	4b40      	ldr	r3, [pc, #256]	; (8001880 <CONTROL_Loop+0x5c8>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4b40      	ldr	r3, [pc, #256]	; (8001884 <CONTROL_Loop+0x5cc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	4a40      	ldr	r2, [pc, #256]	; (800188c <CONTROL_Loop+0x5d4>)
 800178a:	6013      	str	r3, [r2, #0]
    	}

        buffer[ 0] = SERIAL_SOF;
 800178c:	4b40      	ldr	r3, [pc, #256]	; (8001890 <CONTROL_Loop+0x5d8>)
 800178e:	22aa      	movs	r2, #170	; 0xaa
 8001790:	701a      	strb	r2, [r3, #0]
        buffer[ 1] = CMD_STATE;
 8001792:	4b3f      	ldr	r3, [pc, #252]	; (8001890 <CONTROL_Loop+0x5d8>)
 8001794:	22cc      	movs	r2, #204	; 0xcc
 8001796:	705a      	strb	r2, [r3, #1]
        buffer[ 2] = 17;
 8001798:	4b3d      	ldr	r3, [pc, #244]	; (8001890 <CONTROL_Loop+0x5d8>)
 800179a:	2211      	movs	r2, #17
 800179c:	709a      	strb	r2, [r3, #2]
        *((short *)&buffer[3]) = angle;
 800179e:	4b3d      	ldr	r3, [pc, #244]	; (8001894 <CONTROL_Loop+0x5dc>)
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	b212      	sxth	r2, r2
 80017a4:	801a      	strh	r2, [r3, #0]
        *((short *)&buffer[5]) = position;
 80017a6:	4a3c      	ldr	r2, [pc, #240]	; (8001898 <CONTROL_Loop+0x5e0>)
 80017a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017aa:	8013      	strh	r3, [r2, #0]
        *((short *)&buffer[7]) = command;
 80017ac:	4b3b      	ldr	r3, [pc, #236]	; (800189c <CONTROL_Loop+0x5e4>)
 80017ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b0:	b212      	sxth	r2, r2
 80017b2:	801a      	strh	r2, [r3, #0]
        *((unsigned char *)&buffer[9]) = frozen;
 80017b4:	4b3a      	ldr	r3, [pc, #232]	; (80018a0 <CONTROL_Loop+0x5e8>)
 80017b6:	781a      	ldrb	r2, [r3, #0]
 80017b8:	4b35      	ldr	r3, [pc, #212]	; (8001890 <CONTROL_Loop+0x5d8>)
 80017ba:	725a      	strb	r2, [r3, #9]
        *((unsigned int *)&buffer[10]) = timeMeasured;
 80017bc:	4a39      	ldr	r2, [pc, #228]	; (80018a4 <CONTROL_Loop+0x5ec>)
 80017be:	4b3a      	ldr	r3, [pc, #232]	; (80018a8 <CONTROL_Loop+0x5f0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6013      	str	r3, [r2, #0]
        *((unsigned short *)&buffer[14]) = (unsigned short)latency;
 80017c4:	4b31      	ldr	r3, [pc, #196]	; (800188c <CONTROL_Loop+0x5d4>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b38      	ldr	r3, [pc, #224]	; (80018ac <CONTROL_Loop+0x5f4>)
 80017ca:	b292      	uxth	r2, r2
 80017cc:	801a      	strh	r2, [r3, #0]

        buffer[16] = crc(buffer, 16);
 80017ce:	2110      	movs	r1, #16
 80017d0:	482f      	ldr	r0, [pc, #188]	; (8001890 <CONTROL_Loop+0x5d8>)
 80017d2:	f000 fd39 	bl	8002248 <crc>
 80017d6:	4603      	mov	r3, r0
 80017d8:	461a      	mov	r2, r3
 80017da:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <CONTROL_Loop+0x5d8>)
 80017dc:	741a      	strb	r2, [r3, #16]
        USART_SendBuffer(buffer, 17);
 80017de:	2111      	movs	r1, #17
 80017e0:	482b      	ldr	r0, [pc, #172]	; (8001890 <CONTROL_Loop+0x5d8>)
 80017e2:	f001 fd17 	bl	8003214 <USART_SendBuffer>

        if(newReceived) {
 80017e6:	4b28      	ldr	r3, [pc, #160]	; (8001888 <CONTROL_Loop+0x5d0>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00a      	beq.n	8001804 <CONTROL_Loop+0x54c>
        	timeSent = TIMER1_getSystemTime_Us();
 80017ee:	f001 fb97 	bl	8002f20 <TIMER1_getSystemTime_Us>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4a23      	ldr	r2, [pc, #140]	; (8001884 <CONTROL_Loop+0x5cc>)
 80017f6:	6013      	str	r3, [r2, #0]
        	timeReceived = 0;
 80017f8:	4b21      	ldr	r3, [pc, #132]	; (8001880 <CONTROL_Loop+0x5c8>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
        	newReceived = false;
 80017fe:	4b22      	ldr	r3, [pc, #136]	; (8001888 <CONTROL_Loop+0x5d0>)
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
        }
    }

	// Flash LED every second (500 ms on, 500 ms off)
	ledPeriodCnt++;
 8001804:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <CONTROL_Loop+0x5f8>)
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	3301      	adds	r3, #1
 800180a:	b29a      	uxth	r2, r3
 800180c:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <CONTROL_Loop+0x5f8>)
 800180e:	801a      	strh	r2, [r3, #0]
	if (ledPeriodCnt >= ledPeriod)
 8001810:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <CONTROL_Loop+0x5f8>)
 8001812:	881a      	ldrh	r2, [r3, #0]
 8001814:	4b27      	ldr	r3, [pc, #156]	; (80018b4 <CONTROL_Loop+0x5fc>)
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d316      	bcc.n	800184a <CONTROL_Loop+0x592>
	{
		ledPeriodCnt	= 0;
 800181c:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <CONTROL_Loop+0x5f8>)
 800181e:	2200      	movs	r2, #0
 8001820:	801a      	strh	r2, [r3, #0]
		ledState 		= !ledState;
 8001822:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <CONTROL_Loop+0x600>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	bf14      	ite	ne
 800182a:	2301      	movne	r3, #1
 800182c:	2300      	moveq	r3, #0
 800182e:	b2db      	uxtb	r3, r3
 8001830:	f083 0301 	eor.w	r3, r3, #1
 8001834:	b2db      	uxtb	r3, r3
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	b2da      	uxtb	r2, r3
 800183c:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <CONTROL_Loop+0x600>)
 800183e:	701a      	strb	r2, [r3, #0]
		Led_Enable(ledState);
 8001840:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <CONTROL_Loop+0x600>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f000 ff4f 	bl	80026e8 <Led_Enable>
	}
}
 800184a:	bf00      	nop
 800184c:	3730      	adds	r7, #48	; 0x30
 800184e:	46bd      	mov	sp, r7
 8001850:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001854:	ffffe549 	.word	0xffffe549
 8001858:	200002d0 	.word	0x200002d0
 800185c:	200000e0 	.word	0x200000e0
 8001860:	200002c8 	.word	0x200002c8
 8001864:	20000020 	.word	0x20000020
 8001868:	20000058 	.word	0x20000058
 800186c:	20000060 	.word	0x20000060
 8001870:	20000064 	.word	0x20000064
 8001874:	2000005c 	.word	0x2000005c
 8001878:	20000022 	.word	0x20000022
 800187c:	20000048 	.word	0x20000048
 8001880:	20000074 	.word	0x20000074
 8001884:	20000070 	.word	0x20000070
 8001888:	20000028 	.word	0x20000028
 800188c:	20000078 	.word	0x20000078
 8001890:	200000e4 	.word	0x200000e4
 8001894:	200000e7 	.word	0x200000e7
 8001898:	200000e9 	.word	0x200000e9
 800189c:	200000eb 	.word	0x200000eb
 80018a0:	200000c8 	.word	0x200000c8
 80018a4:	200000ee 	.word	0x200000ee
 80018a8:	2000006c 	.word	0x2000006c
 80018ac:	200000f2 	.word	0x200000f2
 80018b0:	20000102 	.word	0x20000102
 80018b4:	20000356 	.word	0x20000356
 80018b8:	20000104 	.word	0x20000104

080018bc <CONTROL_BackgroundTask>:

void CONTROL_BackgroundTask(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
	static unsigned int    	lastRead = 0;

	///////////////////////////////////////////////////
	// Collect samples of angular displacement
	///////////////////////////////////////////////////
	unsigned int now = TIMER1_getSystemTime_Us();
 80018c2:	f001 fb2d 	bl	8002f20 <TIMER1_getSystemTime_Us>
 80018c6:	60f8      	str	r0, [r7, #12]

	// int-overflow after 1h
	if (now < lastRead) {
 80018c8:	4ba3      	ldr	r3, [pc, #652]	; (8001b58 <CONTROL_BackgroundTask+0x29c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d203      	bcs.n	80018da <CONTROL_BackgroundTask+0x1e>
		lastRead = now;
 80018d2:	4aa1      	ldr	r2, [pc, #644]	; (8001b58 <CONTROL_BackgroundTask+0x29c>)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	e02b      	b.n	8001932 <CONTROL_BackgroundTask+0x76>
	}
	// read every ca. 100us
	else if (now > lastRead + CONTROL_ANGLE_MEASUREMENT_INTERVAL_US) {
 80018da:	4b9f      	ldr	r3, [pc, #636]	; (8001b58 <CONTROL_BackgroundTask+0x29c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	3364      	adds	r3, #100	; 0x64
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d925      	bls.n	8001932 <CONTROL_BackgroundTask+0x76>
		// conversion takes 18us
		angleSamples[angleSampIndex] = ANGLE_Read();
 80018e6:	f7ff fc2d 	bl	8001144 <ANGLE_Read>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4619      	mov	r1, r3
 80018ee:	4b9b      	ldr	r3, [pc, #620]	; (8001b5c <CONTROL_BackgroundTask+0x2a0>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	4b9a      	ldr	r3, [pc, #616]	; (8001b60 <CONTROL_BackgroundTask+0x2a4>)
 80018f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		angleSamplesTimestamp[angleSampIndex] = now;
 80018fa:	4b98      	ldr	r3, [pc, #608]	; (8001b5c <CONTROL_BackgroundTask+0x2a0>)
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	4619      	mov	r1, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4a98      	ldr	r2, [pc, #608]	; (8001b64 <CONTROL_BackgroundTask+0x2a8>)
 8001904:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		angleSampIndex = (++angleSampIndex >= angle_averageLen ? 0 : angleSampIndex);
 8001908:	4b94      	ldr	r3, [pc, #592]	; (8001b5c <CONTROL_BackgroundTask+0x2a0>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	b29a      	uxth	r2, r3
 8001910:	4b92      	ldr	r3, [pc, #584]	; (8001b5c <CONTROL_BackgroundTask+0x2a0>)
 8001912:	801a      	strh	r2, [r3, #0]
 8001914:	4b91      	ldr	r3, [pc, #580]	; (8001b5c <CONTROL_BackgroundTask+0x2a0>)
 8001916:	881a      	ldrh	r2, [r3, #0]
 8001918:	4b93      	ldr	r3, [pc, #588]	; (8001b68 <CONTROL_BackgroundTask+0x2ac>)
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d202      	bcs.n	8001926 <CONTROL_BackgroundTask+0x6a>
 8001920:	4b8e      	ldr	r3, [pc, #568]	; (8001b5c <CONTROL_BackgroundTask+0x2a0>)
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	e000      	b.n	8001928 <CONTROL_BackgroundTask+0x6c>
 8001926:	2300      	movs	r3, #0
 8001928:	4a8c      	ldr	r2, [pc, #560]	; (8001b5c <CONTROL_BackgroundTask+0x2a0>)
 800192a:	8013      	strh	r3, [r2, #0]

		lastRead = now;
 800192c:	4a8a      	ldr	r2, [pc, #552]	; (8001b58 <CONTROL_BackgroundTask+0x29c>)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6013      	str	r3, [r2, #0]
	}

	///////////////////////////////////////////////////
	// Apoply Delayed Control Command
	///////////////////////////////////////////////////
	if (controlLatencyEnable && controlLatencyTimestampUs >= TIMER1_getSystemTime_Us()) {
 8001932:	4b8e      	ldr	r3, [pc, #568]	; (8001b6c <CONTROL_BackgroundTask+0x2b0>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00e      	beq.n	8001958 <CONTROL_BackgroundTask+0x9c>
 800193a:	f001 faf1 	bl	8002f20 <TIMER1_getSystemTime_Us>
 800193e:	4603      	mov	r3, r0
 8001940:	4a8b      	ldr	r2, [pc, #556]	; (8001b70 <CONTROL_BackgroundTask+0x2b4>)
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	4293      	cmp	r3, r2
 8001946:	d807      	bhi.n	8001958 <CONTROL_BackgroundTask+0x9c>
		MOTOR_SetSpeed(controlCommand);
 8001948:	4b8a      	ldr	r3, [pc, #552]	; (8001b74 <CONTROL_BackgroundTask+0x2b8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f001 f887 	bl	8002a60 <MOTOR_SetSpeed>
		controlLatencyEnable = false;
 8001952:	4b86      	ldr	r3, [pc, #536]	; (8001b6c <CONTROL_BackgroundTask+0x2b0>)
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
	}

	///////////////////////////////////////////////////
	// Process Commands from PC
	///////////////////////////////////////////////////
	if (USART_ReceiveAsync(&rxBuffer[rxCnt]))
 8001958:	4b87      	ldr	r3, [pc, #540]	; (8001b78 <CONTROL_BackgroundTask+0x2bc>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a87      	ldr	r2, [pc, #540]	; (8001b7c <CONTROL_BackgroundTask+0x2c0>)
 800195e:	4413      	add	r3, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f001 fbd9 	bl	8003118 <USART_ReceiveAsync>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d004      	beq.n	8001976 <CONTROL_BackgroundTask+0xba>
		rxCnt++;
 800196c:	4b82      	ldr	r3, [pc, #520]	; (8001b78 <CONTROL_BackgroundTask+0x2bc>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	3301      	adds	r3, #1
 8001972:	4a81      	ldr	r2, [pc, #516]	; (8001b78 <CONTROL_BackgroundTask+0x2bc>)
 8001974:	6013      	str	r3, [r2, #0]

	// Buffer should have at least 4 bytes
	if (rxCnt >= 4)
 8001976:	4b80      	ldr	r3, [pc, #512]	; (8001b78 <CONTROL_BackgroundTask+0x2bc>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2b03      	cmp	r3, #3
 800197c:	f240 811a 	bls.w	8001bb4 <CONTROL_BackgroundTask+0x2f8>
	{
		idx = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	613b      	str	r3, [r7, #16]

		// Message must start with SOF character
    	if (rxBuffer[0] == SERIAL_SOF)
 8001984:	4b7d      	ldr	r3, [pc, #500]	; (8001b7c <CONTROL_BackgroundTask+0x2c0>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2baa      	cmp	r3, #170	; 0xaa
 800198a:	f040 80c6 	bne.w	8001b1a <CONTROL_BackgroundTask+0x25e>
		{
			// Packet length must be less than the max
			pktLen = rxBuffer[2];
 800198e:	4b7b      	ldr	r3, [pc, #492]	; (8001b7c <CONTROL_BackgroundTask+0x2c0>)
 8001990:	789b      	ldrb	r3, [r3, #2]
 8001992:	60bb      	str	r3, [r7, #8]
			if ((pktLen <= SERIAL_MAX_PKT_LENGTH) && (pktLen >= 4))
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	2b20      	cmp	r3, #32
 8001998:	f200 80bc 	bhi.w	8001b14 <CONTROL_BackgroundTask+0x258>
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	2b03      	cmp	r3, #3
 80019a0:	f240 80b8 	bls.w	8001b14 <CONTROL_BackgroundTask+0x258>
			{
				// Receive entire message packet (including CRC)
				if (rxCnt >= pktLen)
 80019a4:	4b74      	ldr	r3, [pc, #464]	; (8001b78 <CONTROL_BackgroundTask+0x2bc>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	f200 80b7 	bhi.w	8001b1e <CONTROL_BackgroundTask+0x262>
				{
					// Validate message integrity
					if (crcIsValid(rxBuffer, pktLen-1, rxBuffer[pktLen-1]))
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	1e59      	subs	r1, r3, #1
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	4a70      	ldr	r2, [pc, #448]	; (8001b7c <CONTROL_BackgroundTask+0x2c0>)
 80019ba:	5cd3      	ldrb	r3, [r2, r3]
 80019bc:	461a      	mov	r2, r3
 80019be:	486f      	ldr	r0, [pc, #444]	; (8001b7c <CONTROL_BackgroundTask+0x2c0>)
 80019c0:	f000 fc78 	bl	80022b4 <crcIsValid>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 80a1 	beq.w	8001b0e <CONTROL_BackgroundTask+0x252>
					{
						// Process message
						switch (rxBuffer[1])
 80019cc:	4b6b      	ldr	r3, [pc, #428]	; (8001b7c <CONTROL_BackgroundTask+0x2c0>)
 80019ce:	785b      	ldrb	r3, [r3, #1]
 80019d0:	3bc0      	subs	r3, #192	; 0xc0
 80019d2:	2b09      	cmp	r3, #9
 80019d4:	f200 8085 	bhi.w	8001ae2 <CONTROL_BackgroundTask+0x226>
 80019d8:	a201      	add	r2, pc, #4	; (adr r2, 80019e0 <CONTROL_BackgroundTask+0x124>)
 80019da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019de:	bf00      	nop
 80019e0:	08001a09 	.word	0x08001a09
 80019e4:	08001a13 	.word	0x08001a13
 80019e8:	08001a2f 	.word	0x08001a2f
 80019ec:	08001a3f 	.word	0x08001a3f
 80019f0:	08001a5b 	.word	0x08001a5b
 80019f4:	08001a69 	.word	0x08001a69
 80019f8:	08001a75 	.word	0x08001a75
 80019fc:	08001a83 	.word	0x08001a83
 8001a00:	08001a8f 	.word	0x08001a8f
 8001a04:	08001ad5 	.word	0x08001ad5
						{
							case CMD_PING:
							{
								cmd_Ping(rxBuffer, pktLen);
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	485c      	ldr	r0, [pc, #368]	; (8001b7c <CONTROL_BackgroundTask+0x2c0>)
 8001a0c:	f000 f8da 	bl	8001bc4 <cmd_Ping>
								break;
 8001a10:	e07a      	b.n	8001b08 <CONTROL_BackgroundTask+0x24c>
							}

                            case CMD_STREAM_ON:
                            {
                                if (pktLen == 5)
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2b05      	cmp	r3, #5
 8001a16:	d166      	bne.n	8001ae6 <CONTROL_BackgroundTask+0x22a>
								{
									cmd_StreamOutput(rxBuffer[3] != 0);
 8001a18:	4b58      	ldr	r3, [pc, #352]	; (8001b7c <CONTROL_BackgroundTask+0x2c0>)
 8001a1a:	78db      	ldrb	r3, [r3, #3]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	bf14      	ite	ne
 8001a20:	2301      	movne	r3, #1
 8001a22:	2300      	moveq	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 f8de 	bl	8001be8 <cmd_StreamOutput>
								}
                                break;
 8001a2c:	e05b      	b.n	8001ae6 <CONTROL_BackgroundTask+0x22a>
                            }

							case CMD_CALIBRATE:
							{
								if (pktLen == 4)
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d15a      	bne.n	8001aea <CONTROL_BackgroundTask+0x22e>
								{
									cmd_Calibrate(rxBuffer, pktLen);
 8001a34:	68b9      	ldr	r1, [r7, #8]
 8001a36:	4851      	ldr	r0, [pc, #324]	; (8001b7c <CONTROL_BackgroundTask+0x2c0>)
 8001a38:	f000 f8ea 	bl	8001c10 <cmd_Calibrate>
								}
								break;
 8001a3c:	e055      	b.n	8001aea <CONTROL_BackgroundTask+0x22e>
							}

							case CMD_CONTROL_MODE:
							{
								if (pktLen == 5)
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	2b05      	cmp	r3, #5
 8001a42:	d154      	bne.n	8001aee <CONTROL_BackgroundTask+0x232>
								{
									cmd_ControlMode(rxBuffer[3] != 0);
 8001a44:	4b4d      	ldr	r3, [pc, #308]	; (8001b7c <CONTROL_BackgroundTask+0x2c0>)
 8001a46:	78db      	ldrb	r3, [r3, #3]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bf14      	ite	ne
 8001a4c:	2301      	movne	r3, #1
 8001a4e:	2300      	moveq	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 f9fa 	bl	8001e4c <cmd_ControlMode>
								}
								break;
 8001a58:	e049      	b.n	8001aee <CONTROL_BackgroundTask+0x232>
							}

							case CMD_SET_ANGLE_CONFIG:
							{
								if (pktLen == 24)
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	2b18      	cmp	r3, #24
 8001a5e:	d148      	bne.n	8001af2 <CONTROL_BackgroundTask+0x236>
								{
									cmd_SetAngleConfig(&rxBuffer[3]);
 8001a60:	4847      	ldr	r0, [pc, #284]	; (8001b80 <CONTROL_BackgroundTask+0x2c4>)
 8001a62:	f000 fa59 	bl	8001f18 <cmd_SetAngleConfig>
								}
								break;
 8001a66:	e044      	b.n	8001af2 <CONTROL_BackgroundTask+0x236>
							}

							case CMD_GET_ANGLE_CONFIG:
							{
								if (pktLen == 4)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d143      	bne.n	8001af6 <CONTROL_BackgroundTask+0x23a>
								{
									cmd_GetAngleConfig();
 8001a6e:	f000 fa89 	bl	8001f84 <cmd_GetAngleConfig>
								}
								break;
 8001a72:	e040      	b.n	8001af6 <CONTROL_BackgroundTask+0x23a>
							}

							case CMD_SET_POSITION_CONFIG:
							{
								if (pktLen == 20)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	2b14      	cmp	r3, #20
 8001a78:	d13f      	bne.n	8001afa <CONTROL_BackgroundTask+0x23e>
								{
									cmd_SetPositionConfig(&rxBuffer[3]);
 8001a7a:	4841      	ldr	r0, [pc, #260]	; (8001b80 <CONTROL_BackgroundTask+0x2c4>)
 8001a7c:	f000 fae6 	bl	800204c <cmd_SetPositionConfig>
								}
								break;
 8001a80:	e03b      	b.n	8001afa <CONTROL_BackgroundTask+0x23e>
							}

							case CMD_GET_POSITION_CONFIG:
							{
								if (pktLen == 4)
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d13a      	bne.n	8001afe <CONTROL_BackgroundTask+0x242>
								{
									cmd_GetPositionConfig();
 8001a88:	f000 fb24 	bl	80020d4 <cmd_GetPositionConfig>
								}
								break;
 8001a8c:	e037      	b.n	8001afe <CONTROL_BackgroundTask+0x242>
							}

							case CMD_SET_MOTOR:
							{
								if (pktLen == 6)
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2b06      	cmp	r3, #6
 8001a92:	d136      	bne.n	8001b02 <CONTROL_BackgroundTask+0x246>
								{
									motorCmd = (((short)rxBuffer[4])<<8) | ((short)rxBuffer[3]);
 8001a94:	4b39      	ldr	r3, [pc, #228]	; (8001b7c <CONTROL_BackgroundTask+0x2c0>)
 8001a96:	791b      	ldrb	r3, [r3, #4]
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	b21a      	sxth	r2, r3
 8001a9c:	4b37      	ldr	r3, [pc, #220]	; (8001b7c <CONTROL_BackgroundTask+0x2c0>)
 8001a9e:	78db      	ldrb	r3, [r3, #3]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	80fb      	strh	r3, [r7, #6]
									timeReceived = TIMER1_getSystemTime_Us();
 8001aa6:	f001 fa3b 	bl	8002f20 <TIMER1_getSystemTime_Us>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4a35      	ldr	r2, [pc, #212]	; (8001b84 <CONTROL_BackgroundTask+0x2c8>)
 8001aae:	6013      	str	r3, [r2, #0]
									newReceived = true;
 8001ab0:	4b35      	ldr	r3, [pc, #212]	; (8001b88 <CONTROL_BackgroundTask+0x2cc>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	701a      	strb	r2, [r3, #0]

									if(controlSync) {
 8001ab6:	4b35      	ldr	r3, [pc, #212]	; (8001b8c <CONTROL_BackgroundTask+0x2d0>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d004      	beq.n	8001ac8 <CONTROL_BackgroundTask+0x20c>
										controlCommand = motorCmd;
 8001abe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ac2:	4a2c      	ldr	r2, [pc, #176]	; (8001b74 <CONTROL_BackgroundTask+0x2b8>)
 8001ac4:	6013      	str	r3, [r2, #0]
									} else {
										cmd_SetMotor(motorCmd);
									}
								}
								break;
 8001ac6:	e01c      	b.n	8001b02 <CONTROL_BackgroundTask+0x246>
										cmd_SetMotor(motorCmd);
 8001ac8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 fb55 	bl	800217c <cmd_SetMotor>
								break;
 8001ad2:	e016      	b.n	8001b02 <CONTROL_BackgroundTask+0x246>
							}

							case CMD_SET_CONTROL_CONFIG:
							{
								if (pktLen == 11)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2b0b      	cmp	r3, #11
 8001ad8:	d115      	bne.n	8001b06 <CONTROL_BackgroundTask+0x24a>
								{
									cmd_SetControlConfig(&rxBuffer[3]);
 8001ada:	4829      	ldr	r0, [pc, #164]	; (8001b80 <CONTROL_BackgroundTask+0x2c4>)
 8001adc:	f000 fb84 	bl	80021e8 <cmd_SetControlConfig>
								}
								break;
 8001ae0:	e011      	b.n	8001b06 <CONTROL_BackgroundTask+0x24a>
							}

							default:
							{
								break;
 8001ae2:	bf00      	nop
 8001ae4:	e010      	b.n	8001b08 <CONTROL_BackgroundTask+0x24c>
                                break;
 8001ae6:	bf00      	nop
 8001ae8:	e00e      	b.n	8001b08 <CONTROL_BackgroundTask+0x24c>
								break;
 8001aea:	bf00      	nop
 8001aec:	e00c      	b.n	8001b08 <CONTROL_BackgroundTask+0x24c>
								break;
 8001aee:	bf00      	nop
 8001af0:	e00a      	b.n	8001b08 <CONTROL_BackgroundTask+0x24c>
								break;
 8001af2:	bf00      	nop
 8001af4:	e008      	b.n	8001b08 <CONTROL_BackgroundTask+0x24c>
								break;
 8001af6:	bf00      	nop
 8001af8:	e006      	b.n	8001b08 <CONTROL_BackgroundTask+0x24c>
								break;
 8001afa:	bf00      	nop
 8001afc:	e004      	b.n	8001b08 <CONTROL_BackgroundTask+0x24c>
								break;
 8001afe:	bf00      	nop
 8001b00:	e002      	b.n	8001b08 <CONTROL_BackgroundTask+0x24c>
								break;
 8001b02:	bf00      	nop
 8001b04:	e000      	b.n	8001b08 <CONTROL_BackgroundTask+0x24c>
								break;
 8001b06:	bf00      	nop
							}
						}

						idx = pktLen;   // Trim message
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	613b      	str	r3, [r7, #16]
				if (rxCnt >= pktLen)
 8001b0c:	e007      	b.n	8001b1e <CONTROL_BackgroundTask+0x262>
					}
					else
					{
						idx = 1;  // Trim SOF and start looking for the next packet
 8001b0e:	2301      	movs	r3, #1
 8001b10:	613b      	str	r3, [r7, #16]
				if (rxCnt >= pktLen)
 8001b12:	e004      	b.n	8001b1e <CONTROL_BackgroundTask+0x262>
					}
				}
			}
			else
			{
				idx = 1;  // Trim SOF and start looking for the next packet
 8001b14:	2301      	movs	r3, #1
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	e001      	b.n	8001b1e <CONTROL_BackgroundTask+0x262>
			}
		}
		else
		{
			idx = 1;  // Trim SOF and start looking for the next packet
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	613b      	str	r3, [r7, #16]
		}

		// Shift buffer until first character is SOF
		if (idx != 0)
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d047      	beq.n	8001bb4 <CONTROL_BackgroundTask+0x2f8>
		{
			for (; idx < rxCnt; idx++)
 8001b24:	e008      	b.n	8001b38 <CONTROL_BackgroundTask+0x27c>
			{
				if (rxBuffer[idx] == SERIAL_SOF)
 8001b26:	4a15      	ldr	r2, [pc, #84]	; (8001b7c <CONTROL_BackgroundTask+0x2c0>)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2baa      	cmp	r3, #170	; 0xaa
 8001b30:	d008      	beq.n	8001b44 <CONTROL_BackgroundTask+0x288>
			for (; idx < rxCnt; idx++)
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	3301      	adds	r3, #1
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <CONTROL_BackgroundTask+0x2bc>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d3f1      	bcc.n	8001b26 <CONTROL_BackgroundTask+0x26a>
 8001b42:	e000      	b.n	8001b46 <CONTROL_BackgroundTask+0x28a>
				{
					break;
 8001b44:	bf00      	nop
				}
			}

			rxCnt -= idx;
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <CONTROL_BackgroundTask+0x2bc>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <CONTROL_BackgroundTask+0x2bc>)
 8001b50:	6013      	str	r3, [r2, #0]
			for (i = 0; i < rxCnt; i++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	e028      	b.n	8001baa <CONTROL_BackgroundTask+0x2ee>
 8001b58:	20000108 	.word	0x20000108
 8001b5c:	20000068 	.word	0x20000068
 8001b60:	200002d4 	.word	0x200002d4
 8001b64:	20000244 	.word	0x20000244
 8001b68:	20000002 	.word	0x20000002
 8001b6c:	2000005c 	.word	0x2000005c
 8001b70:	20000060 	.word	0x20000060
 8001b74:	20000064 	.word	0x20000064
 8001b78:	2000010c 	.word	0x2000010c
 8001b7c:	20000084 	.word	0x20000084
 8001b80:	20000087 	.word	0x20000087
 8001b84:	20000074 	.word	0x20000074
 8001b88:	20000028 	.word	0x20000028
 8001b8c:	20000022 	.word	0x20000022
			{
				rxBuffer[i] = rxBuffer[idx+i];
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	4413      	add	r3, r2
 8001b96:	4a09      	ldr	r2, [pc, #36]	; (8001bbc <CONTROL_BackgroundTask+0x300>)
 8001b98:	5cd1      	ldrb	r1, [r2, r3]
 8001b9a:	4a08      	ldr	r2, [pc, #32]	; (8001bbc <CONTROL_BackgroundTask+0x300>)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	460a      	mov	r2, r1
 8001ba2:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < rxCnt; i++)
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <CONTROL_BackgroundTask+0x304>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d3ed      	bcc.n	8001b90 <CONTROL_BackgroundTask+0x2d4>
			}
		}
	}
}
 8001bb4:	bf00      	nop
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000084 	.word	0x20000084
 8001bc0:	2000010c 	.word	0x2000010c

08001bc4 <cmd_Ping>:

void cmd_Ping(const unsigned char * buff, unsigned int len)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
	__disable_irq();
 8001bce:	f7ff fae4 	bl	800119a <__disable_irq>
	USART_SendBuffer(buff, len);
 8001bd2:	6839      	ldr	r1, [r7, #0]
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f001 fb1d 	bl	8003214 <USART_SendBuffer>
	__enable_irq();
 8001bda:	f7ff fad7 	bl	800118c <__enable_irq>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <cmd_StreamOutput>:

void cmd_StreamOutput(bool en)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
	__disable_irq();
 8001bf2:	f7ff fad2 	bl	800119a <__disable_irq>
	streamEnable = en;
 8001bf6:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <cmd_StreamOutput+0x20>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	7013      	strb	r3, [r2, #0]
	__enable_irq();
 8001bfc:	f7ff fac6 	bl	800118c <__enable_irq>
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000048 	.word	0x20000048
 8001c0c:	00000000 	.word	0x00000000

08001c10 <cmd_Calibrate>:

void cmd_Calibrate(const unsigned char * buff, unsigned int len)
{
 8001c10:	b5b0      	push	{r4, r5, r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
	int pos;
	int diff;
	float fDiff;
	static unsigned char	buffer[30];

	__disable_irq();
 8001c1a:	f7ff fabe 	bl	800119a <__disable_irq>
	MOTOR_Stop();
 8001c1e:	f000 ff09 	bl	8002a34 <MOTOR_Stop>
	Led_Enable(true);
 8001c22:	2001      	movs	r0, #1
 8001c24:	f000 fd60 	bl	80026e8 <Led_Enable>

	// Get left limit
	SYS_DelayMS(100);
 8001c28:	2064      	movs	r0, #100	; 0x64
 8001c2a:	f001 f8cf 	bl	8002dcc <SYS_DelayMS>
	positionLimitLeft = ENCODER_Read();
 8001c2e:	f000 fbe3 	bl	80023f8 <ENCODER_Read>
 8001c32:	4603      	mov	r3, r0
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b7a      	ldr	r3, [pc, #488]	; (8001e20 <cmd_Calibrate+0x210>)
 8001c38:	601a      	str	r2, [r3, #0]
	MOTOR_SetSpeed(-SPEED);
 8001c3a:	487a      	ldr	r0, [pc, #488]	; (8001e24 <cmd_Calibrate+0x214>)
 8001c3c:	f000 ff10 	bl	8002a60 <MOTOR_SetSpeed>

	do {
		SYS_DelayMS(100);
 8001c40:	2064      	movs	r0, #100	; 0x64
 8001c42:	f001 f8c3 	bl	8002dcc <SYS_DelayMS>
		pos  = ENCODER_Read();
 8001c46:	f000 fbd7 	bl	80023f8 <ENCODER_Read>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	617b      	str	r3, [r7, #20]
		diff = pos - positionLimitLeft;
 8001c4e:	4b74      	ldr	r3, [pc, #464]	; (8001e20 <cmd_Calibrate+0x210>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	613b      	str	r3, [r7, #16]
		positionLimitLeft = pos;
 8001c58:	4a71      	ldr	r2, [pc, #452]	; (8001e20 <cmd_Calibrate+0x210>)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	6013      	str	r3, [r2, #0]

		// if we don't move enough, must have hit limit
	} while(abs(diff) > 15);
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	bfb8      	it	lt
 8001c64:	425b      	neglt	r3, r3
 8001c66:	2b0f      	cmp	r3, #15
 8001c68:	dcea      	bgt.n	8001c40 <cmd_Calibrate+0x30>

	MOTOR_Stop();
 8001c6a:	f000 fee3 	bl	8002a34 <MOTOR_Stop>
	Led_Enable(false);
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f000 fd3a 	bl	80026e8 <Led_Enable>

	// Get right limit
	SYS_DelayMS(100);
 8001c74:	2064      	movs	r0, #100	; 0x64
 8001c76:	f001 f8a9 	bl	8002dcc <SYS_DelayMS>
	positionLimitRight = ENCODER_Read();
 8001c7a:	f000 fbbd 	bl	80023f8 <ENCODER_Read>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b69      	ldr	r3, [pc, #420]	; (8001e28 <cmd_Calibrate+0x218>)
 8001c84:	601a      	str	r2, [r3, #0]
	MOTOR_SetSpeed(SPEED);
 8001c86:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001c8a:	f000 fee9 	bl	8002a60 <MOTOR_SetSpeed>

	do {
		SYS_DelayMS(100);
 8001c8e:	2064      	movs	r0, #100	; 0x64
 8001c90:	f001 f89c 	bl	8002dcc <SYS_DelayMS>
		pos  = ENCODER_Read();
 8001c94:	f000 fbb0 	bl	80023f8 <ENCODER_Read>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	617b      	str	r3, [r7, #20]
		diff = pos - positionLimitRight;
 8001c9c:	4b62      	ldr	r3, [pc, #392]	; (8001e28 <cmd_Calibrate+0x218>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	613b      	str	r3, [r7, #16]
		positionLimitRight = pos;
 8001ca6:	4a60      	ldr	r2, [pc, #384]	; (8001e28 <cmd_Calibrate+0x218>)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	6013      	str	r3, [r2, #0]

		// if we don't move enough, must have hit limit
	} while(abs(diff) > 15);
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	bfb8      	it	lt
 8001cb2:	425b      	neglt	r3, r3
 8001cb4:	2b0f      	cmp	r3, #15
 8001cb6:	dcea      	bgt.n	8001c8e <cmd_Calibrate+0x7e>

	MOTOR_Stop();
 8001cb8:	f000 febc 	bl	8002a34 <MOTOR_Stop>

	// Move pendulum to the centre (roughly)
	Led_Enable(true);
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f000 fd13 	bl	80026e8 <Led_Enable>
	SYS_DelayMS(200);
 8001cc2:	20c8      	movs	r0, #200	; 0xc8
 8001cc4:	f001 f882 	bl	8002dcc <SYS_DelayMS>
	// invert reading for original motor
	if (positionLimitRight < positionLimitLeft) {
 8001cc8:	4b57      	ldr	r3, [pc, #348]	; (8001e28 <cmd_Calibrate+0x218>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b54      	ldr	r3, [pc, #336]	; (8001e20 <cmd_Calibrate+0x210>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	da0e      	bge.n	8001cf2 <cmd_Calibrate+0xe2>
		int temp = positionLimitRight;
 8001cd4:	4b54      	ldr	r3, [pc, #336]	; (8001e28 <cmd_Calibrate+0x218>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60fb      	str	r3, [r7, #12]
		positionLimitRight = positionLimitLeft;
 8001cda:	4b51      	ldr	r3, [pc, #324]	; (8001e20 <cmd_Calibrate+0x210>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a52      	ldr	r2, [pc, #328]	; (8001e28 <cmd_Calibrate+0x218>)
 8001ce0:	6013      	str	r3, [r2, #0]
		positionLimitLeft = temp;
 8001ce2:	4a4f      	ldr	r2, [pc, #316]	; (8001e20 <cmd_Calibrate+0x210>)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6013      	str	r3, [r2, #0]
		encoderDirection = -1;
 8001ce8:	4b50      	ldr	r3, [pc, #320]	; (8001e2c <cmd_Calibrate+0x21c>)
 8001cea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	e002      	b.n	8001cf8 <cmd_Calibrate+0xe8>
	} else
		encoderDirection = 1;
 8001cf2:	4b4e      	ldr	r3, [pc, #312]	; (8001e2c <cmd_Calibrate+0x21c>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]
	positionCentre = (positionLimitRight + positionLimitLeft) / 2;			// average limits
 8001cf8:	4b4b      	ldr	r3, [pc, #300]	; (8001e28 <cmd_Calibrate+0x218>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b48      	ldr	r3, [pc, #288]	; (8001e20 <cmd_Calibrate+0x210>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4413      	add	r3, r2
 8001d02:	0fda      	lsrs	r2, r3, #31
 8001d04:	4413      	add	r3, r2
 8001d06:	105b      	asrs	r3, r3, #1
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b49      	ldr	r3, [pc, #292]	; (8001e30 <cmd_Calibrate+0x220>)
 8001d0c:	601a      	str	r2, [r3, #0]

	// Slower to get back to middle
	MOTOR_SetSpeed(-SPEED/2);
 8001d0e:	4849      	ldr	r0, [pc, #292]	; (8001e34 <cmd_Calibrate+0x224>)
 8001d10:	f000 fea6 	bl	8002a60 <MOTOR_SetSpeed>
	do {
		fDiff = 2.0 * abs(ENCODER_Read() - positionCentre) / abs(positionLimitRight - positionLimitLeft);
 8001d14:	f000 fb70 	bl	80023f8 <ENCODER_Read>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4b44      	ldr	r3, [pc, #272]	; (8001e30 <cmd_Calibrate+0x220>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	bfb8      	it	lt
 8001d26:	425b      	neglt	r3, r3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fc27 	bl	800057c <__aeabi_i2d>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	f7fe fad7 	bl	80002e4 <__adddf3>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4614      	mov	r4, r2
 8001d3c:	461d      	mov	r5, r3
 8001d3e:	4b3a      	ldr	r3, [pc, #232]	; (8001e28 <cmd_Calibrate+0x218>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	4b37      	ldr	r3, [pc, #220]	; (8001e20 <cmd_Calibrate+0x210>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	bfb8      	it	lt
 8001d4c:	425b      	neglt	r3, r3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fc14 	bl	800057c <__aeabi_i2d>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4620      	mov	r0, r4
 8001d5a:	4629      	mov	r1, r5
 8001d5c:	f7fe fda2 	bl	80008a4 <__aeabi_ddiv>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	f7fe ff34 	bl	8000bd4 <__aeabi_d2f>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	60bb      	str	r3, [r7, #8]
		// Slow Down even more to get more accurately to the middle
		if(fDiff < 1e-1) {
 8001d70:	68b8      	ldr	r0, [r7, #8]
 8001d72:	f7fe fc15 	bl	80005a0 <__aeabi_f2d>
 8001d76:	a326      	add	r3, pc, #152	; (adr r3, 8001e10 <cmd_Calibrate+0x200>)
 8001d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7c:	f7fe feda 	bl	8000b34 <__aeabi_dcmplt>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d002      	beq.n	8001d8c <cmd_Calibrate+0x17c>
			MOTOR_SetSpeed(-SPEED/4);
 8001d86:	482c      	ldr	r0, [pc, #176]	; (8001e38 <cmd_Calibrate+0x228>)
 8001d88:	f000 fe6a 	bl	8002a60 <MOTOR_SetSpeed>
		}
	} while(fDiff > 5e-4);
 8001d8c:	68b8      	ldr	r0, [r7, #8]
 8001d8e:	f7fe fc07 	bl	80005a0 <__aeabi_f2d>
 8001d92:	a321      	add	r3, pc, #132	; (adr r3, 8001e18 <cmd_Calibrate+0x208>)
 8001d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d98:	f7fe feea 	bl	8000b70 <__aeabi_dcmpgt>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1b8      	bne.n	8001d14 <cmd_Calibrate+0x104>
	MOTOR_Stop();
 8001da2:	f000 fe47 	bl	8002a34 <MOTOR_Stop>

	angle_setPoint = encoderDirection==1 ? CONTROL_ANGLE_SET_POINT_LEFT : CONTROL_ANGLE_SET_POINT_RIGHT;
 8001da6:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <cmd_Calibrate+0x21c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d102      	bne.n	8001db4 <cmd_Calibrate+0x1a4>
 8001dae:	f640 5214 	movw	r2, #3348	; 0xd14
 8001db2:	e001      	b.n	8001db8 <cmd_Calibrate+0x1a8>
 8001db4:	f640 424e 	movw	r2, #3150	; 0xc4e
 8001db8:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <cmd_Calibrate+0x22c>)
 8001dba:	801a      	strh	r2, [r3, #0]

	SYS_DelayMS(100);
 8001dbc:	2064      	movs	r0, #100	; 0x64
 8001dbe:	f001 f805 	bl	8002dcc <SYS_DelayMS>

    buffer[ 0] = SERIAL_SOF;
 8001dc2:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <cmd_Calibrate+0x230>)
 8001dc4:	22aa      	movs	r2, #170	; 0xaa
 8001dc6:	701a      	strb	r2, [r3, #0]
    buffer[ 1] = CMD_CALIBRATE;
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <cmd_Calibrate+0x230>)
 8001dca:	22c2      	movs	r2, #194	; 0xc2
 8001dcc:	705a      	strb	r2, [r3, #1]
    buffer[ 2] = 5;
 8001dce:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <cmd_Calibrate+0x230>)
 8001dd0:	2205      	movs	r2, #5
 8001dd2:	709a      	strb	r2, [r3, #2]
    *((signed char *)&buffer[3]) = (signed char)encoderDirection;
 8001dd4:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <cmd_Calibrate+0x21c>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <cmd_Calibrate+0x234>)
 8001dda:	b252      	sxtb	r2, r2
 8001ddc:	701a      	strb	r2, [r3, #0]
    buffer[4] = crc(buffer, 4);
 8001dde:	2104      	movs	r1, #4
 8001de0:	4817      	ldr	r0, [pc, #92]	; (8001e40 <cmd_Calibrate+0x230>)
 8001de2:	f000 fa31 	bl	8002248 <crc>
 8001de6:	4603      	mov	r3, r0
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <cmd_Calibrate+0x230>)
 8001dec:	711a      	strb	r2, [r3, #4]
    USART_SendBuffer(buffer, 5);
 8001dee:	2105      	movs	r1, #5
 8001df0:	4813      	ldr	r0, [pc, #76]	; (8001e40 <cmd_Calibrate+0x230>)
 8001df2:	f001 fa0f 	bl	8003214 <USART_SendBuffer>

	isCalibrated = true;
 8001df6:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <cmd_Calibrate+0x238>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	701a      	strb	r2, [r3, #0]
	Led_Enable(false);
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f000 fc73 	bl	80026e8 <Led_Enable>
	__enable_irq();
 8001e02:	f7ff f9c3 	bl	800118c <__enable_irq>
}
 8001e06:	bf00      	nop
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	9999999a 	.word	0x9999999a
 8001e14:	3fb99999 	.word	0x3fb99999
 8001e18:	d2f1a9fc 	.word	0xd2f1a9fc
 8001e1c:	3f40624d 	.word	0x3f40624d
 8001e20:	200002d0 	.word	0x200002d0
 8001e24:	fffff448 	.word	0xfffff448
 8001e28:	200002c8 	.word	0x200002c8
 8001e2c:	20000024 	.word	0x20000024
 8001e30:	2000035c 	.word	0x2000035c
 8001e34:	fffffa24 	.word	0xfffffa24
 8001e38:	fffffd12 	.word	0xfffffd12
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	20000110 	.word	0x20000110
 8001e44:	20000113 	.word	0x20000113
 8001e48:	20000023 	.word	0x20000023

08001e4c <cmd_ControlMode>:

void cmd_ControlMode(bool en)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
    if(en && !isCalibrated) {
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00a      	beq.n	8001e72 <cmd_ControlMode+0x26>
 8001e5c:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <cmd_ControlMode+0xac>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	f083 0301 	eor.w	r3, r3, #1
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <cmd_ControlMode+0x26>
    	cmd_Calibrate(0, 0);
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f7ff fecf 	bl	8001c10 <cmd_Calibrate>
    }
    __disable_irq();
 8001e72:	f7ff f992 	bl	800119a <__disable_irq>
	if (en && !controlEnabled)
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d01d      	beq.n	8001eb8 <cmd_ControlMode+0x6c>
 8001e7c:	4b1f      	ldr	r3, [pc, #124]	; (8001efc <cmd_ControlMode+0xb0>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	f083 0301 	eor.w	r3, r3, #1
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d015      	beq.n	8001eb8 <cmd_ControlMode+0x6c>
	{
		angleErrPrev		= 0;
 8001e8c:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <cmd_ControlMode+0xb4>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	801a      	strh	r2, [r3, #0]
		positionErrPrev		= 0;
 8001e92:	4b1c      	ldr	r3, [pc, #112]	; (8001f04 <cmd_ControlMode+0xb8>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	801a      	strh	r2, [r3, #0]
		positionPeriodCnt 	= position_ctrlPeriod - 1;
 8001e98:	4b1b      	ldr	r3, [pc, #108]	; (8001f08 <cmd_ControlMode+0xbc>)
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <cmd_ControlMode+0xc0>)
 8001ea2:	801a      	strh	r2, [r3, #0]
        ledPeriod           = 100/controlLoopPeriodMs;
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <cmd_ControlMode+0xc4>)
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2364      	movs	r3, #100	; 0x64
 8001eac:	fb93 f3f2 	sdiv	r3, r3, r2
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <cmd_ControlMode+0xc8>)
 8001eb4:	801a      	strh	r2, [r3, #0]
 8001eb6:	e016      	b.n	8001ee6 <cmd_ControlMode+0x9a>
	}
	else if (!en && controlEnabled)
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	f083 0301 	eor.w	r3, r3, #1
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d010      	beq.n	8001ee6 <cmd_ControlMode+0x9a>
 8001ec4:	4b0d      	ldr	r3, [pc, #52]	; (8001efc <cmd_ControlMode+0xb0>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00b      	beq.n	8001ee6 <cmd_ControlMode+0x9a>
	{
		MOTOR_Stop();
 8001ece:	f000 fdb1 	bl	8002a34 <MOTOR_Stop>
        ledPeriod           = 500/controlLoopPeriodMs;
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <cmd_ControlMode+0xc4>)
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001edc:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <cmd_ControlMode+0xc8>)
 8001ee4:	801a      	strh	r2, [r3, #0]
	}

	controlEnabled = en;
 8001ee6:	4a05      	ldr	r2, [pc, #20]	; (8001efc <cmd_ControlMode+0xb0>)
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	7013      	strb	r3, [r2, #0]
	__enable_irq();
 8001eec:	f7ff f94e 	bl	800118c <__enable_irq>
}
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000023 	.word	0x20000023
 8001efc:	20000358 	.word	0x20000358
 8001f00:	200002c4 	.word	0x200002c4
 8001f04:	200002cc 	.word	0x200002cc
 8001f08:	20000010 	.word	0x20000010
 8001f0c:	20000354 	.word	0x20000354
 8001f10:	20000020 	.word	0x20000020
 8001f14:	20000356 	.word	0x20000356

08001f18 <cmd_SetAngleConfig>:

void cmd_SetAngleConfig(const unsigned char * config)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	__disable_irq();
 8001f20:	f7ff f93b 	bl	800119a <__disable_irq>
    angle_setPoint      = *((short          *)&config[ 0]);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <cmd_SetAngleConfig+0x50>)
 8001f2c:	801a      	strh	r2, [r3, #0]
    angle_averageLen    = *((unsigned short *)&config[ 2]);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	885a      	ldrh	r2, [r3, #2]
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <cmd_SetAngleConfig+0x54>)
 8001f34:	801a      	strh	r2, [r3, #0]
    angle_smoothing     = *((float          *)&config[ 4]);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	4a0d      	ldr	r2, [pc, #52]	; (8001f70 <cmd_SetAngleConfig+0x58>)
 8001f3c:	6013      	str	r3, [r2, #0]
    angle_KP            = *((float          *)&config[ 8]);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	4a0c      	ldr	r2, [pc, #48]	; (8001f74 <cmd_SetAngleConfig+0x5c>)
 8001f44:	6013      	str	r3, [r2, #0]
    angle_KI            = *((float          *)&config[12]);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	4a0b      	ldr	r2, [pc, #44]	; (8001f78 <cmd_SetAngleConfig+0x60>)
 8001f4c:	6013      	str	r3, [r2, #0]
    angle_KD            = *((float          *)&config[16]);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <cmd_SetAngleConfig+0x64>)
 8001f54:	6013      	str	r3, [r2, #0]
	angleErrPrev		= 0;
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <cmd_SetAngleConfig+0x68>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	801a      	strh	r2, [r3, #0]
	__enable_irq();
 8001f5c:	f7ff f916 	bl	800118c <__enable_irq>
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	20000002 	.word	0x20000002
 8001f70:	20000004 	.word	0x20000004
 8001f74:	20000008 	.word	0x20000008
 8001f78:	2000004c 	.word	0x2000004c
 8001f7c:	2000000c 	.word	0x2000000c
 8001f80:	200002c4 	.word	0x200002c4

08001f84 <cmd_GetAngleConfig>:

void cmd_GetAngleConfig(void)
{
 8001f84:	b598      	push	{r3, r4, r7, lr}
 8001f86:	af00      	add	r7, sp, #0
	txBuffer[ 0] = SERIAL_SOF;
 8001f88:	4b1f      	ldr	r3, [pc, #124]	; (8002008 <cmd_GetAngleConfig+0x84>)
 8001f8a:	22aa      	movs	r2, #170	; 0xaa
 8001f8c:	701a      	strb	r2, [r3, #0]
	txBuffer[ 1] = CMD_GET_ANGLE_CONFIG;
 8001f8e:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <cmd_GetAngleConfig+0x84>)
 8001f90:	22c5      	movs	r2, #197	; 0xc5
 8001f92:	705a      	strb	r2, [r3, #1]
	txBuffer[ 2] = 28;
 8001f94:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <cmd_GetAngleConfig+0x84>)
 8001f96:	221c      	movs	r2, #28
 8001f98:	709a      	strb	r2, [r3, #2]
    *((short          *)&txBuffer[ 3]) = angle_setPoint;
 8001f9a:	4b1c      	ldr	r3, [pc, #112]	; (800200c <cmd_GetAngleConfig+0x88>)
 8001f9c:	4a1c      	ldr	r2, [pc, #112]	; (8002010 <cmd_GetAngleConfig+0x8c>)
 8001f9e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001fa2:	801a      	strh	r2, [r3, #0]
	*((unsigned short *)&txBuffer[ 5]) = angle_averageLen;
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <cmd_GetAngleConfig+0x90>)
 8001fa6:	4a1c      	ldr	r2, [pc, #112]	; (8002018 <cmd_GetAngleConfig+0x94>)
 8001fa8:	8812      	ldrh	r2, [r2, #0]
 8001faa:	801a      	strh	r2, [r3, #0]
    *((float          *)&txBuffer[ 7]) = angle_smoothing;
 8001fac:	4a1b      	ldr	r2, [pc, #108]	; (800201c <cmd_GetAngleConfig+0x98>)
 8001fae:	4b1c      	ldr	r3, [pc, #112]	; (8002020 <cmd_GetAngleConfig+0x9c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6013      	str	r3, [r2, #0]
    *((float          *)&txBuffer[11]) = angle_KP;
 8001fb4:	4a1b      	ldr	r2, [pc, #108]	; (8002024 <cmd_GetAngleConfig+0xa0>)
 8001fb6:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <cmd_GetAngleConfig+0xa4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6013      	str	r3, [r2, #0]
    *((float          *)&txBuffer[15]) = angle_KI;
 8001fbc:	4a1b      	ldr	r2, [pc, #108]	; (800202c <cmd_GetAngleConfig+0xa8>)
 8001fbe:	4b1c      	ldr	r3, [pc, #112]	; (8002030 <cmd_GetAngleConfig+0xac>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6013      	str	r3, [r2, #0]
    *((float          *)&txBuffer[19]) = angle_KD;
 8001fc4:	4a1b      	ldr	r2, [pc, #108]	; (8002034 <cmd_GetAngleConfig+0xb0>)
 8001fc6:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <cmd_GetAngleConfig+0xb4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6013      	str	r3, [r2, #0]
    *((float          *)&txBuffer[23]) = controlLatencyUs;
 8001fcc:	4b1b      	ldr	r3, [pc, #108]	; (800203c <cmd_GetAngleConfig+0xb8>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4c1b      	ldr	r4, [pc, #108]	; (8002040 <cmd_GetAngleConfig+0xbc>)
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe ff08 	bl	8000de8 <__aeabi_i2f>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	6023      	str	r3, [r4, #0]
    *((bool           *)&txBuffer[27]) = controlSync;
 8001fdc:	4b19      	ldr	r3, [pc, #100]	; (8002044 <cmd_GetAngleConfig+0xc0>)
 8001fde:	4a1a      	ldr	r2, [pc, #104]	; (8002048 <cmd_GetAngleConfig+0xc4>)
 8001fe0:	7812      	ldrb	r2, [r2, #0]
 8001fe2:	701a      	strb	r2, [r3, #0]
	txBuffer[28] = crc(txBuffer, 28);
 8001fe4:	211c      	movs	r1, #28
 8001fe6:	4808      	ldr	r0, [pc, #32]	; (8002008 <cmd_GetAngleConfig+0x84>)
 8001fe8:	f000 f92e 	bl	8002248 <crc>
 8001fec:	4603      	mov	r3, r0
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <cmd_GetAngleConfig+0x84>)
 8001ff2:	771a      	strb	r2, [r3, #28]

	__disable_irq();
 8001ff4:	f7ff f8d1 	bl	800119a <__disable_irq>
	USART_SendBuffer(txBuffer, 29);
 8001ff8:	211d      	movs	r1, #29
 8001ffa:	4803      	ldr	r0, [pc, #12]	; (8002008 <cmd_GetAngleConfig+0x84>)
 8001ffc:	f001 f90a 	bl	8003214 <USART_SendBuffer>
	__enable_irq();
 8002000:	f7ff f8c4 	bl	800118c <__enable_irq>
}
 8002004:	bf00      	nop
 8002006:	bd98      	pop	{r3, r4, r7, pc}
 8002008:	200000a4 	.word	0x200000a4
 800200c:	200000a7 	.word	0x200000a7
 8002010:	20000000 	.word	0x20000000
 8002014:	200000a9 	.word	0x200000a9
 8002018:	20000002 	.word	0x20000002
 800201c:	200000ab 	.word	0x200000ab
 8002020:	20000004 	.word	0x20000004
 8002024:	200000af 	.word	0x200000af
 8002028:	20000008 	.word	0x20000008
 800202c:	200000b3 	.word	0x200000b3
 8002030:	2000004c 	.word	0x2000004c
 8002034:	200000b7 	.word	0x200000b7
 8002038:	2000000c 	.word	0x2000000c
 800203c:	20000058 	.word	0x20000058
 8002040:	200000bb 	.word	0x200000bb
 8002044:	200000bf 	.word	0x200000bf
 8002048:	20000022 	.word	0x20000022

0800204c <cmd_SetPositionConfig>:

void cmd_SetPositionConfig(const unsigned char * config)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
	__disable_irq();
 8002054:	f7ff f8a1 	bl	800119a <__disable_irq>
    position_setPoint   = *((short          *)&config[ 0]);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <cmd_SetPositionConfig+0x68>)
 8002060:	801a      	strh	r2, [r3, #0]
    position_ctrlPeriod = *((unsigned short *)&config[ 2]);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	885a      	ldrh	r2, [r3, #2]
 8002066:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <cmd_SetPositionConfig+0x6c>)
 8002068:	801a      	strh	r2, [r3, #0]
    position_smoothing  = *((float          *)&config[ 4]);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	4a13      	ldr	r2, [pc, #76]	; (80020bc <cmd_SetPositionConfig+0x70>)
 8002070:	6013      	str	r3, [r2, #0]
    position_KP         = *((float          *)&config[ 8]);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <cmd_SetPositionConfig+0x74>)
 8002078:	6013      	str	r3, [r2, #0]
    position_KD         = *((float          *)&config[12]);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	4a11      	ldr	r2, [pc, #68]	; (80020c4 <cmd_SetPositionConfig+0x78>)
 8002080:	6013      	str	r3, [r2, #0]
	positionErrPrev		= 0;
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <cmd_SetPositionConfig+0x7c>)
 8002084:	2200      	movs	r2, #0
 8002086:	801a      	strh	r2, [r3, #0]
	position_ctrlPeriod	= position_ctrlPeriod / controlLoopPeriodMs;
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <cmd_SetPositionConfig+0x6c>)
 800208a:	881a      	ldrh	r2, [r3, #0]
 800208c:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <cmd_SetPositionConfig+0x80>)
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	fbb2 f3f3 	udiv	r3, r2, r3
 8002094:	b29a      	uxth	r2, r3
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <cmd_SetPositionConfig+0x6c>)
 8002098:	801a      	strh	r2, [r3, #0]
	positionPeriodCnt	= position_ctrlPeriod - 1;
 800209a:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <cmd_SetPositionConfig+0x6c>)
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	3b01      	subs	r3, #1
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <cmd_SetPositionConfig+0x84>)
 80020a4:	801a      	strh	r2, [r3, #0]
	__enable_irq();
 80020a6:	f7ff f871 	bl	800118c <__enable_irq>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000050 	.word	0x20000050
 80020b8:	20000010 	.word	0x20000010
 80020bc:	20000014 	.word	0x20000014
 80020c0:	20000018 	.word	0x20000018
 80020c4:	2000001c 	.word	0x2000001c
 80020c8:	200002cc 	.word	0x200002cc
 80020cc:	20000020 	.word	0x20000020
 80020d0:	20000354 	.word	0x20000354

080020d4 <cmd_GetPositionConfig>:

void cmd_GetPositionConfig(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
	unsigned short temp;

	temp = position_ctrlPeriod * controlLoopPeriodMs;
 80020da:	4b1c      	ldr	r3, [pc, #112]	; (800214c <cmd_GetPositionConfig+0x78>)
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	4a1c      	ldr	r2, [pc, #112]	; (8002150 <cmd_GetPositionConfig+0x7c>)
 80020e0:	8812      	ldrh	r2, [r2, #0]
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
 80020e6:	80fb      	strh	r3, [r7, #6]

	txBuffer[ 0] = SERIAL_SOF;
 80020e8:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <cmd_GetPositionConfig+0x80>)
 80020ea:	22aa      	movs	r2, #170	; 0xaa
 80020ec:	701a      	strb	r2, [r3, #0]
	txBuffer[ 1] = CMD_GET_POSITION_CONFIG;
 80020ee:	4b19      	ldr	r3, [pc, #100]	; (8002154 <cmd_GetPositionConfig+0x80>)
 80020f0:	22c7      	movs	r2, #199	; 0xc7
 80020f2:	705a      	strb	r2, [r3, #1]
	txBuffer[ 2] = 20;
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <cmd_GetPositionConfig+0x80>)
 80020f6:	2214      	movs	r2, #20
 80020f8:	709a      	strb	r2, [r3, #2]
    *((short          *)&txBuffer[ 3]) = position_setPoint;
 80020fa:	4b17      	ldr	r3, [pc, #92]	; (8002158 <cmd_GetPositionConfig+0x84>)
 80020fc:	4a17      	ldr	r2, [pc, #92]	; (800215c <cmd_GetPositionConfig+0x88>)
 80020fe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002102:	801a      	strh	r2, [r3, #0]
	*((unsigned short *)&txBuffer[ 5]) = temp;
 8002104:	4a16      	ldr	r2, [pc, #88]	; (8002160 <cmd_GetPositionConfig+0x8c>)
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	8013      	strh	r3, [r2, #0]
    *((float          *)&txBuffer[ 7]) = position_smoothing;
 800210a:	4a16      	ldr	r2, [pc, #88]	; (8002164 <cmd_GetPositionConfig+0x90>)
 800210c:	4b16      	ldr	r3, [pc, #88]	; (8002168 <cmd_GetPositionConfig+0x94>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6013      	str	r3, [r2, #0]
    *((float          *)&txBuffer[11]) = position_KP;
 8002112:	4a16      	ldr	r2, [pc, #88]	; (800216c <cmd_GetPositionConfig+0x98>)
 8002114:	4b16      	ldr	r3, [pc, #88]	; (8002170 <cmd_GetPositionConfig+0x9c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6013      	str	r3, [r2, #0]
    *((float          *)&txBuffer[15]) = position_KD;
 800211a:	4a16      	ldr	r2, [pc, #88]	; (8002174 <cmd_GetPositionConfig+0xa0>)
 800211c:	4b16      	ldr	r3, [pc, #88]	; (8002178 <cmd_GetPositionConfig+0xa4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6013      	str	r3, [r2, #0]
	txBuffer[19] = crc(txBuffer, 19);
 8002122:	2113      	movs	r1, #19
 8002124:	480b      	ldr	r0, [pc, #44]	; (8002154 <cmd_GetPositionConfig+0x80>)
 8002126:	f000 f88f 	bl	8002248 <crc>
 800212a:	4603      	mov	r3, r0
 800212c:	461a      	mov	r2, r3
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <cmd_GetPositionConfig+0x80>)
 8002130:	74da      	strb	r2, [r3, #19]

	__disable_irq();
 8002132:	f7ff f832 	bl	800119a <__disable_irq>
	USART_SendBuffer(txBuffer, 20);
 8002136:	2114      	movs	r1, #20
 8002138:	4806      	ldr	r0, [pc, #24]	; (8002154 <cmd_GetPositionConfig+0x80>)
 800213a:	f001 f86b 	bl	8003214 <USART_SendBuffer>
	__enable_irq();
 800213e:	f7ff f825 	bl	800118c <__enable_irq>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000010 	.word	0x20000010
 8002150:	20000020 	.word	0x20000020
 8002154:	200000a4 	.word	0x200000a4
 8002158:	200000a7 	.word	0x200000a7
 800215c:	20000050 	.word	0x20000050
 8002160:	200000a9 	.word	0x200000a9
 8002164:	200000ab 	.word	0x200000ab
 8002168:	20000014 	.word	0x20000014
 800216c:	200000af 	.word	0x200000af
 8002170:	20000018 	.word	0x20000018
 8002174:	200000b3 	.word	0x200000b3
 8002178:	2000001c 	.word	0x2000001c

0800217c <cmd_SetMotor>:

void cmd_SetMotor(int speed)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
		int position;

	//	MOTOR_SetSpeed(speed);
	// Only command the motor if the on-board control routine is disabled
	if (!controlEnabled){
 8002184:	4b15      	ldr	r3, [pc, #84]	; (80021dc <cmd_SetMotor+0x60>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	f083 0301 	eor.w	r3, r3, #1
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d01f      	beq.n	80021d4 <cmd_SetMotor+0x58>
				position = ENCODER_Read();
 8002194:	f000 f930 	bl	80023f8 <ENCODER_Read>
 8002198:	4603      	mov	r3, r0
 800219a:	60fb      	str	r3, [r7, #12]

				// Disable motor if falls hard on either limit
				if ((speed < 0) && (position < (positionLimitLeft + 10)))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	da08      	bge.n	80021b4 <cmd_SetMotor+0x38>
 80021a2:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <cmd_SetMotor+0x64>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	3309      	adds	r3, #9
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	dc02      	bgt.n	80021b4 <cmd_SetMotor+0x38>
				{
						MOTOR_Stop();
 80021ae:	f000 fc41 	bl	8002a34 <MOTOR_Stop>
 80021b2:	e00f      	b.n	80021d4 <cmd_SetMotor+0x58>
				}
				else if ((speed > 0) && (position > (positionLimitRight - 10)))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	dd08      	ble.n	80021cc <cmd_SetMotor+0x50>
 80021ba:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <cmd_SetMotor+0x68>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	3b09      	subs	r3, #9
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	db02      	blt.n	80021cc <cmd_SetMotor+0x50>
				{
						MOTOR_Stop();
 80021c6:	f000 fc35 	bl	8002a34 <MOTOR_Stop>
 80021ca:	e003      	b.n	80021d4 <cmd_SetMotor+0x58>
				}
		else{
				MOTOR_SetSpeed(speed);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 fc47 	bl	8002a60 <MOTOR_SetSpeed>
		}
	}
}
 80021d2:	e7ff      	b.n	80021d4 <cmd_SetMotor+0x58>
 80021d4:	bf00      	nop
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20000358 	.word	0x20000358
 80021e0:	200002d0 	.word	0x200002d0
 80021e4:	200002c8 	.word	0x200002c8

080021e8 <cmd_SetControlConfig>:

void cmd_SetControlConfig(const unsigned char * config)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
	__disable_irq();
 80021f0:	f7fe ffd3 	bl	800119a <__disable_irq>

	controlLoopPeriodMs = *((unsigned short *)&config[0]);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	881a      	ldrh	r2, [r3, #0]
 80021f8:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <cmd_SetControlConfig+0x50>)
 80021fa:	801a      	strh	r2, [r3, #0]
    controlSync			= *((bool	        *)&config[2]);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	789a      	ldrb	r2, [r3, #2]
 8002200:	4b0e      	ldr	r3, [pc, #56]	; (800223c <cmd_SetControlConfig+0x54>)
 8002202:	701a      	strb	r2, [r3, #0]
    controlLatencyUs    = *((int            *)&config[3]);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f8d3 3003 	ldr.w	r3, [r3, #3]
 800220a:	4a0d      	ldr	r2, [pc, #52]	; (8002240 <cmd_SetControlConfig+0x58>)
 800220c:	6013      	str	r3, [r2, #0]

    TIMER1_ChangePeriod(controlLoopPeriodMs);
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <cmd_SetControlConfig+0x50>)
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fe52 	bl	8002ebc <TIMER1_ChangePeriod>
	position_ctrlPeriod	= position_ctrlPeriod / controlLoopPeriodMs;
 8002218:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <cmd_SetControlConfig+0x5c>)
 800221a:	881a      	ldrh	r2, [r3, #0]
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <cmd_SetControlConfig+0x50>)
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	fbb2 f3f3 	udiv	r3, r2, r3
 8002224:	b29a      	uxth	r2, r3
 8002226:	4b07      	ldr	r3, [pc, #28]	; (8002244 <cmd_SetControlConfig+0x5c>)
 8002228:	801a      	strh	r2, [r3, #0]

	__enable_irq();
 800222a:	f7fe ffaf 	bl	800118c <__enable_irq>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000020 	.word	0x20000020
 800223c:	20000022 	.word	0x20000022
 8002240:	20000058 	.word	0x20000058
 8002244:	20000010 	.word	0x20000010

08002248 <crc>:

unsigned char crc(const unsigned char * buff, unsigned int len)
{
 8002248:	b480      	push	{r7}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
    unsigned char crc8 = 0x00;
 8002252:	2300      	movs	r3, #0
 8002254:	75fb      	strb	r3, [r7, #23]
	unsigned char val;
	unsigned char sum;
	unsigned int  i;

    while (len--)
 8002256:	e022      	b.n	800229e <crc+0x56>
    {
        val = *buff++;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	75bb      	strb	r3, [r7, #22]
        for (i = 0; i < 8; i++)
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	e017      	b.n	8002298 <crc+0x50>
        {
            sum = (crc8 ^ val) & 0x01;
 8002268:	7dfa      	ldrb	r2, [r7, #23]
 800226a:	7dbb      	ldrb	r3, [r7, #22]
 800226c:	4053      	eors	r3, r2
 800226e:	b2db      	uxtb	r3, r3
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	73fb      	strb	r3, [r7, #15]
            crc8 >>= 1;
 8002276:	7dfb      	ldrb	r3, [r7, #23]
 8002278:	085b      	lsrs	r3, r3, #1
 800227a:	75fb      	strb	r3, [r7, #23]
            if (sum > 0)
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d004      	beq.n	800228c <crc+0x44>
            {
                crc8 ^= 0x8C;
 8002282:	7dfb      	ldrb	r3, [r7, #23]
 8002284:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8002288:	43db      	mvns	r3, r3
 800228a:	75fb      	strb	r3, [r7, #23]
            }
            val >>= 1;
 800228c:	7dbb      	ldrb	r3, [r7, #22]
 800228e:	085b      	lsrs	r3, r3, #1
 8002290:	75bb      	strb	r3, [r7, #22]
        for (i = 0; i < 8; i++)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	3301      	adds	r3, #1
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	2b07      	cmp	r3, #7
 800229c:	d9e4      	bls.n	8002268 <crc+0x20>
    while (len--)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	1e5a      	subs	r2, r3, #1
 80022a2:	603a      	str	r2, [r7, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1d7      	bne.n	8002258 <crc+0x10>
        }
    }
    return crc8;
 80022a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	371c      	adds	r7, #28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <crcIsValid>:

bool crcIsValid(const unsigned char * buff, unsigned int len, unsigned char crcVal)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	4613      	mov	r3, r2
 80022c0:	71fb      	strb	r3, [r7, #7]
    return crcVal == crc(buff, len);
 80022c2:	68b9      	ldr	r1, [r7, #8]
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f7ff ffbf 	bl	8002248 <crc>
 80022ca:	4603      	mov	r3, r0
 80022cc:	461a      	mov	r2, r3
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	4293      	cmp	r3, r2
 80022d2:	bf0c      	ite	eq
 80022d4:	2301      	moveq	r3, #1
 80022d6:	2300      	movne	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <ENCODER_Init>:
#include "encoder.h"

// Uses Timer 4 configured in encoder mode
void ENCODER_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
	RCC->APB1ENR	|= 1<<2;				// TIM4 clock enable
 80022e8:	4b40      	ldr	r3, [pc, #256]	; (80023ec <ENCODER_Init+0x108>)
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	4a3f      	ldr	r2, [pc, #252]	; (80023ec <ENCODER_Init+0x108>)
 80022ee:	f043 0304 	orr.w	r3, r3, #4
 80022f2:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR	|= 1<<3;				// Enable PORTB clock
 80022f4:	4b3d      	ldr	r3, [pc, #244]	; (80023ec <ENCODER_Init+0x108>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	4a3c      	ldr	r2, [pc, #240]	; (80023ec <ENCODER_Init+0x108>)
 80022fa:	f043 0308 	orr.w	r3, r3, #8
 80022fe:	6193      	str	r3, [r2, #24]
	GPIOB->CRL		&= 0x00FFFFFF;			// PB6 PB7
 8002300:	4b3b      	ldr	r3, [pc, #236]	; (80023f0 <ENCODER_Init+0x10c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a3a      	ldr	r2, [pc, #232]	; (80023f0 <ENCODER_Init+0x10c>)
 8002306:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800230a:	6013      	str	r3, [r2, #0]
	GPIOB->CRL		|= 0x44000000;			// Floating space input
 800230c:	4b38      	ldr	r3, [pc, #224]	; (80023f0 <ENCODER_Init+0x10c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a37      	ldr	r2, [pc, #220]	; (80023f0 <ENCODER_Init+0x10c>)
 8002312:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 8002316:	6013      	str	r3, [r2, #0]
	
	// Enable the TIM4 update interrupt, to clear overflows. Tobi: section was commented out earlier
	TIM4->DIER		|= 1<<0;				// Enable update interrupt			
 8002318:	4b36      	ldr	r3, [pc, #216]	; (80023f4 <ENCODER_Init+0x110>)
 800231a:	899b      	ldrh	r3, [r3, #12]
 800231c:	b29b      	uxth	r3, r3
 800231e:	4a35      	ldr	r2, [pc, #212]	; (80023f4 <ENCODER_Init+0x110>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	b29b      	uxth	r3, r3
 8002326:	8193      	strh	r3, [r2, #12]
	TIM4->DIER		|= 1<<6;				// Enable triggered interrupt
 8002328:	4b32      	ldr	r3, [pc, #200]	; (80023f4 <ENCODER_Init+0x110>)
 800232a:	899b      	ldrh	r3, [r3, #12]
 800232c:	b29b      	uxth	r3, r3
 800232e:	4a31      	ldr	r2, [pc, #196]	; (80023f4 <ENCODER_Init+0x110>)
 8002330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002334:	b29b      	uxth	r3, r3
 8002336:	8193      	strh	r3, [r2, #12]
	SYS_NVIC_Init(1, 3, TIM4_IRQn, 1);
 8002338:	2301      	movs	r3, #1
 800233a:	221e      	movs	r2, #30
 800233c:	2103      	movs	r1, #3
 800233e:	2001      	movs	r0, #1
 8002340:	f000 fc7a 	bl	8002c38 <SYS_NVIC_Init>

	// Configure timer for encoder mode
	TIM4->PSC		 = 0x0;
 8002344:	4b2b      	ldr	r3, [pc, #172]	; (80023f4 <ENCODER_Init+0x110>)
 8002346:	2200      	movs	r2, #0
 8002348:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM4->ARR		 = 65535;				// Setting counter automatic reload value
 800234a:	4b2a      	ldr	r3, [pc, #168]	; (80023f4 <ENCODER_Init+0x110>)
 800234c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002350:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM4->CR1		&=~(3<<8);				// Select clock divider: no frequency division
 8002352:	4b28      	ldr	r3, [pc, #160]	; (80023f4 <ENCODER_Init+0x110>)
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	4a26      	ldr	r2, [pc, #152]	; (80023f4 <ENCODER_Init+0x110>)
 800235a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800235e:	b29b      	uxth	r3, r3
 8002360:	8013      	strh	r3, [r2, #0]
	TIM4->CR1		&=~(3<<5);				// Select counting mode: 00: edge alignment mode.  Counter counts up/down according to DIR flag
 8002362:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <ENCODER_Init+0x110>)
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	4a22      	ldr	r2, [pc, #136]	; (80023f4 <ENCODER_Init+0x110>)
 800236a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800236e:	b29b      	uxth	r3, r3
 8002370:	8013      	strh	r3, [r2, #0]
	
	TIM4->CCMR1		|= 1<<0; 				// 14.4.7: CC1S='01' IC1FP1 Mapping to TI1
 8002372:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <ENCODER_Init+0x110>)
 8002374:	8b1b      	ldrh	r3, [r3, #24]
 8002376:	b29b      	uxth	r3, r3
 8002378:	4a1e      	ldr	r2, [pc, #120]	; (80023f4 <ENCODER_Init+0x110>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	b29b      	uxth	r3, r3
 8002380:	8313      	strh	r3, [r2, #24]
	TIM4->CCMR1 	|= 1<<8; 				// 14.4.7: CC2S='01' IC2FP2 Mapping to TI2
 8002382:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <ENCODER_Init+0x110>)
 8002384:	8b1b      	ldrh	r3, [r3, #24]
 8002386:	b29b      	uxth	r3, r3
 8002388:	4a1a      	ldr	r2, [pc, #104]	; (80023f4 <ENCODER_Init+0x110>)
 800238a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238e:	b29b      	uxth	r3, r3
 8002390:	8313      	strh	r3, [r2, #24]
	TIM4->CCER 		&= ~(1<<1);	 			// 14.4.9: CC1P='0'	 IC1FP1 Not opposite IC1FP1=TI1
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <ENCODER_Init+0x110>)
 8002394:	8c1b      	ldrh	r3, [r3, #32]
 8002396:	b29b      	uxth	r3, r3
 8002398:	4a16      	ldr	r2, [pc, #88]	; (80023f4 <ENCODER_Init+0x110>)
 800239a:	f023 0302 	bic.w	r3, r3, #2
 800239e:	b29b      	uxth	r3, r3
 80023a0:	8413      	strh	r3, [r2, #32]
	TIM4->CCER		&= ~(1<<5);	 			// 14.4.9: CC2P='0'	 IC2FP2 Not opposite IC2FP2=TI2
 80023a2:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <ENCODER_Init+0x110>)
 80023a4:	8c1b      	ldrh	r3, [r3, #32]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <ENCODER_Init+0x110>)
 80023aa:	f023 0320 	bic.w	r3, r3, #32
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	8413      	strh	r3, [r2, #32]
	TIM4->CCMR1		|= 0xf<<4; 				// 14.4.7: IC1F='0000' Input capture 1 filter
 80023b2:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <ENCODER_Init+0x110>)
 80023b4:	8b1b      	ldrh	r3, [r3, #24]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	4a0e      	ldr	r2, [pc, #56]	; (80023f4 <ENCODER_Init+0x110>)
 80023ba:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80023be:	b29b      	uxth	r3, r3
 80023c0:	8313      	strh	r3, [r2, #24]
	TIM4->SMCR		|= 3<<0;	 			// 15.4.3: SMS='011' All inputs are valid on the rising and falling edges. Counter counts up/down on both TI1FP1 and TI2FP2 edges depending on the level of the other input
 80023c2:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <ENCODER_Init+0x110>)
 80023c4:	891b      	ldrh	r3, [r3, #8]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <ENCODER_Init+0x110>)
 80023ca:	f043 0303 	orr.w	r3, r3, #3
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	8113      	strh	r3, [r2, #8]
	TIM4->CNT		 = ENCODER_ZERO;
 80023d2:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <ENCODER_Init+0x110>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	849a      	strh	r2, [r3, #36]	; 0x24
	TIM4->CR1		|= 0x01;				// CEN=1 Enabling timer
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <ENCODER_Init+0x110>)
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	4a05      	ldr	r2, [pc, #20]	; (80023f4 <ENCODER_Init+0x110>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	8013      	strh	r3, [r2, #0]
}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40010c00 	.word	0x40010c00
 80023f4:	40000800 	.word	0x40000800

080023f8 <ENCODER_Read>:

short ENCODER_Read(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
	return -(TIM4->CNT);
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <ENCODER_Read+0x18>)
 80023fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002400:	b29b      	uxth	r3, r3
 8002402:	425b      	negs	r3, r3
 8002404:	b29b      	uxth	r3, r3
 8002406:	b21b      	sxth	r3, r3
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	40000800 	.word	0x40000800

08002414 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{ 		    		  			    
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
	if(TIM4->SR&0X0001)	// Overflow interruption
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <TIM4_IRQHandler+0x20>)
 800241a:	8a1b      	ldrh	r3, [r3, #16]
	{				   				     	    	
	}				   
	TIM4->SR&=~(1<<0);	// Clear interrupt flag bit	    
 800241c:	4b05      	ldr	r3, [pc, #20]	; (8002434 <TIM4_IRQHandler+0x20>)
 800241e:	8a1b      	ldrh	r3, [r3, #16]
 8002420:	b29b      	uxth	r3, r3
 8002422:	4a04      	ldr	r2, [pc, #16]	; (8002434 <TIM4_IRQHandler+0x20>)
 8002424:	f023 0301 	bic.w	r3, r3, #1
 8002428:	b29b      	uxth	r3, r3
 800242a:	8213      	strh	r3, [r2, #16]
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr
 8002434:	40000800 	.word	0x40000800

08002438 <KEY_Init>:
KEY_Callback cbKey7;
KEY_Callback cbKey11;
KEY_Callback cbKey12;

void KEY_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
	cbKey2  = 0;
 800243c:	4b30      	ldr	r3, [pc, #192]	; (8002500 <KEY_Init+0xc8>)
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
	cbKey5  = 0;
 8002442:	4b30      	ldr	r3, [pc, #192]	; (8002504 <KEY_Init+0xcc>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
	cbKey7  = 0;
 8002448:	4b2f      	ldr	r3, [pc, #188]	; (8002508 <KEY_Init+0xd0>)
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
	cbKey11 = 0;
 800244e:	4b2f      	ldr	r3, [pc, #188]	; (800250c <KEY_Init+0xd4>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
	cbKey12 = 0;
 8002454:	4b2e      	ldr	r3, [pc, #184]	; (8002510 <KEY_Init+0xd8>)
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]

	RCC->APB2ENR	|= 1<<2;    // Enable PORTA clock
 800245a:	4b2e      	ldr	r3, [pc, #184]	; (8002514 <KEY_Init+0xdc>)
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	4a2d      	ldr	r2, [pc, #180]	; (8002514 <KEY_Init+0xdc>)
 8002460:	f043 0304 	orr.w	r3, r3, #4
 8002464:	6193      	str	r3, [r2, #24]

	GPIOA->CRH		&= 0xFFF00FFF; 
 8002466:	4b2c      	ldr	r3, [pc, #176]	; (8002518 <KEY_Init+0xe0>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	4a2b      	ldr	r2, [pc, #172]	; (8002518 <KEY_Init+0xe0>)
 800246c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8002470:	6053      	str	r3, [r2, #4]
	GPIOA->CRH		|= 0x00088000;
 8002472:	4b29      	ldr	r3, [pc, #164]	; (8002518 <KEY_Init+0xe0>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4a28      	ldr	r2, [pc, #160]	; (8002518 <KEY_Init+0xe0>)
 8002478:	f443 2308 	orr.w	r3, r3, #557056	; 0x88000
 800247c:	6053      	str	r3, [r2, #4]
	GPIOA->CRL		&= 0x0F0FF0FF; 
 800247e:	4b26      	ldr	r3, [pc, #152]	; (8002518 <KEY_Init+0xe0>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	4925      	ldr	r1, [pc, #148]	; (8002518 <KEY_Init+0xe0>)
 8002484:	4b25      	ldr	r3, [pc, #148]	; (800251c <KEY_Init+0xe4>)
 8002486:	4013      	ands	r3, r2
 8002488:	600b      	str	r3, [r1, #0]
	GPIOA->CRL		|= 0x80800800;
 800248a:	4b23      	ldr	r3, [pc, #140]	; (8002518 <KEY_Init+0xe0>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	4922      	ldr	r1, [pc, #136]	; (8002518 <KEY_Init+0xe0>)
 8002490:	4b23      	ldr	r3, [pc, #140]	; (8002520 <KEY_Init+0xe8>)
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]
	GPIOA->ODR		|= 0x000018A4;
 8002496:	4b20      	ldr	r3, [pc, #128]	; (8002518 <KEY_Init+0xe0>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	4a1f      	ldr	r2, [pc, #124]	; (8002518 <KEY_Init+0xe0>)
 800249c:	f443 53c5 	orr.w	r3, r3, #6304	; 0x18a0
 80024a0:	f043 0304 	orr.w	r3, r3, #4
 80024a4:	60d3      	str	r3, [r2, #12]
	
	SYS_EXTI_Config(SYS_GPIO_A,  2, SYS_TRIG_FALLING);
 80024a6:	2201      	movs	r2, #1
 80024a8:	2102      	movs	r1, #2
 80024aa:	2000      	movs	r0, #0
 80024ac:	f000 fc28 	bl	8002d00 <SYS_EXTI_Config>
	SYS_EXTI_Config(SYS_GPIO_A,  5, SYS_TRIG_FALLING);
 80024b0:	2201      	movs	r2, #1
 80024b2:	2105      	movs	r1, #5
 80024b4:	2000      	movs	r0, #0
 80024b6:	f000 fc23 	bl	8002d00 <SYS_EXTI_Config>
	SYS_EXTI_Config(SYS_GPIO_A,  7, SYS_TRIG_FALLING);
 80024ba:	2201      	movs	r2, #1
 80024bc:	2107      	movs	r1, #7
 80024be:	2000      	movs	r0, #0
 80024c0:	f000 fc1e 	bl	8002d00 <SYS_EXTI_Config>
	SYS_EXTI_Config(SYS_GPIO_A, 11, SYS_TRIG_FALLING);
 80024c4:	2201      	movs	r2, #1
 80024c6:	210b      	movs	r1, #11
 80024c8:	2000      	movs	r0, #0
 80024ca:	f000 fc19 	bl	8002d00 <SYS_EXTI_Config>
	SYS_EXTI_Config(SYS_GPIO_A, 12, SYS_TRIG_FALLING); 
 80024ce:	2201      	movs	r2, #1
 80024d0:	210c      	movs	r1, #12
 80024d2:	2000      	movs	r0, #0
 80024d4:	f000 fc14 	bl	8002d00 <SYS_EXTI_Config>

	SYS_NVIC_Init(2, 2, EXTI2_IRQn,     2);
 80024d8:	2302      	movs	r3, #2
 80024da:	2208      	movs	r2, #8
 80024dc:	2102      	movs	r1, #2
 80024de:	2002      	movs	r0, #2
 80024e0:	f000 fbaa 	bl	8002c38 <SYS_NVIC_Init>
	SYS_NVIC_Init(2, 2, EXTI9_5_IRQn,   2);
 80024e4:	2302      	movs	r3, #2
 80024e6:	2217      	movs	r2, #23
 80024e8:	2102      	movs	r1, #2
 80024ea:	2002      	movs	r0, #2
 80024ec:	f000 fba4 	bl	8002c38 <SYS_NVIC_Init>
	SYS_NVIC_Init(2, 2, EXTI15_10_IRQn, 2);
 80024f0:	2302      	movs	r3, #2
 80024f2:	2228      	movs	r2, #40	; 0x28
 80024f4:	2102      	movs	r1, #2
 80024f6:	2002      	movs	r0, #2
 80024f8:	f000 fb9e 	bl	8002c38 <SYS_NVIC_Init>
}
 80024fc:	bf00      	nop
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20000364 	.word	0x20000364
 8002504:	20000360 	.word	0x20000360
 8002508:	2000036c 	.word	0x2000036c
 800250c:	20000368 	.word	0x20000368
 8002510:	20000370 	.word	0x20000370
 8002514:	40021000 	.word	0x40021000
 8002518:	40010800 	.word	0x40010800
 800251c:	0f0ff0ff 	.word	0x0f0ff0ff
 8002520:	80800800 	.word	0x80800800

08002524 <KEY_SetCallback>:

void KEY_SetCallback(unsigned int key, KEY_Callback cb)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3b02      	subs	r3, #2
 8002532:	2b0a      	cmp	r3, #10
 8002534:	d82c      	bhi.n	8002590 <KEY_SetCallback+0x6c>
 8002536:	a201      	add	r2, pc, #4	; (adr r2, 800253c <KEY_SetCallback+0x18>)
 8002538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800253c:	08002569 	.word	0x08002569
 8002540:	08002591 	.word	0x08002591
 8002544:	08002591 	.word	0x08002591
 8002548:	08002571 	.word	0x08002571
 800254c:	08002591 	.word	0x08002591
 8002550:	08002579 	.word	0x08002579
 8002554:	08002591 	.word	0x08002591
 8002558:	08002591 	.word	0x08002591
 800255c:	08002591 	.word	0x08002591
 8002560:	08002581 	.word	0x08002581
 8002564:	08002589 	.word	0x08002589
	switch (key)
	{
		case KEY_2:		cbKey2  = cb; break;
 8002568:	4a0c      	ldr	r2, [pc, #48]	; (800259c <KEY_SetCallback+0x78>)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	e00f      	b.n	8002590 <KEY_SetCallback+0x6c>
		case KEY_5:		cbKey5  = cb; break;
 8002570:	4a0b      	ldr	r2, [pc, #44]	; (80025a0 <KEY_SetCallback+0x7c>)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e00b      	b.n	8002590 <KEY_SetCallback+0x6c>
		case KEY_7:		cbKey7  = cb; break;
 8002578:	4a0a      	ldr	r2, [pc, #40]	; (80025a4 <KEY_SetCallback+0x80>)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e007      	b.n	8002590 <KEY_SetCallback+0x6c>
		case KEY_11:	cbKey11 = cb; break;
 8002580:	4a09      	ldr	r2, [pc, #36]	; (80025a8 <KEY_SetCallback+0x84>)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	e003      	b.n	8002590 <KEY_SetCallback+0x6c>
		case KEY_12:	cbKey12 = cb; break;
 8002588:	4a08      	ldr	r2, [pc, #32]	; (80025ac <KEY_SetCallback+0x88>)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	bf00      	nop
	}
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	20000364 	.word	0x20000364
 80025a0:	20000360 	.word	0x20000360
 80025a4:	2000036c 	.word	0x2000036c
 80025a8:	20000368 	.word	0x20000368
 80025ac:	20000370 	.word	0x20000370

080025b0 <EXTI2_IRQHandler>:

// External interrupt 2 service function
void EXTI2_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
	SYS_DelayMS(5);		// Debounce
 80025b4:	2005      	movs	r0, #5
 80025b6:	f000 fc09 	bl	8002dcc <SYS_DelayMS>

	if (PA_IN(KEY_2) == 0)
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <EXTI2_IRQHandler+0x2c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <EXTI2_IRQHandler+0x26>
	{
		if (cbKey2)
 80025c2:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <EXTI2_IRQHandler+0x30>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <EXTI2_IRQHandler+0x20>
		{
			cbKey2();
 80025ca:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <EXTI2_IRQHandler+0x30>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4798      	blx	r3
		}
		EXTI->PR = 1<<2;
 80025d0:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <EXTI2_IRQHandler+0x34>)
 80025d2:	2204      	movs	r2, #4
 80025d4:	615a      	str	r2, [r3, #20]
	}
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	42210108 	.word	0x42210108
 80025e0:	20000364 	.word	0x20000364
 80025e4:	40010400 	.word	0x40010400

080025e8 <EXTI9_5_IRQHandler>:

// External interrupt 9~5 service function
void EXTI9_5_IRQHandler(void)
{			
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
	SYS_DelayMS(5);		// Debounce
 80025ec:	2005      	movs	r0, #5
 80025ee:	f000 fbed 	bl	8002dcc <SYS_DelayMS>

	if (PA_IN(KEY_5) == 0)
 80025f2:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <EXTI9_5_IRQHandler+0x48>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <EXTI9_5_IRQHandler+0x26>
	{
		if (cbKey5)
 80025fa:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <EXTI9_5_IRQHandler+0x4c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <EXTI9_5_IRQHandler+0x20>
		{
			cbKey5();
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <EXTI9_5_IRQHandler+0x4c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4798      	blx	r3
		}
		EXTI->PR = 1<<5;
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <EXTI9_5_IRQHandler+0x50>)
 800260a:	2220      	movs	r2, #32
 800260c:	615a      	str	r2, [r3, #20]
	}

	if (PA_IN(KEY_7) == 0)
 800260e:	4b0b      	ldr	r3, [pc, #44]	; (800263c <EXTI9_5_IRQHandler+0x54>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d109      	bne.n	800262a <EXTI9_5_IRQHandler+0x42>
	{
		if (cbKey7)
 8002616:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <EXTI9_5_IRQHandler+0x58>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <EXTI9_5_IRQHandler+0x3c>
		{
			cbKey7();
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <EXTI9_5_IRQHandler+0x58>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4798      	blx	r3
		}
		EXTI->PR = 1<<7;
 8002624:	4b04      	ldr	r3, [pc, #16]	; (8002638 <EXTI9_5_IRQHandler+0x50>)
 8002626:	2280      	movs	r2, #128	; 0x80
 8002628:	615a      	str	r2, [r3, #20]
	}
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	42210114 	.word	0x42210114
 8002634:	20000360 	.word	0x20000360
 8002638:	40010400 	.word	0x40010400
 800263c:	4221011c 	.word	0x4221011c
 8002640:	2000036c 	.word	0x2000036c

08002644 <EXTI15_10_IRQHandler>:

// External interrupt 15-10 service function
void EXTI15_10_IRQHandler(void)
{			
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
	SYS_DelayMS(5);		// Debounce
 8002648:	2005      	movs	r0, #5
 800264a:	f000 fbbf 	bl	8002dcc <SYS_DelayMS>

	if (PA_IN(KEY_11) == 0)
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <EXTI15_10_IRQHandler+0x4c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10a      	bne.n	800266c <EXTI15_10_IRQHandler+0x28>
	{
		if (cbKey11)
 8002656:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <EXTI15_10_IRQHandler+0x50>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <EXTI15_10_IRQHandler+0x20>
		{
			cbKey11();
 800265e:	4b0d      	ldr	r3, [pc, #52]	; (8002694 <EXTI15_10_IRQHandler+0x50>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4798      	blx	r3
		}
		EXTI->PR = 1<<11;
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <EXTI15_10_IRQHandler+0x54>)
 8002666:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800266a:	615a      	str	r2, [r3, #20]
	}

	if (PA_IN(KEY_12) == 0)
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <EXTI15_10_IRQHandler+0x58>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10a      	bne.n	800268a <EXTI15_10_IRQHandler+0x46>
	{
		if (cbKey12)
 8002674:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <EXTI15_10_IRQHandler+0x5c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <EXTI15_10_IRQHandler+0x3e>
		{
			cbKey12();
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <EXTI15_10_IRQHandler+0x5c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4798      	blx	r3
		}
		EXTI->PR = 1<<12;
 8002682:	4b05      	ldr	r3, [pc, #20]	; (8002698 <EXTI15_10_IRQHandler+0x54>)
 8002684:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002688:	615a      	str	r2, [r3, #20]
	}
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	4221012c 	.word	0x4221012c
 8002694:	20000368 	.word	0x20000368
 8002698:	40010400 	.word	0x40010400
 800269c:	42210130 	.word	0x42210130
 80026a0:	20000370 	.word	0x20000370

080026a4 <LED_Init>:
#include "led.h"

// LED is connected to PA4

void LED_Init(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
	RCC->APB2ENR	|= 1<<2;
 80026a8:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <LED_Init+0x3c>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	4a0c      	ldr	r2, [pc, #48]	; (80026e0 <LED_Init+0x3c>)
 80026ae:	f043 0304 	orr.w	r3, r3, #4
 80026b2:	6193      	str	r3, [r2, #24]
	GPIOA->CRL		&= 0XFFF0FFFF;
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <LED_Init+0x40>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0a      	ldr	r2, [pc, #40]	; (80026e4 <LED_Init+0x40>)
 80026ba:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80026be:	6013      	str	r3, [r2, #0]
	GPIOA->CRL		|= 0X00030000;  // PA4 push-pull output
 80026c0:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <LED_Init+0x40>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a07      	ldr	r2, [pc, #28]	; (80026e4 <LED_Init+0x40>)
 80026c6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80026ca:	6013      	str	r3, [r2, #0]
	GPIOA->ODR		|= 1<<4;        // PA4 High output
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <LED_Init+0x40>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4a04      	ldr	r2, [pc, #16]	; (80026e4 <LED_Init+0x40>)
 80026d2:	f043 0310 	orr.w	r3, r3, #16
 80026d6:	60d3      	str	r3, [r2, #12]
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40010800 	.word	0x40010800

080026e8 <Led_Enable>:

void Led_Enable(bool en)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	71fb      	strb	r3, [r7, #7]
	PA_OUT(4) = !en;
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	f083 0301 	eor.w	r3, r3, #1
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	4b03      	ldr	r3, [pc, #12]	; (8002708 <Led_Enable+0x20>)
 80026fc:	601a      	str	r2, [r3, #0]
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	42210190 	.word	0x42210190

0800270c <main>:
#define UART_BAUD 230400 	// 115200, 128000, 153600, 230400, 460800, 921600, 1500000, 2000000

void enable_control(void);

int main(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
	SYS_Init();
 8002710:	f000 f9e2 	bl	8002ad8 <SYS_Init>
	SYS_JTAG_Set(SYS_JTAG_SWD_DISABLE);
 8002714:	2002      	movs	r0, #2
 8002716:	f000 fa6d 	bl	8002bf4 <SYS_JTAG_Set>
	SYS_JTAG_Set(SYS_SWD_ENABLE);
 800271a:	2001      	movs	r0, #1
 800271c:	f000 fa6a 	bl	8002bf4 <SYS_JTAG_Set>
	USART_Init(UART_BAUD, true);
 8002720:	2101      	movs	r1, #1
 8002722:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8002726:	f000 fc53 	bl	8002fd0 <USART_Init>
	LED_Init();
 800272a:	f7ff ffbb 	bl	80026a4 <LED_Init>
	KEY_Init();
 800272e:	f7ff fe83 	bl	8002438 <KEY_Init>
	KEY_SetCallback(KEY_5, CONTROL_ToggleState);
 8002732:	490a      	ldr	r1, [pc, #40]	; (800275c <main+0x50>)
 8002734:	2005      	movs	r0, #5
 8002736:	f7ff fef5 	bl	8002524 <KEY_SetCallback>
	ANGLE_Init();
 800273a:	f7fe fc65 	bl	8001008 <ANGLE_Init>
	ENCODER_Init();
 800273e:	f7ff fdd1 	bl	80022e4 <ENCODER_Init>
	MOTOR_Init();
 8002742:	f000 f8e3 	bl	800290c <MOTOR_Init>
	CONTROL_Init();
 8002746:	f7fe fd2f 	bl	80011a8 <CONTROL_Init>

	TIMER1_Init(CONTROL_LOOP_PERIOD_MS);
 800274a:	2005      	movs	r0, #5
 800274c:	f000 fb6a 	bl	8002e24 <TIMER1_Init>
	TIMER1_SetCallback(CONTROL_Loop);
 8002750:	4803      	ldr	r0, [pc, #12]	; (8002760 <main+0x54>)
 8002752:	f000 fbd7 	bl	8002f04 <TIMER1_SetCallback>

	while (1)
	{
		CONTROL_BackgroundTask();
 8002756:	f7ff f8b1 	bl	80018bc <CONTROL_BackgroundTask>
 800275a:	e7fc      	b.n	8002756 <main+0x4a>
 800275c:	08001239 	.word	0x08001239
 8002760:	080012b9 	.word	0x080012b9

08002764 <InsertionSortMethod>:
 uint16  arraySize - array length
 Return
 void - nothing
*/
void InsertionSortMethod(sint16* ptrArray, uint16 arraySize)
{
 8002764:	b480      	push	{r7}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
	uint8 exit_flag;
	sint16 help_value;
	uint16 i_index;
	uint16 j_index = 1u;
 800276e:	2301      	movs	r3, #1
 8002770:	60fb      	str	r3, [r7, #12]
	do
	{/* Main Loop: j = 1,...N-1 */
		i_index = j_index - 1;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	3b01      	subs	r3, #1
 8002776:	613b      	str	r3, [r7, #16]
		help_value = ptrArray[j_index];
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	4413      	add	r3, r2
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	60bb      	str	r3, [r7, #8]
		exit_flag = FALSE;
 8002784:	2300      	movs	r3, #0
 8002786:	75fb      	strb	r3, [r7, #23]
		do
		{/* Loop: i= j-1, j-2,..., 0 */
			if(help_value >= ptrArray[i_index])
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	4413      	add	r3, r2
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	429a      	cmp	r2, r3
 8002796:	db09      	blt.n	80027ac <InsertionSortMethod+0x48>
			{/* Insert the A[j] in the suitable position */
				ptrArray[i_index+1] = help_value;
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	3301      	adds	r3, #1
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	601a      	str	r2, [r3, #0]
				exit_flag = TRUE;
 80027a6:	2301      	movs	r3, #1
 80027a8:	75fb      	strb	r3, [r7, #23]
 80027aa:	e019      	b.n	80027e0 <InsertionSortMethod+0x7c>
			}
			else
			{/* Shift the A[i] to A[i+1] */
				ptrArray[i_index+1] = ptrArray[i_index];
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	441a      	add	r2, r3
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	3301      	adds	r3, #1
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	440b      	add	r3, r1
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	601a      	str	r2, [r3, #0]
				if(0 == i_index)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d108      	bne.n	80027da <InsertionSortMethod+0x76>
				{/* First array element */
					ptrArray[i_index] = help_value;
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	4413      	add	r3, r2
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	601a      	str	r2, [r3, #0]
					exit_flag = TRUE;
 80027d4:	2301      	movs	r3, #1
 80027d6:	75fb      	strb	r3, [r7, #23]
 80027d8:	e002      	b.n	80027e0 <InsertionSortMethod+0x7c>
				}
				else
				{/* i = j-1,..., 0 */
					i_index--;
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	3b01      	subs	r3, #1
 80027de:	613b      	str	r3, [r7, #16]
				}
			}
		} while(FALSE == exit_flag);
 80027e0:	7dfb      	ldrb	r3, [r7, #23]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0d0      	beq.n	8002788 <InsertionSortMethod+0x24>
		j_index++;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	3301      	adds	r3, #1
 80027ea:	60fb      	str	r3, [r7, #12]
	} while(j_index < arraySize);
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d3be      	bcc.n	8002772 <InsertionSortMethod+0xe>
}
 80027f4:	bf00      	nop
 80027f6:	bf00      	nop
 80027f8:	371c      	adds	r7, #28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <ClassicMedianFilter>:
 uint16  arraySize - array length
 Return
 sint16 - filter output
*/
sint16 ClassicMedianFilter(sint16* ptrArray, uint16 arraySize)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
	sint16 returnValue;
	
	if(arraySize > 1u)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d926      	bls.n	800285e <ClassicMedianFilter+0x5e>
	{
		InsertionSortMethod(ptrArray,arraySize);
 8002810:	6839      	ldr	r1, [r7, #0]
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff ffa6 	bl	8002764 <InsertionSortMethod>
		if(0 == (arraySize&1u))
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d114      	bne.n	800284c <ClassicMedianFilter+0x4c>
		{/* Even number */
			returnValue = (ptrArray[(arraySize/2)-1]+ptrArray[arraySize/2])/2;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	085b      	lsrs	r3, r3, #1
 8002826:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800282a:	3b01      	subs	r3, #1
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	085b      	lsrs	r3, r3, #1
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	440b      	add	r3, r1
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4413      	add	r3, r2
 8002842:	0fda      	lsrs	r2, r3, #31
 8002844:	4413      	add	r3, r2
 8002846:	105b      	asrs	r3, r3, #1
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	e00b      	b.n	8002864 <ClassicMedianFilter+0x64>
		}
		else
		{/* Odd number */
			returnValue = ptrArray[(arraySize-1)/2];
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	3b01      	subs	r3, #1
 8002850:	085b      	lsrs	r3, r3, #1
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	4413      	add	r3, r2
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	e002      	b.n	8002864 <ClassicMedianFilter+0x64>
		}
	}
	else
	{/* Array has only one element */
		returnValue = ptrArray[0];
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	60fb      	str	r3, [r7, #12]
	}
	return returnValue;
 8002864:	68fb      	ldr	r3, [r7, #12]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <AdvanceMedianFilter>:
 Return
 sint16 - filter output
*/
#define ADVANCE_MEDIAN_DELTA  36 /* Only example value */
sint16 AdvanceMedianFilter(sint16* ptrArray, uint16 arraySize)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b088      	sub	sp, #32
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	6039      	str	r1, [r7, #0]
	sint32 sumValue;
	uint32 numberValue;
	sint32 deltaValue;
	uint16 indexLoop;
	
	helpValue = ClassicMedianFilter(ptrArray,arraySize);
 8002878:	6839      	ldr	r1, [r7, #0]
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff ffc0 	bl	8002800 <ClassicMedianFilter>
 8002880:	60b8      	str	r0, [r7, #8]
	
	for(indexLoop=0, sumValue=0, numberValue=0; indexLoop < arraySize; indexLoop++)
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	2300      	movs	r3, #0
 8002888:	61bb      	str	r3, [r7, #24]
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	e029      	b.n	80028e4 <AdvanceMedianFilter+0x76>
	{
		if(helpValue >= ptrArray[indexLoop])
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	4413      	add	r3, r2
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	429a      	cmp	r2, r3
 800289e:	db08      	blt.n	80028b2 <AdvanceMedianFilter+0x44>
		{
			deltaValue = helpValue - ptrArray[indexLoop];
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	4413      	add	r3, r2
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	e007      	b.n	80028c2 <AdvanceMedianFilter+0x54>
		}
		else
		{
			deltaValue = ptrArray[indexLoop] - helpValue;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	4413      	add	r3, r2
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	613b      	str	r3, [r7, #16]
		}
		if(deltaValue <= ADVANCE_MEDIAN_DELTA)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	2b24      	cmp	r3, #36	; 0x24
 80028c6:	dc0a      	bgt.n	80028de <AdvanceMedianFilter+0x70>
		{
			sumValue += ptrArray[indexLoop];
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	4413      	add	r3, r2
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4413      	add	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
			numberValue++;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	3301      	adds	r3, #1
 80028dc:	617b      	str	r3, [r7, #20]
	for(indexLoop=0, sumValue=0, numberValue=0; indexLoop < arraySize; indexLoop++)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	3301      	adds	r3, #1
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d3d1      	bcc.n	8002890 <AdvanceMedianFilter+0x22>
		}
	}
	if(0 == numberValue)
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d102      	bne.n	80028f8 <AdvanceMedianFilter+0x8a>
	{
		returnValue = helpValue;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	e004      	b.n	8002902 <AdvanceMedianFilter+0x94>
	}
	else
	{
		returnValue = sumValue / numberValue;
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002900:	61fb      	str	r3, [r7, #28]
	}
	return returnValue;
 8002902:	69fb      	ldr	r3, [r7, #28]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3720      	adds	r7, #32
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <MOTOR_Init>:
#include "motor.h"

// PWM base frequency is 10 kHz
void MOTOR_Init(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
	RCC->APB2ENR	|= 1<<3;		// PORTB Clock enable  
 8002910:	4b41      	ldr	r3, [pc, #260]	; (8002a18 <MOTOR_Init+0x10c>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	4a40      	ldr	r2, [pc, #256]	; (8002a18 <MOTOR_Init+0x10c>)
 8002916:	f043 0308 	orr.w	r3, r3, #8
 800291a:	6193      	str	r3, [r2, #24]
	GPIOB->CRH		&= 0x0000FFFF;	// PORTB12 13 14 15 push-pull
 800291c:	4b3f      	ldr	r3, [pc, #252]	; (8002a1c <MOTOR_Init+0x110>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4a3e      	ldr	r2, [pc, #248]	; (8002a1c <MOTOR_Init+0x110>)
 8002922:	b29b      	uxth	r3, r3
 8002924:	6053      	str	r3, [r2, #4]
	GPIOB->CRH		|= 0x22220000;	// PORTB12 13 14 15 push-pull
 8002926:	4b3d      	ldr	r3, [pc, #244]	; (8002a1c <MOTOR_Init+0x110>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4a3c      	ldr	r2, [pc, #240]	; (8002a1c <MOTOR_Init+0x110>)
 800292c:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8002930:	f443 1308 	orr.w	r3, r3, #2228224	; 0x220000
 8002934:	6053      	str	r3, [r2, #4]

	RCC->APB1ENR	|= 1<<1;		// TIM3 clock enable    
 8002936:	4b38      	ldr	r3, [pc, #224]	; (8002a18 <MOTOR_Init+0x10c>)
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	4a37      	ldr	r2, [pc, #220]	; (8002a18 <MOTOR_Init+0x10c>)
 800293c:	f043 0302 	orr.w	r3, r3, #2
 8002940:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR	|= 1<<3;		// PORTB clock enable   
 8002942:	4b35      	ldr	r3, [pc, #212]	; (8002a18 <MOTOR_Init+0x10c>)
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	4a34      	ldr	r2, [pc, #208]	; (8002a18 <MOTOR_Init+0x10c>)
 8002948:	f043 0308 	orr.w	r3, r3, #8
 800294c:	6193      	str	r3, [r2, #24]
	GPIOB->CRL		&= 0XFFFFFF00;	// PORTB0 1 multiplexing output
 800294e:	4b33      	ldr	r3, [pc, #204]	; (8002a1c <MOTOR_Init+0x110>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a32      	ldr	r2, [pc, #200]	; (8002a1c <MOTOR_Init+0x110>)
 8002954:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002958:	6013      	str	r3, [r2, #0]
	GPIOB->CRL		|=0X000000BB;   // PORTB0 1 Multiplexed output
 800295a:	4b30      	ldr	r3, [pc, #192]	; (8002a1c <MOTOR_Init+0x110>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a2f      	ldr	r2, [pc, #188]	; (8002a1c <MOTOR_Init+0x110>)
 8002960:	f043 03bb 	orr.w	r3, r3, #187	; 0xbb
 8002964:	6013      	str	r3, [r2, #0]
	TIM3->ARR		 = 7199;		// Setting counter automatic reload value
 8002966:	4b2e      	ldr	r3, [pc, #184]	; (8002a20 <MOTOR_Init+0x114>)
 8002968:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800296c:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM3->PSC		 = 0;			// Prescaler non frequency division
 800296e:	4b2c      	ldr	r3, [pc, #176]	; (8002a20 <MOTOR_Init+0x114>)
 8002970:	2200      	movs	r2, #0
 8002972:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM3->CCMR2		|= 6<<12;		// CH4 PWM1 mode	
 8002974:	4b2a      	ldr	r3, [pc, #168]	; (8002a20 <MOTOR_Init+0x114>)
 8002976:	8b9b      	ldrh	r3, [r3, #28]
 8002978:	b29b      	uxth	r3, r3
 800297a:	4a29      	ldr	r2, [pc, #164]	; (8002a20 <MOTOR_Init+0x114>)
 800297c:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8002980:	b29b      	uxth	r3, r3
 8002982:	8393      	strh	r3, [r2, #28]
	TIM3->CCMR2		|= 6<<4;		// CH3 PWM1 mode	
 8002984:	4b26      	ldr	r3, [pc, #152]	; (8002a20 <MOTOR_Init+0x114>)
 8002986:	8b9b      	ldrh	r3, [r3, #28]
 8002988:	b29b      	uxth	r3, r3
 800298a:	4a25      	ldr	r2, [pc, #148]	; (8002a20 <MOTOR_Init+0x114>)
 800298c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002990:	b29b      	uxth	r3, r3
 8002992:	8393      	strh	r3, [r2, #28]
	TIM3->CCMR2		|= 1<<11;		// CH4 Pre load enable energy	 
 8002994:	4b22      	ldr	r3, [pc, #136]	; (8002a20 <MOTOR_Init+0x114>)
 8002996:	8b9b      	ldrh	r3, [r3, #28]
 8002998:	b29b      	uxth	r3, r3
 800299a:	4a21      	ldr	r2, [pc, #132]	; (8002a20 <MOTOR_Init+0x114>)
 800299c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	8393      	strh	r3, [r2, #28]
	TIM3->CCMR2		|= 1<<3; 		// CH3 Pre load enable energy
 80029a4:	4b1e      	ldr	r3, [pc, #120]	; (8002a20 <MOTOR_Init+0x114>)
 80029a6:	8b9b      	ldrh	r3, [r3, #28]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	4a1d      	ldr	r2, [pc, #116]	; (8002a20 <MOTOR_Init+0x114>)
 80029ac:	f043 0308 	orr.w	r3, r3, #8
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	8393      	strh	r3, [r2, #28]
	TIM3->CCER		|= 1<<12;		// CH4 Output enable   
 80029b4:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <MOTOR_Init+0x114>)
 80029b6:	8c1b      	ldrh	r3, [r3, #32]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	4a19      	ldr	r2, [pc, #100]	; (8002a20 <MOTOR_Init+0x114>)
 80029bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	8413      	strh	r3, [r2, #32]
	TIM3->CCER		|= 1<<8;		// CH3 Output enable	
 80029c4:	4b16      	ldr	r3, [pc, #88]	; (8002a20 <MOTOR_Init+0x114>)
 80029c6:	8c1b      	ldrh	r3, [r3, #32]
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	4a15      	ldr	r2, [pc, #84]	; (8002a20 <MOTOR_Init+0x114>)
 80029cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	8413      	strh	r3, [r2, #32]
	TIM3->CR1		 = 0x80;		// ARPE Make energy 
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <MOTOR_Init+0x114>)
 80029d6:	2280      	movs	r2, #128	; 0x80
 80029d8:	801a      	strh	r2, [r3, #0]
	TIM3->CR1		|= 0x01;		// Enabling timer 3 
 80029da:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <MOTOR_Init+0x114>)
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	4a0f      	ldr	r2, [pc, #60]	; (8002a20 <MOTOR_Init+0x114>)
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	8013      	strh	r3, [r2, #0]

	PB_OUT(13) 		= 0;			// AIN1
 80029ea:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <MOTOR_Init+0x118>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
	PB_OUT(12) 		= 0;			// AIN2
 80029f0:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <MOTOR_Init+0x11c>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
	PB_OUT(14) 		= 0;			// BIN1
 80029f6:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <MOTOR_Init+0x120>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
	PB_OUT(15) 		= 0;			// BIN2
 80029fc:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <MOTOR_Init+0x124>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
	TIM3->CCR3 		= 0;
 8002a02:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <MOTOR_Init+0x114>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	879a      	strh	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 		= 0;
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <MOTOR_Init+0x114>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 8002a10:	bf00      	nop
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40010c00 	.word	0x40010c00
 8002a20:	40000400 	.word	0x40000400
 8002a24:	422181b4 	.word	0x422181b4
 8002a28:	422181b0 	.word	0x422181b0
 8002a2c:	422181b8 	.word	0x422181b8
 8002a30:	422181bc 	.word	0x422181bc

08002a34 <MOTOR_Stop>:

void MOTOR_Stop(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
    TIM3->CCR4 = 0;
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <MOTOR_Stop+0x20>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	PB_OUT(13) = 0;					// AIN1
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <MOTOR_Stop+0x24>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
	PB_OUT(12) = 0;					// AIN2
 8002a46:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <MOTOR_Stop+0x28>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr
 8002a54:	40000400 	.word	0x40000400
 8002a58:	422181b4 	.word	0x422181b4
 8002a5c:	422181b0 	.word	0x422181b0

08002a60 <MOTOR_SetSpeed>:

void MOTOR_SetSpeed(int speed)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
#ifdef POLOLU_MOTOR
	speed=-speed; // tobi
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	425b      	negs	r3, r3
 8002a6c:	607b      	str	r3, [r7, #4]
#endif

	if (speed == 0)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d106      	bne.n	8002a82 <MOTOR_SetSpeed+0x22>
    {
        PB_OUT(13) = 0;					// AIN1
 8002a74:	4b15      	ldr	r3, [pc, #84]	; (8002acc <MOTOR_SetSpeed+0x6c>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
        PB_OUT(12) = 0;					// AIN2
 8002a7a:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <MOTOR_SetSpeed+0x70>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	e012      	b.n	8002aa8 <MOTOR_SetSpeed+0x48>
    }
	// Set direction (values less than 0 indicate left)
	else if (speed < 0)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	da09      	bge.n	8002a9c <MOTOR_SetSpeed+0x3c>
	{
		PB_OUT(13) = 0;				// AIN1
 8002a88:	4b10      	ldr	r3, [pc, #64]	; (8002acc <MOTOR_SetSpeed+0x6c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
		PB_OUT(12) = 1;				// AIN2
 8002a8e:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <MOTOR_SetSpeed+0x70>)
 8002a90:	2201      	movs	r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
		speed = -speed;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	425b      	negs	r3, r3
 8002a98:	607b      	str	r3, [r7, #4]
 8002a9a:	e005      	b.n	8002aa8 <MOTOR_SetSpeed+0x48>
	}
	else
	{
		PB_OUT(13) = 1;				// AIN1
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <MOTOR_SetSpeed+0x6c>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]
		PB_OUT(12) = 0;				// AIN2
 8002aa2:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <MOTOR_SetSpeed+0x70>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
	}
	
  speed = (speed > MOTOR_FULL_SCALE) ? MOTOR_FULL_SCALE : speed;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	bfa8      	it	ge
 8002ab2:	4613      	movge	r3, r2
 8002ab4:	607b      	str	r3, [r7, #4]
	TIM3->CCR4 = (uint16_t)speed;
 8002ab6:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <MOTOR_SetSpeed+0x74>)
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	b292      	uxth	r2, r2
 8002abc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	422181b4 	.word	0x422181b4
 8002ad0:	422181b0 	.word	0x422181b0
 8002ad4:	40000400 	.word	0x40000400

08002ad8 <SYS_Init>:
#include "sys.h" 

// Initialise system		 
void SYS_Init(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
	unsigned int temp = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	607b      	str	r3, [r7, #4]

	// Reset all clock registers.	  
 	RCC->APB1RSTR	 = 0x00000000;		 
 8002ae2:	4b3f      	ldr	r3, [pc, #252]	; (8002be0 <SYS_Init+0x108>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	611a      	str	r2, [r3, #16]
	RCC->APB2RSTR	 = 0x00000000; 
 8002ae8:	4b3d      	ldr	r3, [pc, #244]	; (8002be0 <SYS_Init+0x108>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	60da      	str	r2, [r3, #12]
  	RCC->AHBENR		 = 0x00000014;	  
 8002aee:	4b3c      	ldr	r3, [pc, #240]	; (8002be0 <SYS_Init+0x108>)
 8002af0:	2214      	movs	r2, #20
 8002af2:	615a      	str	r2, [r3, #20]
  	RCC->APB2ENR 	 = 0x00000000;		   
 8002af4:	4b3a      	ldr	r3, [pc, #232]	; (8002be0 <SYS_Init+0x108>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	619a      	str	r2, [r3, #24]
  	RCC->APB1ENR	 = 0x00000000;   
 8002afa:	4b39      	ldr	r3, [pc, #228]	; (8002be0 <SYS_Init+0x108>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	61da      	str	r2, [r3, #28]
	RCC->CR 		|= 0x00000001;  // Enable internal high-speed clock HSION	 															 
 8002b00:	4b37      	ldr	r3, [pc, #220]	; (8002be0 <SYS_Init+0x108>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a36      	ldr	r2, [pc, #216]	; (8002be0 <SYS_Init+0x108>)
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	6013      	str	r3, [r2, #0]
	RCC->CFGR 		&= 0xF8FF0000;  // Reset SW[1:0],HPRE[3:0],PPRE1[2:0],PPRE2[2:0],ADCPRE[1:0],MCO[2:0]					 
 8002b0c:	4b34      	ldr	r3, [pc, #208]	; (8002be0 <SYS_Init+0x108>)
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	4933      	ldr	r1, [pc, #204]	; (8002be0 <SYS_Init+0x108>)
 8002b12:	4b34      	ldr	r3, [pc, #208]	; (8002be4 <SYS_Init+0x10c>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]
	RCC->CR			&= 0xFEF6FFFF;  // Reset HSEON,CSSON,PLLON
 8002b18:	4b31      	ldr	r3, [pc, #196]	; (8002be0 <SYS_Init+0x108>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a30      	ldr	r2, [pc, #192]	; (8002be0 <SYS_Init+0x108>)
 8002b1e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b26:	6013      	str	r3, [r2, #0]
	RCC->CR			&= 0xFFFBFFFF;  // Reset HSEBYP	   	  
 8002b28:	4b2d      	ldr	r3, [pc, #180]	; (8002be0 <SYS_Init+0x108>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a2c      	ldr	r2, [pc, #176]	; (8002be0 <SYS_Init+0x108>)
 8002b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b32:	6013      	str	r3, [r2, #0]
	RCC->CFGR		&= 0xFF80FFFF;	// Reset PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE 
 8002b34:	4b2a      	ldr	r3, [pc, #168]	; (8002be0 <SYS_Init+0x108>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4a29      	ldr	r2, [pc, #164]	; (8002be0 <SYS_Init+0x108>)
 8002b3a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002b3e:	6053      	str	r3, [r2, #4]
	RCC->CIR 		 = 0x00000000;	// Close all interrupts	
 8002b40:	4b27      	ldr	r3, [pc, #156]	; (8002be0 <SYS_Init+0x108>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]

	// Configure vector table (RAM or Code area)			  
	#ifdef  VECT_TAB_RAM
	SCB->VTOR = 0x20000000|(0x0 & 0x1FFFFF80UL);
	#else
	SCB->VTOR = 0x08000000|(0x0 & 0x1FFFFF80UL);
 8002b46:	4b28      	ldr	r3, [pc, #160]	; (8002be8 <SYS_Init+0x110>)
 8002b48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b4c:	609a      	str	r2, [r3, #8]
	#endif

	// System clock -- PLL on with 72 MHz system clock
 	RCC->CR			|= 0x00010000;	// HSEON
 8002b4e:	4b24      	ldr	r3, [pc, #144]	; (8002be0 <SYS_Init+0x108>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a23      	ldr	r2, [pc, #140]	; (8002be0 <SYS_Init+0x108>)
 8002b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b58:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR>>17));
 8002b5a:	bf00      	nop
 8002b5c:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <SYS_Init+0x108>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	0c5b      	lsrs	r3, r3, #17
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0fa      	beq.n	8002b5c <SYS_Init+0x84>

	RCC->CFGR		 = 0x00000400;	// APB1=DIV2, APB2=DIV1, AHB=DIV1
 8002b66:	4b1e      	ldr	r3, [pc, #120]	; (8002be0 <SYS_Init+0x108>)
 8002b68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b6c:	605a      	str	r2, [r3, #4]
	RCC->CFGR		|= 7<<18;		// PLL multiplication 9
 8002b6e:	4b1c      	ldr	r3, [pc, #112]	; (8002be0 <SYS_Init+0x108>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4a1b      	ldr	r2, [pc, #108]	; (8002be0 <SYS_Init+0x108>)
 8002b74:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8002b78:	6053      	str	r3, [r2, #4]
	RCC->CFGR		|= 1<<16;	 	// PLLSRC on 
 8002b7a:	4b19      	ldr	r3, [pc, #100]	; (8002be0 <SYS_Init+0x108>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	4a18      	ldr	r2, [pc, #96]	; (8002be0 <SYS_Init+0x108>)
 8002b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b84:	6053      	str	r3, [r2, #4]
	FLASH->ACR		|= 0x32;
 8002b86:	4b19      	ldr	r3, [pc, #100]	; (8002bec <SYS_Init+0x114>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a18      	ldr	r2, [pc, #96]	; (8002bec <SYS_Init+0x114>)
 8002b8c:	f043 0332 	orr.w	r3, r3, #50	; 0x32
 8002b90:	6013      	str	r3, [r2, #0]

	RCC->CR			|= 0x01000000;	// PLLON
 8002b92:	4b13      	ldr	r3, [pc, #76]	; (8002be0 <SYS_Init+0x108>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a12      	ldr	r2, [pc, #72]	; (8002be0 <SYS_Init+0x108>)
 8002b98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b9c:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR>>25));
 8002b9e:	bf00      	nop
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <SYS_Init+0x108>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	0e5b      	lsrs	r3, r3, #25
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0fa      	beq.n	8002ba0 <SYS_Init+0xc8>

	RCC->CFGR		|= 0x00000002; 
 8002baa:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <SYS_Init+0x108>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	4a0c      	ldr	r2, [pc, #48]	; (8002be0 <SYS_Init+0x108>)
 8002bb0:	f043 0302 	orr.w	r3, r3, #2
 8002bb4:	6053      	str	r3, [r2, #4]
	while (temp != 0x02)
 8002bb6:	e005      	b.n	8002bc4 <SYS_Init+0xec>
	{   
		temp = (RCC->CFGR >> 2) & 0x03UL;
 8002bb8:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <SYS_Init+0x108>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	089b      	lsrs	r3, r3, #2
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	607b      	str	r3, [r7, #4]
	while (temp != 0x02)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d1f6      	bne.n	8002bb8 <SYS_Init+0xe0>
	}

	// Initalise Delay Timer (clock runs at 72/8 = 9 MHz)
	SysTick->CTRL &= ~(1<<2);		// SYSTICK uses external clock source.
 8002bca:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <SYS_Init+0x118>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <SYS_Init+0x118>)
 8002bd0:	f023 0304 	bic.w	r3, r3, #4
 8002bd4:	6013      	str	r3, [r2, #0]
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr
 8002be0:	40021000 	.word	0x40021000
 8002be4:	f8ff0000 	.word	0xf8ff0000
 8002be8:	e000ed00 	.word	0xe000ed00
 8002bec:	40022000 	.word	0x40022000
 8002bf0:	e000e010 	.word	0xe000e010

08002bf4 <SYS_JTAG_Set>:

void SYS_JTAG_Set(unsigned int mode)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
	mode <<= 25;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	065b      	lsls	r3, r3, #25
 8002c00:	607b      	str	r3, [r7, #4]
	RCC->APB2ENR	|= 1<<0;  
 8002c02:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <SYS_JTAG_Set+0x3c>)
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <SYS_JTAG_Set+0x3c>)
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	6193      	str	r3, [r2, #24]
	AFIO->MAPR		&= 0xF8FFFFFF;
 8002c0e:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <SYS_JTAG_Set+0x40>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	4a08      	ldr	r2, [pc, #32]	; (8002c34 <SYS_JTAG_Set+0x40>)
 8002c14:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c18:	6053      	str	r3, [r2, #4]
	AFIO->MAPR		|= mode;
 8002c1a:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <SYS_JTAG_Set+0x40>)
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	4905      	ldr	r1, [pc, #20]	; (8002c34 <SYS_JTAG_Set+0x40>)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	604b      	str	r3, [r1, #4]
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40010000 	.word	0x40010000

08002c38 <SYS_NVIC_Init>:
// 		group 2:2 preemptive priority, 2 bit response priority.
// 		group 3:3 preemptive priority, 1 bit response priority.
// 		group 4:4 preemptive priority, 0 bit response priority.
// The principle of priority and priority is that the smaller the value, the more priority.   
void SYS_NVIC_Init(unsigned int priority, unsigned int subPriority, unsigned int channel, unsigned int group)	 
{ 
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	603b      	str	r3, [r7, #0]
	unsigned int temp1, temp2;  

	temp1 = (~group) & 0x07;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	617b      	str	r3, [r7, #20]
	temp1 <<= 8;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	021b      	lsls	r3, r3, #8
 8002c54:	617b      	str	r3, [r7, #20]
	temp2  = SCB->AIRCR; // Read previous settings
 8002c56:	4b28      	ldr	r3, [pc, #160]	; (8002cf8 <SYS_NVIC_Init+0xc0>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	613b      	str	r3, [r7, #16]
	temp2 &= 0x0000F8FF; // Empty previous group
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c62:	4013      	ands	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
	temp2 |= 0x05FA0000; // Write the key
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c70:	613b      	str	r3, [r7, #16]
	temp2 |= temp1;
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
	SCB->AIRCR = temp2;  // Set groupings
 8002c7a:	4a1f      	ldr	r2, [pc, #124]	; (8002cf8 <SYS_NVIC_Init+0xc0>)
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	60d3      	str	r3, [r2, #12]
	
	temp2  = priority << (4 - group);	  
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	f1c3 0304 	rsb	r3, r3, #4
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	613b      	str	r3, [r7, #16]
	temp2 |= subPriority & (0x0FUL >> group);
 8002c8e:	220f      	movs	r2, #15
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	40da      	lsrs	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4013      	ands	r3, r2
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
	temp2 &= 0x0FUL;  
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	613b      	str	r3, [r7, #16]
	NVIC->ISER[channel/32] |= (1 << channel%32);
 8002ca6:	4a15      	ldr	r2, [pc, #84]	; (8002cfc <SYS_NVIC_Init+0xc4>)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	f001 011f 	and.w	r1, r1, #31
 8002cb6:	2001      	movs	r0, #1
 8002cb8:	fa00 f101 	lsl.w	r1, r0, r1
 8002cbc:	4608      	mov	r0, r1
 8002cbe:	490f      	ldr	r1, [pc, #60]	; (8002cfc <SYS_NVIC_Init+0xc4>)
 8002cc0:	4302      	orrs	r2, r0
 8002cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	NVIC->IP[channel] |= temp2 << 4;				   
 8002cc6:	4a0d      	ldr	r2, [pc, #52]	; (8002cfc <SYS_NVIC_Init+0xc4>)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	4907      	ldr	r1, [pc, #28]	; (8002cfc <SYS_NVIC_Init+0xc4>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	440b      	add	r3, r1
 8002ce6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002cea:	701a      	strb	r2, [r3, #0]
} 
 8002cec:	bf00      	nop
 8002cee:	371c      	adds	r7, #28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	e000ed00 	.word	0xe000ed00
 8002cfc:	e000e100 	.word	0xe000e100

08002d00 <SYS_EXTI_Config>:
// External interrupt configuration for GPIOA~G pins.
//	port	Select GPIOA~G
//	bit		Which bit to enable
//	trig	Trigger mode: rising/falling/both
void SYS_EXTI_Config(unsigned int port, unsigned int bit, unsigned int trig) 
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
	unsigned int addr;
	unsigned int offset;

	addr   = bit/4;								// Get the number of interrupt register group.
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	089b      	lsrs	r3, r3, #2
 8002d10:	617b      	str	r3, [r7, #20]
	offset = (bit%4) * 4;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	613b      	str	r3, [r7, #16]

	RCC->APB2ENR		|=0x01;					// Enable IO to reuse clock			 
 8002d1c:	4b28      	ldr	r3, [pc, #160]	; (8002dc0 <SYS_EXTI_Config+0xc0>)
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	4a27      	ldr	r2, [pc, #156]	; (8002dc0 <SYS_EXTI_Config+0xc0>)
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	6193      	str	r3, [r2, #24]
	AFIO->EXTICR[addr]	&= ~(0x0FUL << offset);
 8002d28:	4a26      	ldr	r2, [pc, #152]	; (8002dc4 <SYS_EXTI_Config+0xc4>)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d32:	210f      	movs	r1, #15
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	4921      	ldr	r1, [pc, #132]	; (8002dc4 <SYS_EXTI_Config+0xc4>)
 8002d3e:	401a      	ands	r2, r3
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	3302      	adds	r3, #2
 8002d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[addr]	|= port << offset;		// EXTI.bit mapping to GPIOx.bit
 8002d48:	4a1e      	ldr	r2, [pc, #120]	; (8002dc4 <SYS_EXTI_Config+0xc4>)
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	3302      	adds	r3, #2
 8002d4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d52:	68f9      	ldr	r1, [r7, #12]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5a:	491a      	ldr	r1, [pc, #104]	; (8002dc4 <SYS_EXTI_Config+0xc4>)
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	3302      	adds	r3, #2
 8002d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	EXTI->IMR			|= 1 << bit;			// Open the interrupt on line BITx
 8002d66:	4b18      	ldr	r3, [pc, #96]	; (8002dc8 <SYS_EXTI_Config+0xc8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d72:	4611      	mov	r1, r2
 8002d74:	4a14      	ldr	r2, [pc, #80]	; (8002dc8 <SYS_EXTI_Config+0xc8>)
 8002d76:	430b      	orrs	r3, r1
 8002d78:	6013      	str	r3, [r2, #0]

	if (trig & 0x01) EXTI->FTSR |= 1 << bit;	// Event descending edge triggering on line BITx
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d009      	beq.n	8002d98 <SYS_EXTI_Config+0x98>
 8002d84:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <SYS_EXTI_Config+0xc8>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	2101      	movs	r1, #1
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d90:	4611      	mov	r1, r2
 8002d92:	4a0d      	ldr	r2, [pc, #52]	; (8002dc8 <SYS_EXTI_Config+0xc8>)
 8002d94:	430b      	orrs	r3, r1
 8002d96:	60d3      	str	r3, [r2, #12]
	if (trig & 0x02) EXTI->RTSR |= 1 << bit;	// Event rising and falling edge triggering on line BITx
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <SYS_EXTI_Config+0xb6>
 8002da2:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <SYS_EXTI_Config+0xc8>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2101      	movs	r1, #1
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	fa01 f202 	lsl.w	r2, r1, r2
 8002dae:	4611      	mov	r1, r2
 8002db0:	4a05      	ldr	r2, [pc, #20]	; (8002dc8 <SYS_EXTI_Config+0xc8>)
 8002db2:	430b      	orrs	r3, r1
 8002db4:	6093      	str	r3, [r2, #8]
} 
 8002db6:	bf00      	nop
 8002db8:	371c      	adds	r7, #28
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40010000 	.word	0x40010000
 8002dc8:	40010400 	.word	0x40010400

08002dcc <SYS_DelayMS>:
	SysTick->VAL 	= 0X00;       // Empty counter
}

// Max delay is 1864 ms
void SYS_DelayMS(unsigned int ms)
{	 		  	  
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
	unsigned int temp;

	SysTick->LOAD	= ms * 9000UL;	// Time loading	  		 
 8002dd4:	4a12      	ldr	r2, [pc, #72]	; (8002e20 <SYS_DelayMS+0x54>)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f242 3128 	movw	r1, #9000	; 0x2328
 8002ddc:	fb01 f303 	mul.w	r3, r1, r3
 8002de0:	6053      	str	r3, [r2, #4]
	SysTick->VAL	= 0x00;			// Empty counter
 8002de2:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <SYS_DelayMS+0x54>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	609a      	str	r2, [r3, #8]
	SysTick->CTRL	= 0x01;			// Start the countdown 	 
 8002de8:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <SYS_DelayMS+0x54>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	601a      	str	r2, [r3, #0]

	do
	{
		temp = SysTick->CTRL;
 8002dee:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <SYS_DelayMS+0x54>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60fb      	str	r3, [r7, #12]
	}
	while ((temp & 0x01) && !(temp & (1<<16)));  
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d004      	beq.n	8002e08 <SYS_DelayMS+0x3c>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f2      	beq.n	8002dee <SYS_DelayMS+0x22>
	SysTick->CTRL	= 0x00;       // Close counter
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <SYS_DelayMS+0x54>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
	SysTick->VAL 	= 0X00;       // Empty counter  	    
 8002e0e:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <SYS_DelayMS+0x54>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	609a      	str	r2, [r3, #8]
}  	    
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	e000e010 	.word	0xe000e010

08002e24 <TIMER1_Init>:
unsigned int periodMS = 0;

// Timer base is configured to be 1MHz (resolution of 1us)
// periodMS sets the period of the interrupt in ms (max value is 6553 ms)
void TIMER1_Init(unsigned int _periodMS)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
	periodMS = _periodMS;
 8002e2c:	4a1f      	ldr	r2, [pc, #124]	; (8002eac <TIMER1_Init+0x88>)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6013      	str	r3, [r2, #0]

	cbTimer1 = 0;
 8002e32:	4b1f      	ldr	r3, [pc, #124]	; (8002eb0 <TIMER1_Init+0x8c>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]

	RCC->APB2ENR	|= 1<<11;					// TIM1 clock enable
 8002e38:	4b1e      	ldr	r3, [pc, #120]	; (8002eb4 <TIMER1_Init+0x90>)
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	4a1d      	ldr	r2, [pc, #116]	; (8002eb4 <TIMER1_Init+0x90>)
 8002e3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e42:	6193      	str	r3, [r2, #24]
 	TIM1->ARR		 = (periodMS * 1000) - 1;	// Setting counter automatic reload value
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <TIMER1_Init+0x88>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	0152      	lsls	r2, r2, #5
 8002e4e:	1ad2      	subs	r2, r2, r3
 8002e50:	0092      	lsls	r2, r2, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	4a17      	ldr	r2, [pc, #92]	; (8002eb8 <TIMER1_Init+0x94>)
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	8593      	strh	r3, [r2, #44]	; 0x2c
	TIM1->PSC		 = 72;						// The prescaler 7200 gets the count clock of 1Mhz.
 8002e60:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <TIMER1_Init+0x94>)
 8002e62:	2248      	movs	r2, #72	; 0x48
 8002e64:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM1->DIER		|= 1<<0;   					// Enable update interrupt
 8002e66:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <TIMER1_Init+0x94>)
 8002e68:	899b      	ldrh	r3, [r3, #12]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	4a12      	ldr	r2, [pc, #72]	; (8002eb8 <TIMER1_Init+0x94>)
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	8193      	strh	r3, [r2, #12]
	TIM1->DIER		|= 1<<6;   					// Enable triggered interrupt
 8002e76:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <TIMER1_Init+0x94>)
 8002e78:	899b      	ldrh	r3, [r3, #12]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	4a0e      	ldr	r2, [pc, #56]	; (8002eb8 <TIMER1_Init+0x94>)
 8002e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	8193      	strh	r3, [r2, #12]
	TIM1->CR1		|= 0x01;					// Enable timer
 8002e86:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <TIMER1_Init+0x94>)
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	4a0a      	ldr	r2, [pc, #40]	; (8002eb8 <TIMER1_Init+0x94>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	8013      	strh	r3, [r2, #0]
	SYS_NVIC_Init(1, 1, TIM1_UP_IRQn, 2);
 8002e96:	2302      	movs	r3, #2
 8002e98:	2219      	movs	r2, #25
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	f7ff fecb 	bl	8002c38 <SYS_NVIC_Init>
}  
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000134 	.word	0x20000134
 8002eb0:	20000374 	.word	0x20000374
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	40012c00 	.word	0x40012c00

08002ebc <TIMER1_ChangePeriod>:

void TIMER1_ChangePeriod(unsigned int _periodMS)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
	timer_resets = 0;
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <TIMER1_ChangePeriod+0x3c>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
	periodMS = _periodMS;
 8002eca:	4a0c      	ldr	r2, [pc, #48]	; (8002efc <TIMER1_ChangePeriod+0x40>)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6013      	str	r3, [r2, #0]
 	TIM1->ARR		 = (periodMS * 1000) - 1;	// Setting counter automatic reload value
 8002ed0:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <TIMER1_ChangePeriod+0x40>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	0152      	lsls	r2, r2, #5
 8002eda:	1ad2      	subs	r2, r2, r3
 8002edc:	0092      	lsls	r2, r2, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	4a06      	ldr	r2, [pc, #24]	; (8002f00 <TIMER1_ChangePeriod+0x44>)
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	8593      	strh	r3, [r2, #44]	; 0x2c
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000130 	.word	0x20000130
 8002efc:	20000134 	.word	0x20000134
 8002f00:	40012c00 	.word	0x40012c00

08002f04 <TIMER1_SetCallback>:

void TIMER1_SetCallback(TIMER1_Callback cb)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
	cbTimer1 = cb;
 8002f0c:	4a03      	ldr	r2, [pc, #12]	; (8002f1c <TIMER1_SetCallback+0x18>)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6013      	str	r3, [r2, #0]
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr
 8002f1c:	20000374 	.word	0x20000374

08002f20 <TIMER1_getSystemTime_Us>:
float TIMER1_getSystemTime() {
    return ((float)timer_resets + (TIM1->SR ? 1.0 : 0.0)) * 1e-3 * periodMS + ((float)TIM1->CNT) * 1e-6;
}

// unsigned long max value: 4'294'967'295us = 4'294.967'295s ~ 60min
unsigned int TIMER1_getSystemTime_Us() {
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
    return (timer_resets + (TIM1->SR ? 1 : 0)) * 1000 * periodMS + TIM1->CNT;
 8002f24:	4b0d      	ldr	r3, [pc, #52]	; (8002f5c <TIMER1_getSystemTime_Us+0x3c>)
 8002f26:	8a1b      	ldrh	r3, [r3, #16]
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <TIMER1_getSystemTime_Us+0x12>
 8002f2e:	2201      	movs	r2, #1
 8002f30:	e000      	b.n	8002f34 <TIMER1_getSystemTime_Us+0x14>
 8002f32:	2200      	movs	r2, #0
 8002f34:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <TIMER1_getSystemTime_Us+0x40>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4413      	add	r3, r2
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <TIMER1_getSystemTime_Us+0x44>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	fb03 f302 	mul.w	r3, r3, r2
 8002f44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f48:	fb02 f303 	mul.w	r3, r2, r3
 8002f4c:	4a03      	ldr	r2, [pc, #12]	; (8002f5c <TIMER1_getSystemTime_Us+0x3c>)
 8002f4e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002f50:	b292      	uxth	r2, r2
 8002f52:	4413      	add	r3, r2
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr
 8002f5c:	40012c00 	.word	0x40012c00
 8002f60:	20000130 	.word	0x20000130
 8002f64:	20000134 	.word	0x20000134

08002f68 <TIM1_UP_IRQHandler>:

// Timer 1 interrupt handler
void TIM1_UP_IRQHandler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
	if(TIM1->SR & 0x0001)
 8002f6c:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <TIM1_UP_IRQHandler+0x40>)
 8002f6e:	8a1b      	ldrh	r3, [r3, #16]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d013      	beq.n	8002fa2 <TIM1_UP_IRQHandler+0x3a>
	{
        timer_resets += 1;
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <TIM1_UP_IRQHandler+0x44>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <TIM1_UP_IRQHandler+0x44>)
 8002f82:	6013      	str	r3, [r2, #0]
		TIM1->SR &= ~(1<<0);
 8002f84:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <TIM1_UP_IRQHandler+0x40>)
 8002f86:	8a1b      	ldrh	r3, [r3, #16]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	4a07      	ldr	r2, [pc, #28]	; (8002fa8 <TIM1_UP_IRQHandler+0x40>)
 8002f8c:	f023 0301 	bic.w	r3, r3, #1
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	8213      	strh	r3, [r2, #16]
		if (cbTimer1) {
 8002f94:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <TIM1_UP_IRQHandler+0x48>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <TIM1_UP_IRQHandler+0x3a>
			cbTimer1();
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <TIM1_UP_IRQHandler+0x48>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4798      	blx	r3
		}
	}
}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40012c00 	.word	0x40012c00
 8002fac:	20000130 	.word	0x20000130
 8002fb0:	20000374 	.word	0x20000374

08002fb4 <__enable_irq>:
static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	b662      	cpsie	i
 8002fba:	bf00      	nop
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr

08002fc2 <__disable_irq>:
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 8002fc2:	b480      	push	{r7}
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	b672      	cpsid	i
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <USART_Init>:
static unsigned int  rxInp;
static unsigned int  rxOut;
static unsigned int  rxCnt;

void USART_Init(unsigned int baud, bool interruptEn)
{
 8002fd0:	b5b0      	push	{r4, r5, r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	70fb      	strb	r3, [r7, #3]
	unsigned short mantissa;
	unsigned short fraction;
	float temp = 72e6;
 8002fdc:	4b46      	ldr	r3, [pc, #280]	; (80030f8 <USART_Init+0x128>)
 8002fde:	60fb      	str	r3, [r7, #12]

    rxInp = 0;
 8002fe0:	4b46      	ldr	r3, [pc, #280]	; (80030fc <USART_Init+0x12c>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
    rxOut = 0;
 8002fe6:	4b46      	ldr	r3, [pc, #280]	; (8003100 <USART_Init+0x130>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
    rxCnt = 0;
 8002fec:	4b45      	ldr	r3, [pc, #276]	; (8003104 <USART_Init+0x134>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]
    
	// Calculate baud rate divisor
	temp 	 /= 16.0 * baud;
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f7fd fad4 	bl	80005a0 <__aeabi_f2d>
 8002ff8:	4604      	mov	r4, r0
 8002ffa:	460d      	mov	r5, r1
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7fd faad 	bl	800055c <__aeabi_ui2d>
 8003002:	f04f 0200 	mov.w	r2, #0
 8003006:	4b40      	ldr	r3, [pc, #256]	; (8003108 <USART_Init+0x138>)
 8003008:	f7fd fb22 	bl	8000650 <__aeabi_dmul>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4620      	mov	r0, r4
 8003012:	4629      	mov	r1, r5
 8003014:	f7fd fc46 	bl	80008a4 <__aeabi_ddiv>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4610      	mov	r0, r2
 800301e:	4619      	mov	r1, r3
 8003020:	f7fd fdd8 	bl	8000bd4 <__aeabi_d2f>
 8003024:	4603      	mov	r3, r0
 8003026:	60fb      	str	r3, [r7, #12]
	mantissa  = (unsigned short)temp;
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f7fd ffcd 	bl	8000fc8 <__aeabi_f2uiz>
 800302e:	4603      	mov	r3, r0
 8003030:	817b      	strh	r3, [r7, #10]
	fraction  = (unsigned short)((temp - mantissa) * 16);
 8003032:	897b      	ldrh	r3, [r7, #10]
 8003034:	4618      	mov	r0, r3
 8003036:	f7fd fed7 	bl	8000de8 <__aeabi_i2f>
 800303a:	4603      	mov	r3, r0
 800303c:	4619      	mov	r1, r3
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f7fd fe1c 	bl	8000c7c <__aeabi_fsub>
 8003044:	4603      	mov	r3, r0
 8003046:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 800304a:	4618      	mov	r0, r3
 800304c:	f7fd f890 	bl	8000170 <__aeabi_fmul>
 8003050:	4603      	mov	r3, r0
 8003052:	4618      	mov	r0, r3
 8003054:	f7fd ffb8 	bl	8000fc8 <__aeabi_f2uiz>
 8003058:	4603      	mov	r3, r0
 800305a:	813b      	strh	r3, [r7, #8]

	RCC->APB2ENR 	|=	1<<2;   					// Enable PORTA clock  
 800305c:	4b2b      	ldr	r3, [pc, #172]	; (800310c <USART_Init+0x13c>)
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	4a2a      	ldr	r2, [pc, #168]	; (800310c <USART_Init+0x13c>)
 8003062:	f043 0304 	orr.w	r3, r3, #4
 8003066:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR 	|=	1<<14;						// Enable serial clock
 8003068:	4b28      	ldr	r3, [pc, #160]	; (800310c <USART_Init+0x13c>)
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	4a27      	ldr	r2, [pc, #156]	; (800310c <USART_Init+0x13c>)
 800306e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003072:	6193      	str	r3, [r2, #24]
	GPIOA->CRH   	&= 0xFFFFF00F;					// IO status setting
 8003074:	4b26      	ldr	r3, [pc, #152]	; (8003110 <USART_Init+0x140>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4a25      	ldr	r2, [pc, #148]	; (8003110 <USART_Init+0x140>)
 800307a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800307e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH   	|= 0x000008B0;					// IO status setting
 8003080:	4b23      	ldr	r3, [pc, #140]	; (8003110 <USART_Init+0x140>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	4a22      	ldr	r2, [pc, #136]	; (8003110 <USART_Init+0x140>)
 8003086:	f443 630b 	orr.w	r3, r3, #2224	; 0x8b0
 800308a:	6053      	str	r3, [r2, #4]

	RCC->APB2RSTR	|= 1<<14;						// Reset serial port 1
 800308c:	4b1f      	ldr	r3, [pc, #124]	; (800310c <USART_Init+0x13c>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	4a1e      	ldr	r2, [pc, #120]	; (800310c <USART_Init+0x13c>)
 8003092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003096:	60d3      	str	r3, [r2, #12]
	RCC->APB2RSTR	&=~(1<<14);						// Stop reset
 8003098:	4b1c      	ldr	r3, [pc, #112]	; (800310c <USART_Init+0x13c>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4a1b      	ldr	r2, [pc, #108]	; (800310c <USART_Init+0x13c>)
 800309e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030a2:	60d3      	str	r3, [r2, #12]

	USART1->BRR		 = (mantissa << 4) + fraction; 	// Baud rate setting
 80030a4:	897b      	ldrh	r3, [r7, #10]
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	491a      	ldr	r1, [pc, #104]	; (8003114 <USART_Init+0x144>)
 80030ac:	893b      	ldrh	r3, [r7, #8]
 80030ae:	4413      	add	r3, r2
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	810b      	strh	r3, [r1, #8]

    if (interruptEn)
 80030b4:	78fb      	ldrb	r3, [r7, #3]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d010      	beq.n	80030dc <USART_Init+0x10c>
    {
        USART1->CR1 |= 0x202C;						// Configure UART to 8N1, enable Rx interrupt, enable Rx/Tx
 80030ba:	4b16      	ldr	r3, [pc, #88]	; (8003114 <USART_Init+0x144>)
 80030bc:	899b      	ldrh	r3, [r3, #12]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	4a14      	ldr	r2, [pc, #80]	; (8003114 <USART_Init+0x144>)
 80030c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030c6:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	8193      	strh	r3, [r2, #12]
        SYS_NVIC_Init(2, 2, USART1_IRQn, 1);
 80030ce:	2301      	movs	r3, #1
 80030d0:	2225      	movs	r2, #37	; 0x25
 80030d2:	2102      	movs	r1, #2
 80030d4:	2002      	movs	r0, #2
 80030d6:	f7ff fdaf 	bl	8002c38 <SYS_NVIC_Init>
    }
    else
    {
        USART1->CR1 |= 0x200C;						// Configure UART to 8N1, enable Rx/Tx
    }
}
 80030da:	e009      	b.n	80030f0 <USART_Init+0x120>
        USART1->CR1 |= 0x200C;						// Configure UART to 8N1, enable Rx/Tx
 80030dc:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <USART_Init+0x144>)
 80030de:	899b      	ldrh	r3, [r3, #12]
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	4a0c      	ldr	r2, [pc, #48]	; (8003114 <USART_Init+0x144>)
 80030e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030e8:	f043 030c 	orr.w	r3, r3, #12
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	8193      	strh	r3, [r2, #12]
}
 80030f0:	bf00      	nop
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bdb0      	pop	{r4, r5, r7, pc}
 80030f8:	4c895440 	.word	0x4c895440
 80030fc:	20000238 	.word	0x20000238
 8003100:	2000023c 	.word	0x2000023c
 8003104:	20000240 	.word	0x20000240
 8003108:	40300000 	.word	0x40300000
 800310c:	40021000 	.word	0x40021000
 8003110:	40010800 	.word	0x40010800
 8003114:	40013800 	.word	0x40013800

08003118 <USART_ReceiveAsync>:
	}
	return false;
}

bool USART_ReceiveAsync(unsigned char * c)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
	if (rxCnt > 0)
 8003120:	4b12      	ldr	r3, [pc, #72]	; (800316c <USART_ReceiveAsync+0x54>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d01b      	beq.n	8003160 <USART_ReceiveAsync+0x48>
	{
		*c = (unsigned char)usartRxBuffer[rxOut++];
 8003128:	4b11      	ldr	r3, [pc, #68]	; (8003170 <USART_ReceiveAsync+0x58>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	4910      	ldr	r1, [pc, #64]	; (8003170 <USART_ReceiveAsync+0x58>)
 8003130:	600a      	str	r2, [r1, #0]
 8003132:	4a10      	ldr	r2, [pc, #64]	; (8003174 <USART_ReceiveAsync+0x5c>)
 8003134:	5cd2      	ldrb	r2, [r2, r3]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	701a      	strb	r2, [r3, #0]
        if (rxOut == USART_RX_BUFFER_SIZE)
 800313a:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <USART_ReceiveAsync+0x58>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003142:	d102      	bne.n	800314a <USART_ReceiveAsync+0x32>
        {
            rxOut = 0;
 8003144:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <USART_ReceiveAsync+0x58>)
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
        }
        
        __disable_irq();
 800314a:	f7ff ff3a 	bl	8002fc2 <__disable_irq>
        rxCnt--;
 800314e:	4b07      	ldr	r3, [pc, #28]	; (800316c <USART_ReceiveAsync+0x54>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	3b01      	subs	r3, #1
 8003154:	4a05      	ldr	r2, [pc, #20]	; (800316c <USART_ReceiveAsync+0x54>)
 8003156:	6013      	str	r3, [r2, #0]
        __enable_irq();
 8003158:	f7ff ff2c 	bl	8002fb4 <__enable_irq>
        
		return true;
 800315c:	2301      	movs	r3, #1
 800315e:	e000      	b.n	8003162 <USART_ReceiveAsync+0x4a>
	}
	return false;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20000240 	.word	0x20000240
 8003170:	2000023c 	.word	0x2000023c
 8003174:	20000138 	.word	0x20000138

08003178 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
    unsigned int sr = USART1->SR;
 800317e:	4b20      	ldr	r3, [pc, #128]	; (8003200 <USART1_IRQHandler+0x88>)
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	b29b      	uxth	r3, r3
 8003184:	607b      	str	r3, [r7, #4]
    
    if (sr & 0x0020)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f003 0320 	and.w	r3, r3, #32
 800318c:	2b00      	cmp	r3, #0
 800318e:	d026      	beq.n	80031de <USART1_IRQHandler+0x66>
    {
        if (rxCnt < USART_RX_BUFFER_SIZE)
 8003190:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <USART1_IRQHandler+0x8c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2bff      	cmp	r3, #255	; 0xff
 8003196:	d818      	bhi.n	80031ca <USART1_IRQHandler+0x52>
        {
            usartRxBuffer[rxInp++] = (unsigned char)USART1->DR;
 8003198:	4b19      	ldr	r3, [pc, #100]	; (8003200 <USART1_IRQHandler+0x88>)
 800319a:	889b      	ldrh	r3, [r3, #4]
 800319c:	b298      	uxth	r0, r3
 800319e:	4b1a      	ldr	r3, [pc, #104]	; (8003208 <USART1_IRQHandler+0x90>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	4918      	ldr	r1, [pc, #96]	; (8003208 <USART1_IRQHandler+0x90>)
 80031a6:	600a      	str	r2, [r1, #0]
 80031a8:	b2c1      	uxtb	r1, r0
 80031aa:	4a18      	ldr	r2, [pc, #96]	; (800320c <USART1_IRQHandler+0x94>)
 80031ac:	54d1      	strb	r1, [r2, r3]
            if (rxInp == USART_RX_BUFFER_SIZE)
 80031ae:	4b16      	ldr	r3, [pc, #88]	; (8003208 <USART1_IRQHandler+0x90>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b6:	d102      	bne.n	80031be <USART1_IRQHandler+0x46>
            {
                rxInp = 0;
 80031b8:	4b13      	ldr	r3, [pc, #76]	; (8003208 <USART1_IRQHandler+0x90>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
            }
            
            rxCnt++;
 80031be:	4b11      	ldr	r3, [pc, #68]	; (8003204 <USART1_IRQHandler+0x8c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3301      	adds	r3, #1
 80031c4:	4a0f      	ldr	r2, [pc, #60]	; (8003204 <USART1_IRQHandler+0x8c>)
 80031c6:	6013      	str	r3, [r2, #0]
        USART1->DR;
        rxInp = 0;
        rxOut = 0;
        rxCnt = 0;
    }
}
 80031c8:	e014      	b.n	80031f4 <USART1_IRQHandler+0x7c>
            rxInp = 0;
 80031ca:	4b0f      	ldr	r3, [pc, #60]	; (8003208 <USART1_IRQHandler+0x90>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
            rxOut = 0;
 80031d0:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <USART1_IRQHandler+0x98>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
            rxCnt = 0;
 80031d6:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <USART1_IRQHandler+0x8c>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
}
 80031dc:	e00a      	b.n	80031f4 <USART1_IRQHandler+0x7c>
        USART1->DR;
 80031de:	4b08      	ldr	r3, [pc, #32]	; (8003200 <USART1_IRQHandler+0x88>)
 80031e0:	889b      	ldrh	r3, [r3, #4]
        rxInp = 0;
 80031e2:	4b09      	ldr	r3, [pc, #36]	; (8003208 <USART1_IRQHandler+0x90>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
        rxOut = 0;
 80031e8:	4b09      	ldr	r3, [pc, #36]	; (8003210 <USART1_IRQHandler+0x98>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]
        rxCnt = 0;
 80031ee:	4b05      	ldr	r3, [pc, #20]	; (8003204 <USART1_IRQHandler+0x8c>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	40013800 	.word	0x40013800
 8003204:	20000240 	.word	0x20000240
 8003208:	20000238 	.word	0x20000238
 800320c:	20000138 	.word	0x20000138
 8003210:	2000023c 	.word	0x2000023c

08003214 <USART_SendBuffer>:
	while ((USART1->SR & 0x0080) == 0);		// Wait for TXE
	USART1->DR = c;
}

void USART_SendBuffer(const unsigned char * buff, unsigned int len)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
	unsigned int i;

	for (i = 0; i < len; i++)
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	e011      	b.n	8003248 <USART_SendBuffer+0x34>
	{
		while ((USART1->SR & 0x0080) == 0);		// Wait for TXE
 8003224:	bf00      	nop
 8003226:	4b0d      	ldr	r3, [pc, #52]	; (800325c <USART_SendBuffer+0x48>)
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	b29b      	uxth	r3, r3
 800322c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f8      	beq.n	8003226 <USART_SendBuffer+0x12>
		USART1->DR = buff[i];
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4413      	add	r3, r2
 800323a:	781a      	ldrb	r2, [r3, #0]
 800323c:	4b07      	ldr	r3, [pc, #28]	; (800325c <USART_SendBuffer+0x48>)
 800323e:	b292      	uxth	r2, r2
 8003240:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < len; i++)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	3301      	adds	r3, #1
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d3e9      	bcc.n	8003224 <USART_SendBuffer+0x10>
	}
}
 8003250:	bf00      	nop
 8003252:	bf00      	nop
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr
 800325c:	40013800 	.word	0x40013800

08003260 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003260:	480d      	ldr	r0, [pc, #52]	; (8003298 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003262:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003264:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003268:	480c      	ldr	r0, [pc, #48]	; (800329c <LoopForever+0x6>)
  ldr r1, =_edata
 800326a:	490d      	ldr	r1, [pc, #52]	; (80032a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800326c:	4a0d      	ldr	r2, [pc, #52]	; (80032a4 <LoopForever+0xe>)
  movs r3, #0
 800326e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003270:	e002      	b.n	8003278 <LoopCopyDataInit>

08003272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003276:	3304      	adds	r3, #4

08003278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800327a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800327c:	d3f9      	bcc.n	8003272 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800327e:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003280:	4c0a      	ldr	r4, [pc, #40]	; (80032ac <LoopForever+0x16>)
  movs r3, #0
 8003282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003284:	e001      	b.n	800328a <LoopFillZerobss>

08003286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003288:	3204      	adds	r2, #4

0800328a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800328a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800328c:	d3fb      	bcc.n	8003286 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800328e:	f000 f811 	bl	80032b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003292:	f7ff fa3b 	bl	800270c <main>

08003296 <LoopForever>:

LoopForever:
    b LoopForever
 8003296:	e7fe      	b.n	8003296 <LoopForever>
  ldr   r0, =_estack
 8003298:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800329c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032a0:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80032a4:	0800331c 	.word	0x0800331c
  ldr r2, =_sbss
 80032a8:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80032ac:	20000378 	.word	0x20000378

080032b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032b0:	e7fe      	b.n	80032b0 <ADC1_2_IRQHandler>
	...

080032b4 <__libc_init_array>:
 80032b4:	b570      	push	{r4, r5, r6, lr}
 80032b6:	2600      	movs	r6, #0
 80032b8:	4d0c      	ldr	r5, [pc, #48]	; (80032ec <__libc_init_array+0x38>)
 80032ba:	4c0d      	ldr	r4, [pc, #52]	; (80032f0 <__libc_init_array+0x3c>)
 80032bc:	1b64      	subs	r4, r4, r5
 80032be:	10a4      	asrs	r4, r4, #2
 80032c0:	42a6      	cmp	r6, r4
 80032c2:	d109      	bne.n	80032d8 <__libc_init_array+0x24>
 80032c4:	f000 f81a 	bl	80032fc <_init>
 80032c8:	2600      	movs	r6, #0
 80032ca:	4d0a      	ldr	r5, [pc, #40]	; (80032f4 <__libc_init_array+0x40>)
 80032cc:	4c0a      	ldr	r4, [pc, #40]	; (80032f8 <__libc_init_array+0x44>)
 80032ce:	1b64      	subs	r4, r4, r5
 80032d0:	10a4      	asrs	r4, r4, #2
 80032d2:	42a6      	cmp	r6, r4
 80032d4:	d105      	bne.n	80032e2 <__libc_init_array+0x2e>
 80032d6:	bd70      	pop	{r4, r5, r6, pc}
 80032d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032dc:	4798      	blx	r3
 80032de:	3601      	adds	r6, #1
 80032e0:	e7ee      	b.n	80032c0 <__libc_init_array+0xc>
 80032e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032e6:	4798      	blx	r3
 80032e8:	3601      	adds	r6, #1
 80032ea:	e7f2      	b.n	80032d2 <__libc_init_array+0x1e>
 80032ec:	08003314 	.word	0x08003314
 80032f0:	08003314 	.word	0x08003314
 80032f4:	08003314 	.word	0x08003314
 80032f8:	08003318 	.word	0x08003318

080032fc <_init>:
 80032fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fe:	bf00      	nop
 8003300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003302:	bc08      	pop	{r3}
 8003304:	469e      	mov	lr, r3
 8003306:	4770      	bx	lr

08003308 <_fini>:
 8003308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330a:	bf00      	nop
 800330c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800330e:	bc08      	pop	{r3}
 8003310:	469e      	mov	lr, r3
 8003312:	4770      	bx	lr
